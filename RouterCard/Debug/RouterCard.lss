
RouterCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001e42  00001ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b17  0080012c  0080012c  00001f02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000068df  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a9a  00000000  00000000  00008d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030ea  00000000  00000000  0000a80d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f4c  00000000  00000000  0000d8f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001529  00000000  00000000  0000e844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000047b0  00000000  00000000  0000fd6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a8  00000000  00000000  0001451d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
       2:	00 00       	nop
       4:	7e c0       	rjmp	.+252    	; 0x102 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c0       	rjmp	.+248    	; 0x102 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c0       	rjmp	.+244    	; 0x102 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c0       	rjmp	.+240    	; 0x102 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c0       	rjmp	.+236    	; 0x102 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c0       	rjmp	.+232    	; 0x102 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c0       	rjmp	.+228    	; 0x102 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c0       	rjmp	.+224    	; 0x102 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c0       	rjmp	.+220    	; 0x102 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c0       	rjmp	.+216    	; 0x102 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c0       	rjmp	.+212    	; 0x102 <__bad_interrupt>
      2e:	00 00       	nop
      30:	68 c0       	rjmp	.+208    	; 0x102 <__bad_interrupt>
      32:	00 00       	nop
      34:	66 c0       	rjmp	.+204    	; 0x102 <__bad_interrupt>
      36:	00 00       	nop
      38:	64 c0       	rjmp	.+200    	; 0x102 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c0       	rjmp	.+196    	; 0x102 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c0       	rjmp	.+192    	; 0x102 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__vector_17>
      48:	d1 c2       	rjmp	.+1442   	; 0x5ec <__vector_18>
      4a:	00 00       	nop
      4c:	5a c0       	rjmp	.+180    	; 0x102 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c0       	rjmp	.+176    	; 0x102 <__bad_interrupt>
      52:	00 00       	nop
      54:	9c c2       	rjmp	.+1336   	; 0x58e <__vector_21>
      56:	00 00       	nop
      58:	2f c2       	rjmp	.+1118   	; 0x4b8 <__vector_22>
      5a:	00 00       	nop
      5c:	52 c0       	rjmp	.+164    	; 0x102 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c0       	rjmp	.+160    	; 0x102 <__bad_interrupt>
      62:	00 00       	nop
      64:	4e c0       	rjmp	.+156    	; 0x102 <__bad_interrupt>
      66:	00 00       	nop
      68:	4c c0       	rjmp	.+152    	; 0x102 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4a c0       	rjmp	.+148    	; 0x102 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c0       	rjmp	.+144    	; 0x102 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c0       	rjmp	.+136    	; 0x102 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c0       	rjmp	.+132    	; 0x102 <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c2       	rjmp	.+1198   	; 0x530 <__vector_32>
      82:	00 00       	nop
      84:	d5 c1       	rjmp	.+938    	; 0x430 <__vector_33>
      86:	00 00       	nop
      88:	3c c0       	rjmp	.+120    	; 0x102 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3a c0       	rjmp	.+116    	; 0x102 <__bad_interrupt>
      8e:	00 00       	nop
      90:	38 c0       	rjmp	.+112    	; 0x102 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 0c       	add	r13, r9
      96:	90 0c       	add	r9, r0
      98:	92 0c       	add	r9, r2
      9a:	94 0c       	add	r9, r4
      9c:	96 0c       	add	r9, r6
      9e:	98 0c       	add	r9, r8
      a0:	df 0c       	add	r13, r15
      a2:	8e 0c       	add	r8, r14
      a4:	e1 0c       	add	r14, r1
      a6:	db 0c       	add	r13, r11
      a8:	9a 0c       	add	r9, r10
      aa:	9c 0c       	add	r9, r12
      ac:	dd 0c       	add	r13, r13
      ae:	aa 0c       	add	r10, r10
      b0:	ae 0c       	add	r10, r14
      b2:	b0 0c       	add	r11, r0
      b4:	b2 0c       	add	r11, r2
      b6:	b4 0c       	add	r11, r4
      b8:	e3 0c       	add	r14, r3
      ba:	a8 0c       	add	r10, r8
      bc:	ac 0c       	add	r10, r12
      be:	b6 0c       	add	r11, r6
      c0:	b8 0c       	add	r11, r8
      c2:	ba 0c       	add	r11, r10

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d0 e1       	ldi	r29, 0x10	; 16
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e2 e4       	ldi	r30, 0x42	; 66
      d8:	fe e1       	ldi	r31, 0x1E	; 30
      da:	00 e0       	ldi	r16, 0x00	; 0
      dc:	0b bf       	out	0x3b, r16	; 59
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
      e0:	07 90       	elpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 32       	cpi	r26, 0x2C	; 44
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>

000000ea <__do_clear_bss>:
      ea:	2c e0       	ldi	r18, 0x0C	; 12
      ec:	ac e2       	ldi	r26, 0x2C	; 44
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a3 34       	cpi	r26, 0x43	; 67
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <main>
      fe:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <_exit>

00000102 <__bad_interrupt>:
     102:	7e cf       	rjmp	.-260    	; 0x0 <__vectors>

00000104 <cb_push_back>:
	cb->tail = (int*)cb->tail + cb->sz;
	if(cb->tail == cb->buffer_end)
		cb->tail = cb->buffer;
	cb->count--;
	return *val;
}
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	ec 01       	movw	r28, r24
     10a:	4c 85       	ldd	r20, Y+12	; 0x0c
     10c:	5d 85       	ldd	r21, Y+13	; 0x0d
     10e:	88 81       	ld	r24, Y
     110:	99 81       	ldd	r25, Y+1	; 0x01
     112:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <memcpy>
     116:	28 81       	ld	r18, Y
     118:	39 81       	ldd	r19, Y+1	; 0x01
     11a:	8c 85       	ldd	r24, Y+12	; 0x0c
     11c:	9d 85       	ldd	r25, Y+13	; 0x0d
     11e:	82 0f       	add	r24, r18
     120:	93 1f       	adc	r25, r19
     122:	99 83       	std	Y+1, r25	; 0x01
     124:	88 83       	st	Y, r24
     126:	2e 81       	ldd	r18, Y+6	; 0x06
     128:	3f 81       	ldd	r19, Y+7	; 0x07
     12a:	82 17       	cp	r24, r18
     12c:	93 07       	cpc	r25, r19
     12e:	20 f0       	brcs	.+8      	; 0x138 <cb_push_back+0x34>
     130:	8c 81       	ldd	r24, Y+4	; 0x04
     132:	9d 81       	ldd	r25, Y+5	; 0x05
     134:	99 83       	std	Y+1, r25	; 0x01
     136:	88 83       	st	Y, r24
     138:	8a 85       	ldd	r24, Y+10	; 0x0a
     13a:	9b 85       	ldd	r25, Y+11	; 0x0b
     13c:	28 85       	ldd	r18, Y+8	; 0x08
     13e:	39 85       	ldd	r19, Y+9	; 0x09
     140:	82 17       	cp	r24, r18
     142:	93 07       	cpc	r25, r19
     144:	1c f4       	brge	.+6      	; 0x14c <cb_push_back+0x48>
     146:	01 96       	adiw	r24, 0x01	; 1
     148:	9b 87       	std	Y+11, r25	; 0x0b
     14a:	8a 87       	std	Y+10, r24	; 0x0a
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <cb_pop_front>:
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	fb 01       	movw	r30, r22
     158:	10 82       	st	Z, r1
     15a:	fc 01       	movw	r30, r24
     15c:	22 85       	ldd	r18, Z+10	; 0x0a
     15e:	33 85       	ldd	r19, Z+11	; 0x0b
     160:	23 2b       	or	r18, r19
     162:	f9 f0       	breq	.+62     	; 0x1a2 <cb_pop_front+0x50>
     164:	9b 01       	movw	r18, r22
     166:	ec 01       	movw	r28, r24
     168:	62 81       	ldd	r22, Z+2	; 0x02
     16a:	73 81       	ldd	r23, Z+3	; 0x03
     16c:	44 85       	ldd	r20, Z+12	; 0x0c
     16e:	55 85       	ldd	r21, Z+13	; 0x0d
     170:	c9 01       	movw	r24, r18
     172:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <memcpy>
     176:	2a 81       	ldd	r18, Y+2	; 0x02
     178:	3b 81       	ldd	r19, Y+3	; 0x03
     17a:	8c 85       	ldd	r24, Y+12	; 0x0c
     17c:	9d 85       	ldd	r25, Y+13	; 0x0d
     17e:	82 0f       	add	r24, r18
     180:	93 1f       	adc	r25, r19
     182:	9b 83       	std	Y+3, r25	; 0x03
     184:	8a 83       	std	Y+2, r24	; 0x02
     186:	2e 81       	ldd	r18, Y+6	; 0x06
     188:	3f 81       	ldd	r19, Y+7	; 0x07
     18a:	82 17       	cp	r24, r18
     18c:	93 07       	cpc	r25, r19
     18e:	21 f4       	brne	.+8      	; 0x198 <cb_pop_front+0x46>
     190:	8c 81       	ldd	r24, Y+4	; 0x04
     192:	9d 81       	ldd	r25, Y+5	; 0x05
     194:	9b 83       	std	Y+3, r25	; 0x03
     196:	8a 83       	std	Y+2, r24	; 0x02
     198:	8a 85       	ldd	r24, Y+10	; 0x0a
     19a:	9b 85       	ldd	r25, Y+11	; 0x0b
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	9b 87       	std	Y+11, r25	; 0x0b
     1a0:	8a 87       	std	Y+10, r24	; 0x0a
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <USART0_Init>:
     1a8:	e0 e3       	ldi	r30, 0x30	; 48
     1aa:	f2 e0       	ldi	r31, 0x02	; 2
     1ac:	47 ef       	ldi	r20, 0xF7	; 247
     1ae:	51 e0       	ldi	r21, 0x01	; 1
     1b0:	55 83       	std	Z+5, r21	; 0x05
     1b2:	44 83       	std	Z+4, r20	; 0x04
     1b4:	29 e2       	ldi	r18, 0x29	; 41
     1b6:	32 e0       	ldi	r19, 0x02	; 2
     1b8:	37 83       	std	Z+7, r19	; 0x07
     1ba:	26 83       	std	Z+6, r18	; 0x06
     1bc:	22 e3       	ldi	r18, 0x32	; 50
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	31 87       	std	Z+9, r19	; 0x09
     1c2:	20 87       	std	Z+8, r18	; 0x08
     1c4:	13 86       	std	Z+11, r1	; 0x0b
     1c6:	12 86       	std	Z+10, r1	; 0x0a
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	35 87       	std	Z+13, r19	; 0x0d
     1ce:	24 87       	std	Z+12, r18	; 0x0c
     1d0:	51 83       	std	Z+1, r21	; 0x01
     1d2:	40 83       	st	Z, r20
     1d4:	53 83       	std	Z+3, r21	; 0x03
     1d6:	42 83       	std	Z+2, r20	; 0x02
     1d8:	ec e4       	ldi	r30, 0x4C	; 76
     1da:	f2 e0       	ldi	r31, 0x02	; 2
     1dc:	4a e2       	ldi	r20, 0x2A	; 42
     1de:	52 e0       	ldi	r21, 0x02	; 2
     1e0:	55 83       	std	Z+5, r21	; 0x05
     1e2:	44 83       	std	Z+4, r20	; 0x04
     1e4:	af e2       	ldi	r26, 0x2F	; 47
     1e6:	b2 e0       	ldi	r27, 0x02	; 2
     1e8:	b7 83       	std	Z+7, r27	; 0x07
     1ea:	a6 83       	std	Z+6, r26	; 0x06
     1ec:	a5 e0       	ldi	r26, 0x05	; 5
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	b1 87       	std	Z+9, r27	; 0x09
     1f2:	a0 87       	std	Z+8, r26	; 0x08
     1f4:	13 86       	std	Z+11, r1	; 0x0b
     1f6:	12 86       	std	Z+10, r1	; 0x0a
     1f8:	35 87       	std	Z+13, r19	; 0x0d
     1fa:	24 87       	std	Z+12, r18	; 0x0c
     1fc:	51 83       	std	Z+1, r21	; 0x01
     1fe:	40 83       	st	Z, r20
     200:	53 83       	std	Z+3, r21	; 0x03
     202:	42 83       	std	Z+2, r20	; 0x02
     204:	61 15       	cp	r22, r1
     206:	26 e9       	ldi	r18, 0x96	; 150
     208:	72 07       	cpc	r23, r18
     20a:	81 05       	cpc	r24, r1
     20c:	91 05       	cpc	r25, r1
     20e:	01 f1       	breq	.+64     	; 0x250 <USART0_Init+0xa8>
     210:	30 f4       	brcc	.+12     	; 0x21e <USART0_Init+0x76>
     212:	61 15       	cp	r22, r1
     214:	7b 44       	sbci	r23, 0x4B	; 75
     216:	81 05       	cpc	r24, r1
     218:	91 05       	cpc	r25, r1
     21a:	09 f1       	breq	.+66     	; 0x25e <USART0_Init+0xb6>
     21c:	27 c0       	rjmp	.+78     	; 0x26c <USART0_Init+0xc4>
     21e:	61 15       	cp	r22, r1
     220:	21 ee       	ldi	r18, 0xE1	; 225
     222:	72 07       	cpc	r23, r18
     224:	81 05       	cpc	r24, r1
     226:	91 05       	cpc	r25, r1
     228:	61 f0       	breq	.+24     	; 0x242 <USART0_Init+0x9a>
     22a:	61 15       	cp	r22, r1
     22c:	72 4c       	sbci	r23, 0xC2	; 194
     22e:	81 40       	sbci	r24, 0x01	; 1
     230:	91 05       	cpc	r25, r1
     232:	e1 f4       	brne	.+56     	; 0x26c <USART0_Init+0xc4>
     234:	80 e1       	ldi	r24, 0x10	; 16
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     23c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     240:	1b c0       	rjmp	.+54     	; 0x278 <USART0_Init+0xd0>
     242:	82 e2       	ldi	r24, 0x22	; 34
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     24a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     24e:	14 c0       	rjmp	.+40     	; 0x278 <USART0_Init+0xd0>
     250:	83 e3       	ldi	r24, 0x33	; 51
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     258:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     25c:	0d c0       	rjmp	.+26     	; 0x278 <USART0_Init+0xd0>
     25e:	87 e6       	ldi	r24, 0x67	; 103
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     266:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     26a:	06 c0       	rjmp	.+12     	; 0x278 <USART0_Init+0xd0>
     26c:	8f ec       	ldi	r24, 0xCF	; 207
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     27e:	8e e0       	ldi	r24, 0x0E	; 14
     280:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     284:	88 e9       	ldi	r24, 0x98	; 152
     286:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	90 93 40 0c 	sts	0x0C40, r25	; 0x800c40 <__iob+0x3>
     292:	80 93 3f 0c 	sts	0x0C3F, r24	; 0x800c3f <__iob+0x2>
     296:	08 95       	ret

00000298 <USART1_Init>:
     298:	ee e3       	ldi	r30, 0x3E	; 62
     29a:	f2 e0       	ldi	r31, 0x02	; 2
     29c:	4a e7       	ldi	r20, 0x7A	; 122
     29e:	51 e0       	ldi	r21, 0x01	; 1
     2a0:	55 83       	std	Z+5, r21	; 0x05
     2a2:	44 83       	std	Z+4, r20	; 0x04
     2a4:	2e ed       	ldi	r18, 0xDE	; 222
     2a6:	31 e0       	ldi	r19, 0x01	; 1
     2a8:	37 83       	std	Z+7, r19	; 0x07
     2aa:	26 83       	std	Z+6, r18	; 0x06
     2ac:	24 e6       	ldi	r18, 0x64	; 100
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	31 87       	std	Z+9, r19	; 0x09
     2b2:	20 87       	std	Z+8, r18	; 0x08
     2b4:	13 86       	std	Z+11, r1	; 0x0b
     2b6:	12 86       	std	Z+10, r1	; 0x0a
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	35 87       	std	Z+13, r19	; 0x0d
     2be:	24 87       	std	Z+12, r18	; 0x0c
     2c0:	51 83       	std	Z+1, r21	; 0x01
     2c2:	40 83       	st	Z, r20
     2c4:	53 83       	std	Z+3, r21	; 0x03
     2c6:	42 83       	std	Z+2, r20	; 0x02
     2c8:	ea e6       	ldi	r30, 0x6A	; 106
     2ca:	f1 e0       	ldi	r31, 0x01	; 1
     2cc:	4e ed       	ldi	r20, 0xDE	; 222
     2ce:	51 e0       	ldi	r21, 0x01	; 1
     2d0:	55 83       	std	Z+5, r21	; 0x05
     2d2:	44 83       	std	Z+4, r20	; 0x04
     2d4:	a7 ef       	ldi	r26, 0xF7	; 247
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	b7 83       	std	Z+7, r27	; 0x07
     2da:	a6 83       	std	Z+6, r26	; 0x06
     2dc:	a9 e1       	ldi	r26, 0x19	; 25
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	b1 87       	std	Z+9, r27	; 0x09
     2e2:	a0 87       	std	Z+8, r26	; 0x08
     2e4:	13 86       	std	Z+11, r1	; 0x0b
     2e6:	12 86       	std	Z+10, r1	; 0x0a
     2e8:	35 87       	std	Z+13, r19	; 0x0d
     2ea:	24 87       	std	Z+12, r18	; 0x0c
     2ec:	51 83       	std	Z+1, r21	; 0x01
     2ee:	40 83       	st	Z, r20
     2f0:	53 83       	std	Z+3, r21	; 0x03
     2f2:	42 83       	std	Z+2, r20	; 0x02
     2f4:	61 15       	cp	r22, r1
     2f6:	26 e9       	ldi	r18, 0x96	; 150
     2f8:	72 07       	cpc	r23, r18
     2fa:	81 05       	cpc	r24, r1
     2fc:	91 05       	cpc	r25, r1
     2fe:	01 f1       	breq	.+64     	; 0x340 <USART1_Init+0xa8>
     300:	30 f4       	brcc	.+12     	; 0x30e <USART1_Init+0x76>
     302:	61 15       	cp	r22, r1
     304:	7b 44       	sbci	r23, 0x4B	; 75
     306:	81 05       	cpc	r24, r1
     308:	91 05       	cpc	r25, r1
     30a:	09 f1       	breq	.+66     	; 0x34e <USART1_Init+0xb6>
     30c:	27 c0       	rjmp	.+78     	; 0x35c <USART1_Init+0xc4>
     30e:	61 15       	cp	r22, r1
     310:	21 ee       	ldi	r18, 0xE1	; 225
     312:	72 07       	cpc	r23, r18
     314:	81 05       	cpc	r24, r1
     316:	91 05       	cpc	r25, r1
     318:	61 f0       	breq	.+24     	; 0x332 <USART1_Init+0x9a>
     31a:	61 15       	cp	r22, r1
     31c:	72 4c       	sbci	r23, 0xC2	; 194
     31e:	81 40       	sbci	r24, 0x01	; 1
     320:	91 05       	cpc	r25, r1
     322:	e1 f4       	brne	.+56     	; 0x35c <USART1_Init+0xc4>
     324:	80 e1       	ldi	r24, 0x10	; 16
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     32c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     330:	1b c0       	rjmp	.+54     	; 0x368 <USART1_Init+0xd0>
     332:	82 e2       	ldi	r24, 0x22	; 34
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     33a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     33e:	14 c0       	rjmp	.+40     	; 0x368 <USART1_Init+0xd0>
     340:	83 e3       	ldi	r24, 0x33	; 51
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     348:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     34c:	0d c0       	rjmp	.+26     	; 0x368 <USART1_Init+0xd0>
     34e:	87 e6       	ldi	r24, 0x67	; 103
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     356:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     35a:	06 c0       	rjmp	.+12     	; 0x368 <USART1_Init+0xd0>
     35c:	8f ec       	ldi	r24, 0xCF	; 207
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     364:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     374:	88 e9       	ldi	r24, 0x98	; 152
     376:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     37a:	08 95       	ret

0000037c <USART0_put_C>:
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	1f 92       	push	r1
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	89 83       	std	Y+1, r24	; 0x01
     38c:	01 ec       	ldi	r16, 0xC1	; 193
     38e:	10 e0       	ldi	r17, 0x00	; 0
     390:	f8 01       	movw	r30, r16
     392:	80 81       	ld	r24, Z
     394:	8f 7d       	andi	r24, 0xDF	; 223
     396:	80 83       	st	Z, r24
     398:	be 01       	movw	r22, r28
     39a:	6f 5f       	subi	r22, 0xFF	; 255
     39c:	7f 4f       	sbci	r23, 0xFF	; 255
     39e:	80 e3       	ldi	r24, 0x30	; 48
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	b0 de       	rcall	.-672    	; 0x104 <cb_push_back>
     3a4:	f8 01       	movw	r30, r16
     3a6:	80 81       	ld	r24, Z
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	80 83       	st	Z, r24
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <uart_putchar>:
     3b8:	cf 93       	push	r28
     3ba:	c8 2f       	mov	r28, r24
     3bc:	8a 30       	cpi	r24, 0x0A	; 10
     3be:	11 f4       	brne	.+4      	; 0x3c4 <uart_putchar+0xc>
     3c0:	8d e0       	ldi	r24, 0x0D	; 13
     3c2:	fa df       	rcall	.-12     	; 0x3b8 <uart_putchar>
     3c4:	8c 2f       	mov	r24, r28
     3c6:	da df       	rcall	.-76     	; 0x37c <USART0_put_C>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <USART1_put_C>:
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	1f 92       	push	r1
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	89 83       	std	Y+1, r24	; 0x01
     3e0:	09 ec       	ldi	r16, 0xC9	; 201
     3e2:	10 e0       	ldi	r17, 0x00	; 0
     3e4:	f8 01       	movw	r30, r16
     3e6:	80 81       	ld	r24, Z
     3e8:	8f 7d       	andi	r24, 0xDF	; 223
     3ea:	80 83       	st	Z, r24
     3ec:	be 01       	movw	r22, r28
     3ee:	6f 5f       	subi	r22, 0xFF	; 255
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	8a e6       	ldi	r24, 0x6A	; 106
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	86 de       	rcall	.-756    	; 0x104 <cb_push_back>
     3f8:	f8 01       	movw	r30, r16
     3fa:	80 81       	ld	r24, Z
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	80 83       	st	Z, r24
     400:	0f 90       	pop	r0
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	08 95       	ret

0000040c <USART1_get_C>:
     40c:	69 e2       	ldi	r22, 0x29	; 41
     40e:	72 e0       	ldi	r23, 0x02	; 2
     410:	8e e3       	ldi	r24, 0x3E	; 62
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	9e de       	rcall	.-708    	; 0x152 <cb_pop_front>
     416:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <val>
     41a:	08 95       	ret

0000041c <isUART1_ReceiveEmpty>:
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <UART1_RX_Buffer+0xa>
     422:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <UART1_RX_Buffer+0xb>
     426:	12 16       	cp	r1, r18
     428:	13 06       	cpc	r1, r19
     42a:	0c f4       	brge	.+2      	; 0x42e <isUART1_ReceiveEmpty+0x12>
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 95       	ret

00000430 <__vector_33>:
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	0b b6       	in	r0, 0x3b	; 59
     43c:	0f 92       	push	r0
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	1f 92       	push	r1
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <UART1_TX_Buffer+0xa>
     464:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <UART1_TX_Buffer+0xb>
     468:	18 16       	cp	r1, r24
     46a:	19 06       	cpc	r1, r25
     46c:	54 f4       	brge	.+20     	; 0x482 <__vector_33+0x52>
     46e:	be 01       	movw	r22, r28
     470:	6f 5f       	subi	r22, 0xFF	; 255
     472:	7f 4f       	sbci	r23, 0xFF	; 255
     474:	8a e6       	ldi	r24, 0x6A	; 106
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	6c de       	rcall	.-808    	; 0x152 <cb_pop_front>
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     480:	05 c0       	rjmp	.+10     	; 0x48c <__vector_33+0x5c>
     482:	e9 ec       	ldi	r30, 0xC9	; 201
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	8f 7d       	andi	r24, 0xDF	; 223
     48a:	80 83       	st	Z, r24
     48c:	0f 90       	pop	r0
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	ff 91       	pop	r31
     494:	ef 91       	pop	r30
     496:	bf 91       	pop	r27
     498:	af 91       	pop	r26
     49a:	9f 91       	pop	r25
     49c:	8f 91       	pop	r24
     49e:	7f 91       	pop	r23
     4a0:	6f 91       	pop	r22
     4a2:	5f 91       	pop	r21
     4a4:	4f 91       	pop	r20
     4a6:	3f 91       	pop	r19
     4a8:	2f 91       	pop	r18
     4aa:	0f 90       	pop	r0
     4ac:	0b be       	out	0x3b, r0	; 59
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <__vector_22>:
ISR(USART0_UDRE_vect)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	0b b6       	in	r0, 0x3b	; 59
     4c4:	0f 92       	push	r0
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	4f 93       	push	r20
     4cc:	5f 93       	push	r21
     4ce:	6f 93       	push	r22
     4d0:	7f 93       	push	r23
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	af 93       	push	r26
     4d8:	bf 93       	push	r27
     4da:	ef 93       	push	r30
     4dc:	ff 93       	push	r31
	if (UART0_TX_Buffer.count > 0)
     4de:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <UART0_TX_Buffer+0xa>
     4e2:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <UART0_TX_Buffer+0xb>
     4e6:	18 16       	cp	r1, r24
     4e8:	19 06       	cpc	r1, r25
     4ea:	54 f4       	brge	.+20     	; 0x500 <__vector_22+0x48>
	{

		//if(uart0POP(&UART0_TX_Buffer, &tempTX))
		cb_pop_front(&UART0_TX_Buffer, &tempTX);
     4ec:	6c e2       	ldi	r22, 0x2C	; 44
     4ee:	71 e0       	ldi	r23, 0x01	; 1
     4f0:	80 e3       	ldi	r24, 0x30	; 48
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	2e de       	rcall	.-932    	; 0x152 <cb_pop_front>
		UDR0 = tempTX;
     4f6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
     4fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <__vector_22+0x52>
	}
	else
	{
		UCSR0B &=  ~(1<<UDRIE0); //disable sending when buffer empty
     500:	e1 ec       	ldi	r30, 0xC1	; 193
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	8f 7d       	andi	r24, 0xDF	; 223
     508:	80 83       	st	Z, r24
	}
}
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0b be       	out	0x3b, r0	; 59
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_32>:
// ISR(USART1_TX_vect) {
// //not used
// }
char received1;
int* HeadPtr;
ISR(USART1_RX_vect) {
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
     53a:	0b b6       	in	r0, 0x3b	; 59
     53c:	0f 92       	push	r0
     53e:	2f 93       	push	r18
     540:	3f 93       	push	r19
     542:	4f 93       	push	r20
     544:	5f 93       	push	r21
     546:	6f 93       	push	r22
     548:	7f 93       	push	r23
     54a:	8f 93       	push	r24
     54c:	9f 93       	push	r25
     54e:	af 93       	push	r26
     550:	bf 93       	push	r27
     552:	ef 93       	push	r30
     554:	ff 93       	push	r31


	received1 = UDR1; // might be able to eliminate this line.
     556:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     55a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <received1>

	cb_push_back(&UART1_RX_Buffer, &received1);
     55e:	6f e2       	ldi	r22, 0x2F	; 47
     560:	72 e0       	ldi	r23, 0x02	; 2
     562:	8e e3       	ldi	r24, 0x3E	; 62
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	ce dd       	rcall	.-1124   	; 0x104 <cb_push_back>

}
     568:	ff 91       	pop	r31
     56a:	ef 91       	pop	r30
     56c:	bf 91       	pop	r27
     56e:	af 91       	pop	r26
     570:	9f 91       	pop	r25
     572:	8f 91       	pop	r24
     574:	7f 91       	pop	r23
     576:	6f 91       	pop	r22
     578:	5f 91       	pop	r21
     57a:	4f 91       	pop	r20
     57c:	3f 91       	pop	r19
     57e:	2f 91       	pop	r18
     580:	0f 90       	pop	r0
     582:	0b be       	out	0x3b, r0	; 59
     584:	0f 90       	pop	r0
     586:	0f be       	out	0x3f, r0	; 63
     588:	0f 90       	pop	r0
     58a:	1f 90       	pop	r1
     58c:	18 95       	reti

0000058e <__vector_21>:

char received0;
ISR(USART0_RX_vect) {
     58e:	1f 92       	push	r1
     590:	0f 92       	push	r0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	0b b6       	in	r0, 0x3b	; 59
     59a:	0f 92       	push	r0
     59c:	2f 93       	push	r18
     59e:	3f 93       	push	r19
     5a0:	4f 93       	push	r20
     5a2:	5f 93       	push	r21
     5a4:	6f 93       	push	r22
     5a6:	7f 93       	push	r23
     5a8:	8f 93       	push	r24
     5aa:	9f 93       	push	r25
     5ac:	af 93       	push	r26
     5ae:	bf 93       	push	r27
     5b0:	ef 93       	push	r30
     5b2:	ff 93       	push	r31
	received0 = UDR0; // might be able to eliminate this line.
     5b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5b8:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <received0>
	cb_push_back(&UART0_RX_Buffer, &received0);
     5bc:	6a e5       	ldi	r22, 0x5A	; 90
     5be:	72 e0       	ldi	r23, 0x02	; 2
     5c0:	8c e4       	ldi	r24, 0x4C	; 76
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	9f dd       	rcall	.-1218   	; 0x104 <cb_push_back>
     5c6:	ff 91       	pop	r31
     5c8:	ef 91       	pop	r30
     5ca:	bf 91       	pop	r27
     5cc:	af 91       	pop	r26
     5ce:	9f 91       	pop	r25
     5d0:	8f 91       	pop	r24
     5d2:	7f 91       	pop	r23
     5d4:	6f 91       	pop	r22
     5d6:	5f 91       	pop	r21
     5d8:	4f 91       	pop	r20
     5da:	3f 91       	pop	r19
     5dc:	2f 91       	pop	r18
     5de:	0f 90       	pop	r0
     5e0:	0b be       	out	0x3b, r0	; 59
     5e2:	0f 90       	pop	r0
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	0f 90       	pop	r0
     5e8:	1f 90       	pop	r1
     5ea:	18 95       	reti

000005ec <__vector_18>:
		CANIDT4 = 1<<RTRTAG;
	}
	CANCDMOB = 0x40 + packet->length;

	return true;
}
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	11 24       	eor	r1, r1
     5f6:	0b b6       	in	r0, 0x3b	; 59
     5f8:	0f 92       	push	r0
     5fa:	2f 93       	push	r18
     5fc:	3f 93       	push	r19
     5fe:	4f 93       	push	r20
     600:	5f 93       	push	r21
     602:	6f 93       	push	r22
     604:	7f 93       	push	r23
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	af 93       	push	r26
     60c:	bf 93       	push	r27
     60e:	cf 93       	push	r28
     610:	ef 93       	push	r30
     612:	ff 93       	push	r31
     614:	ed ee       	ldi	r30, 0xED	; 237
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	c0 81       	ld	r28, Z
     61a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     61e:	68 2f       	mov	r22, r24
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	80 7f       	andi	r24, 0xF0	; 240
     624:	80 83       	st	Z, r24
     626:	72 95       	swap	r23
     628:	62 95       	swap	r22
     62a:	6f 70       	andi	r22, 0x0F	; 15
     62c:	67 27       	eor	r22, r23
     62e:	7f 70       	andi	r23, 0x0F	; 15
     630:	67 27       	eor	r22, r23
     632:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     636:	8f 7d       	andi	r24, 0xDF	; 223
     638:	c1 f5       	brne	.+112    	; 0x6aa <__vector_18+0xbe>
     63a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     63e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     642:	e8 e3       	ldi	r30, 0x38	; 56
     644:	f1 e0       	ldi	r31, 0x01	; 1
     646:	22 95       	swap	r18
     648:	26 95       	lsr	r18
     64a:	27 70       	andi	r18, 0x07	; 7
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	82 2b       	or	r24, r18
     65c:	91 83       	std	Z+1, r25	; 0x01
     65e:	80 83       	st	Z, r24
     660:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     664:	8f 70       	andi	r24, 0x0F	; 15
     666:	82 83       	std	Z+2, r24	; 0x02
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	59 f0       	breq	.+22     	; 0x684 <__vector_18+0x98>
     66e:	eb e3       	ldi	r30, 0x3B	; 59
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	85 5c       	subi	r24, 0xC5	; 197
     674:	9e 4f       	sbci	r25, 0xFE	; 254
     676:	aa ef       	ldi	r26, 0xFA	; 250
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	2c 91       	ld	r18, X
     67c:	21 93       	st	Z+, r18
     67e:	e8 17       	cp	r30, r24
     680:	f9 07       	cpc	r31, r25
     682:	d9 f7       	brne	.-10     	; 0x67a <__vector_18+0x8e>
     684:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     688:	80 e8       	ldi	r24, 0x80	; 128
     68a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     68e:	fb 01       	movw	r30, r22
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	e4 5a       	subi	r30, 0xA4	; 164
     696:	fd 4f       	sbci	r31, 0xFD	; 253
     698:	01 90       	ld	r0, Z+
     69a:	f0 81       	ld	r31, Z
     69c:	e0 2d       	mov	r30, r0
     69e:	88 e3       	ldi	r24, 0x38	; 56
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	09 95       	icall
     6a4:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     6a8:	d8 c0       	rjmp	.+432    	; 0x85a <__vector_18+0x26e>
     6aa:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     6ae:	8f 7b       	andi	r24, 0xBF	; 191
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <__vector_18+0xc8>
     6b2:	57 c0       	rjmp	.+174    	; 0x762 <__vector_18+0x176>
     6b4:	fb 01       	movw	r30, r22
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	e4 5a       	subi	r30, 0xA4	; 164
     6bc:	fd 4f       	sbci	r31, 0xFD	; 253
     6be:	01 90       	ld	r0, Z+
     6c0:	f0 81       	ld	r31, Z
     6c2:	e0 2d       	mov	r30, r0
     6c4:	88 e3       	ldi	r24, 0x38	; 56
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	09 95       	icall
     6ca:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <packet.2164+0x2>
     6ce:	88 23       	and	r24, r24
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <__vector_18+0xe8>
     6d2:	40 c0       	rjmp	.+128    	; 0x754 <__vector_18+0x168>
     6d4:	e8 e3       	ldi	r30, 0x38	; 56
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	80 81       	ld	r24, Z
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	96 95       	lsr	r25
     6de:	87 95       	ror	r24
     6e0:	96 95       	lsr	r25
     6e2:	87 95       	ror	r24
     6e4:	96 95       	lsr	r25
     6e6:	87 95       	ror	r24
     6e8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     6ec:	80 81       	ld	r24, Z
     6ee:	82 95       	swap	r24
     6f0:	88 0f       	add	r24, r24
     6f2:	80 7e       	andi	r24, 0xE0	; 224
     6f4:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     6f8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6fc:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     700:	82 81       	ldd	r24, Z+2	; 0x02
     702:	89 30       	cpi	r24, 0x09	; 9
     704:	19 f0       	breq	.+6      	; 0x70c <__vector_18+0x120>
     706:	81 11       	cpse	r24, r1
     708:	0d c0       	rjmp	.+26     	; 0x724 <__vector_18+0x138>
     70a:	1c c0       	rjmp	.+56     	; 0x744 <__vector_18+0x158>
     70c:	eb e3       	ldi	r30, 0x3B	; 59
     70e:	f1 e0       	ldi	r31, 0x01	; 1
     710:	23 e4       	ldi	r18, 0x43	; 67
     712:	31 e0       	ldi	r19, 0x01	; 1
     714:	aa ef       	ldi	r26, 0xFA	; 250
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	81 91       	ld	r24, Z+
     71a:	8c 93       	st	X, r24
     71c:	e2 17       	cp	r30, r18
     71e:	f3 07       	cpc	r31, r19
     720:	d9 f7       	brne	.-10     	; 0x718 <__vector_18+0x12c>
     722:	10 c0       	rjmp	.+32     	; 0x744 <__vector_18+0x158>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	28 e3       	ldi	r18, 0x38	; 56
     728:	31 e0       	ldi	r19, 0x01	; 1
     72a:	aa ef       	ldi	r26, 0xFA	; 250
     72c:	b0 e0       	ldi	r27, 0x00	; 0
     72e:	e8 2f       	mov	r30, r24
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	e8 5c       	subi	r30, 0xC8	; 200
     734:	fe 4f       	sbci	r31, 0xFE	; 254
     736:	93 81       	ldd	r25, Z+3	; 0x03
     738:	9c 93       	st	X, r25
     73a:	8f 5f       	subi	r24, 0xFF	; 255
     73c:	f9 01       	movw	r30, r18
     73e:	92 81       	ldd	r25, Z+2	; 0x02
     740:	89 17       	cp	r24, r25
     742:	a8 f3       	brcs	.-22     	; 0x72e <__vector_18+0x142>
     744:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     748:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <packet.2164+0x2>
     74c:	80 5c       	subi	r24, 0xC0	; 192
     74e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     752:	04 c0       	rjmp	.+8      	; 0x75c <__vector_18+0x170>
     754:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     758:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     75c:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     760:	7c c0       	rjmp	.+248    	; 0x85a <__vector_18+0x26e>
     762:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	8f 77       	andi	r24, 0x7F	; 127
     76a:	89 2b       	or	r24, r25
     76c:	c1 f5       	brne	.+112    	; 0x7de <__vector_18+0x1f2>
     76e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     772:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     776:	e8 e3       	ldi	r30, 0x38	; 56
     778:	f1 e0       	ldi	r31, 0x01	; 1
     77a:	22 95       	swap	r18
     77c:	26 95       	lsr	r18
     77e:	27 70       	andi	r18, 0x07	; 7
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	88 0f       	add	r24, r24
     788:	99 1f       	adc	r25, r25
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	82 2b       	or	r24, r18
     790:	91 83       	std	Z+1, r25	; 0x01
     792:	80 83       	st	Z, r24
     794:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     798:	8f 70       	andi	r24, 0x0F	; 15
     79a:	82 83       	std	Z+2, r24	; 0x02
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	59 f0       	breq	.+22     	; 0x7b8 <__vector_18+0x1cc>
     7a2:	eb e3       	ldi	r30, 0x3B	; 59
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	85 5c       	subi	r24, 0xC5	; 197
     7a8:	9e 4f       	sbci	r25, 0xFE	; 254
     7aa:	aa ef       	ldi	r26, 0xFA	; 250
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	2c 91       	ld	r18, X
     7b0:	21 93       	st	Z+, r18
     7b2:	8e 17       	cp	r24, r30
     7b4:	9f 07       	cpc	r25, r31
     7b6:	d9 f7       	brne	.-10     	; 0x7ae <__vector_18+0x1c2>
     7b8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     7bc:	80 e8       	ldi	r24, 0x80	; 128
     7be:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     7c2:	fb 01       	movw	r30, r22
     7c4:	ee 0f       	add	r30, r30
     7c6:	ff 1f       	adc	r31, r31
     7c8:	e4 5a       	subi	r30, 0xA4	; 164
     7ca:	fd 4f       	sbci	r31, 0xFD	; 253
     7cc:	01 90       	ld	r0, Z+
     7ce:	f0 81       	ld	r31, Z
     7d0:	e0 2d       	mov	r30, r0
     7d2:	88 e3       	ldi	r24, 0x38	; 56
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	09 95       	icall
     7d8:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     7dc:	3e c0       	rjmp	.+124    	; 0x85a <__vector_18+0x26e>
     7de:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     7e2:	8f 75       	andi	r24, 0x5F	; 95
     7e4:	c1 f5       	brne	.+112    	; 0x856 <__vector_18+0x26a>
     7e6:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     7ea:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     7ee:	e8 e3       	ldi	r30, 0x38	; 56
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	22 95       	swap	r18
     7f4:	26 95       	lsr	r18
     7f6:	27 70       	andi	r18, 0x07	; 7
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	88 0f       	add	r24, r24
     7fc:	99 1f       	adc	r25, r25
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	82 2b       	or	r24, r18
     808:	91 83       	std	Z+1, r25	; 0x01
     80a:	80 83       	st	Z, r24
     80c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     810:	8f 70       	andi	r24, 0x0F	; 15
     812:	82 83       	std	Z+2, r24	; 0x02
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	00 97       	sbiw	r24, 0x00	; 0
     818:	59 f0       	breq	.+22     	; 0x830 <__vector_18+0x244>
     81a:	eb e3       	ldi	r30, 0x3B	; 59
     81c:	f1 e0       	ldi	r31, 0x01	; 1
     81e:	85 5c       	subi	r24, 0xC5	; 197
     820:	9e 4f       	sbci	r25, 0xFE	; 254
     822:	aa ef       	ldi	r26, 0xFA	; 250
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	2c 91       	ld	r18, X
     828:	21 93       	st	Z+, r18
     82a:	e8 17       	cp	r30, r24
     82c:	f9 07       	cpc	r31, r25
     82e:	d9 f7       	brne	.-10     	; 0x826 <__vector_18+0x23a>
     830:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     834:	80 e8       	ldi	r24, 0x80	; 128
     836:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     83a:	fb 01       	movw	r30, r22
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	e4 5a       	subi	r30, 0xA4	; 164
     842:	fd 4f       	sbci	r31, 0xFD	; 253
     844:	01 90       	ld	r0, Z+
     846:	f0 81       	ld	r31, Z
     848:	e0 2d       	mov	r30, r0
     84a:	88 e3       	ldi	r24, 0x38	; 56
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	09 95       	icall
     850:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     854:	02 c0       	rjmp	.+4      	; 0x85a <__vector_18+0x26e>
     856:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     85a:	ff 91       	pop	r31
     85c:	ef 91       	pop	r30
     85e:	cf 91       	pop	r28
     860:	bf 91       	pop	r27
     862:	af 91       	pop	r26
     864:	9f 91       	pop	r25
     866:	8f 91       	pop	r24
     868:	7f 91       	pop	r23
     86a:	6f 91       	pop	r22
     86c:	5f 91       	pop	r21
     86e:	4f 91       	pop	r20
     870:	3f 91       	pop	r19
     872:	2f 91       	pop	r18
     874:	0f 90       	pop	r0
     876:	0b be       	out	0x3b, r0	; 59
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	0f 90       	pop	r0
     87e:	1f 90       	pop	r1
     880:	18 95       	reti

00000882 <can_tx_kick>:
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	c8 2f       	mov	r28, r24
     888:	e8 2f       	mov	r30, r24
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	e4 5a       	subi	r30, 0xA4	; 164
     892:	fd 4f       	sbci	r31, 0xFD	; 253
     894:	01 90       	ld	r0, Z+
     896:	f0 81       	ld	r31, Z
     898:	e0 2d       	mov	r30, r0
     89a:	68 2f       	mov	r22, r24
     89c:	8d e2       	ldi	r24, 0x2D	; 45
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	09 95       	icall
     8a2:	c2 95       	swap	r28
     8a4:	c0 7f       	andi	r28, 0xF0	; 240
     8a6:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     8aa:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <packet.2190+0x2>
     8ae:	88 23       	and	r24, r24
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <can_tx_kick+0x32>
     8b2:	5c c0       	rjmp	.+184    	; 0x96c <can_tx_kick+0xea>
     8b4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     8b8:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     8bc:	8f 3f       	cpi	r24, 0xFF	; 255
     8be:	c1 f1       	breq	.+112    	; 0x930 <can_tx_kick+0xae>
     8c0:	ed e2       	ldi	r30, 0x2D	; 45
     8c2:	f1 e0       	ldi	r31, 0x01	; 1
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	96 95       	lsr	r25
     8ca:	87 95       	ror	r24
     8cc:	96 95       	lsr	r25
     8ce:	87 95       	ror	r24
     8d0:	96 95       	lsr	r25
     8d2:	87 95       	ror	r24
     8d4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     8d8:	80 81       	ld	r24, Z
     8da:	82 95       	swap	r24
     8dc:	88 0f       	add	r24, r24
     8de:	80 7e       	andi	r24, 0xE0	; 224
     8e0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     8e4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8e8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     8ec:	82 81       	ldd	r24, Z+2	; 0x02
     8ee:	89 30       	cpi	r24, 0x09	; 9
     8f0:	19 f0       	breq	.+6      	; 0x8f8 <can_tx_kick+0x76>
     8f2:	81 11       	cpse	r24, r1
     8f4:	0d c0       	rjmp	.+26     	; 0x910 <can_tx_kick+0x8e>
     8f6:	33 c0       	rjmp	.+102    	; 0x95e <can_tx_kick+0xdc>
     8f8:	e0 e3       	ldi	r30, 0x30	; 48
     8fa:	f1 e0       	ldi	r31, 0x01	; 1
     8fc:	28 e3       	ldi	r18, 0x38	; 56
     8fe:	31 e0       	ldi	r19, 0x01	; 1
     900:	aa ef       	ldi	r26, 0xFA	; 250
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	81 91       	ld	r24, Z+
     906:	8c 93       	st	X, r24
     908:	e2 17       	cp	r30, r18
     90a:	f3 07       	cpc	r31, r19
     90c:	d9 f7       	brne	.-10     	; 0x904 <can_tx_kick+0x82>
     90e:	27 c0       	rjmp	.+78     	; 0x95e <can_tx_kick+0xdc>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	cd e2       	ldi	r28, 0x2D	; 45
     914:	d1 e0       	ldi	r29, 0x01	; 1
     916:	aa ef       	ldi	r26, 0xFA	; 250
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e8 2f       	mov	r30, r24
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	e3 5d       	subi	r30, 0xD3	; 211
     920:	fe 4f       	sbci	r31, 0xFE	; 254
     922:	93 81       	ldd	r25, Z+3	; 0x03
     924:	9c 93       	st	X, r25
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	9a 81       	ldd	r25, Y+2	; 0x02
     92a:	89 17       	cp	r24, r25
     92c:	b0 f3       	brcs	.-20     	; 0x91a <can_tx_kick+0x98>
     92e:	17 c0       	rjmp	.+46     	; 0x95e <can_tx_kick+0xdc>
     930:	ed e2       	ldi	r30, 0x2D	; 45
     932:	f1 e0       	ldi	r31, 0x01	; 1
     934:	80 81       	ld	r24, Z
     936:	91 81       	ldd	r25, Z+1	; 0x01
     938:	96 95       	lsr	r25
     93a:	87 95       	ror	r24
     93c:	96 95       	lsr	r25
     93e:	87 95       	ror	r24
     940:	96 95       	lsr	r25
     942:	87 95       	ror	r24
     944:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     948:	80 81       	ld	r24, Z
     94a:	82 95       	swap	r24
     94c:	88 0f       	add	r24, r24
     94e:	80 7e       	andi	r24, 0xE0	; 224
     950:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     954:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     958:	84 e0       	ldi	r24, 0x04	; 4
     95a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     95e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <packet.2190+0x2>
     962:	80 5c       	subi	r24, 0xC0	; 192
     964:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	01 c0       	rjmp	.+2      	; 0x96e <can_tx_kick+0xec>
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <prepare_rx>:

bool prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
     974:	8f 30       	cpi	r24, 0x0F	; 15
     976:	08 f0       	brcs	.+2      	; 0x97a <prepare_rx+0x6>
     978:	6d c0       	rjmp	.+218    	; 0xa54 <prepare_rx+0xe0>
		return true;
	canlist[ (unsigned)mob]=callback;
     97a:	e8 2f       	mov	r30, r24
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	e4 5a       	subi	r30, 0xA4	; 164
     984:	fd 4f       	sbci	r31, 0xFD	; 253
     986:	31 83       	std	Z+1, r19	; 0x01
     988:	20 83       	st	Z, r18

	CANPAGE = mob << 4;
     98a:	98 2f       	mov	r25, r24
     98c:	92 95       	swap	r25
     98e:	90 7f       	andi	r25, 0xF0	; 240
     990:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if( callback==0)      // release this MOB
     994:	23 2b       	or	r18, r19
     996:	d9 f4       	brne	.+54     	; 0x9ce <prepare_rx+0x5a>
	{
		CANSTMOB = 0x00;      // cancel pending operation
     998:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0x00;
     99c:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		unsigned mask=1<<mob;
     9a0:	21 e0       	ldi	r18, 0x01	; 1
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	a9 01       	movw	r20, r18
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <prepare_rx+0x38>
     9a8:	44 0f       	add	r20, r20
     9aa:	55 1f       	adc	r21, r21
     9ac:	8a 95       	dec	r24
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <prepare_rx+0x34>
     9b0:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
     9b2:	ee ed       	ldi	r30, 0xDE	; 222
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	20 81       	ld	r18, Z
     9b8:	80 95       	com	r24
     9ba:	82 23       	and	r24, r18
     9bc:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
     9be:	ef ed       	ldi	r30, 0xDF	; 223
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	90 95       	com	r25
     9c6:	89 23       	and	r24, r25
     9c8:	80 83       	st	Z, r24
		return false;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	08 95       	ret
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
     9ce:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     9d2:	90 7c       	andi	r25, 0xC0	; 192
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <prepare_rx+0x64>
     9d6:	40 c0       	rjmp	.+128    	; 0xa58 <prepare_rx+0xe4>
		return true;      // no vacancy ...
	CANSTMOB = 0x00;      // cancel pending operation
     9d8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     9dc:	ef ee       	ldi	r30, 0xEF	; 239
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	10 82       	st	Z, r1
	CANHPMOB = 0x00;    // enable direct mob indexing, see docu
     9e2:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANIDT1=id >>3;
     9e6:	9b 01       	movw	r18, r22
     9e8:	36 95       	lsr	r19
     9ea:	27 95       	ror	r18
     9ec:	36 95       	lsr	r19
     9ee:	27 95       	ror	r18
     9f0:	36 95       	lsr	r19
     9f2:	27 95       	ror	r18
     9f4:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2=id <<5;
     9f8:	62 95       	swap	r22
     9fa:	66 0f       	add	r22, r22
     9fc:	60 7e       	andi	r22, 0xE0	; 224
     9fe:	60 93 f2 00 	sts	0x00F2, r22	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDM1=idmask >>3;
     a02:	9a 01       	movw	r18, r20
     a04:	36 95       	lsr	r19
     a06:	27 95       	ror	r18
     a08:	36 95       	lsr	r19
     a0a:	27 95       	ror	r18
     a0c:	36 95       	lsr	r19
     a0e:	27 95       	ror	r18
     a10:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2=idmask <<5;
     a14:	42 95       	swap	r20
     a16:	44 0f       	add	r20, r20
     a18:	40 7e       	andi	r20, 0xE0	; 224
     a1a:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM3=0;
     a1e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM4=0;
     a22:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANCDMOB=0x80; // enable RX
     a26:	90 e8       	ldi	r25, 0x80	; 128
     a28:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
     a2a:	21 e0       	ldi	r18, 0x01	; 1
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	a9 01       	movw	r20, r18
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <prepare_rx+0xc2>
     a32:	44 0f       	add	r20, r20
     a34:	55 1f       	adc	r21, r21
     a36:	8a 95       	dec	r24
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <prepare_rx+0xbe>
     a3a:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
     a3c:	ee ed       	ldi	r30, 0xDE	; 222
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	20 81       	ld	r18, Z
     a42:	82 2b       	or	r24, r18
     a44:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
     a46:	ef ed       	ldi	r30, 0xDF	; 223
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	89 2b       	or	r24, r25
     a4e:	80 83       	st	Z, r24
	return false;
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 95       	ret
}

bool prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
		return true;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return false;
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
		return true;      // no vacancy ...
     a58:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return false;
}
     a5a:	08 95       	ret

00000a5c <prepare_tx>:

bool prepare_tx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
     a5c:	8f 30       	cpi	r24, 0x0F	; 15
     a5e:	08 f0       	brcs	.+2      	; 0xa62 <prepare_tx+0x6>
     a60:	49 c0       	rjmp	.+146    	; 0xaf4 <prepare_tx+0x98>
		return true;
	canlist[ (unsigned)mob]=callback;
     a62:	e8 2f       	mov	r30, r24
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	e4 5a       	subi	r30, 0xA4	; 164
     a6c:	fd 4f       	sbci	r31, 0xFD	; 253
     a6e:	31 83       	std	Z+1, r19	; 0x01
     a70:	20 83       	st	Z, r18

	CANPAGE = mob << 4;
     a72:	98 2f       	mov	r25, r24
     a74:	92 95       	swap	r25
     a76:	90 7f       	andi	r25, 0xF0	; 240
     a78:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if( callback==0)      // release this MOB
     a7c:	23 2b       	or	r18, r19
     a7e:	d9 f4       	brne	.+54     	; 0xab6 <prepare_tx+0x5a>
	{
		CANSTMOB = 0x00;      // cancel pending operation
     a80:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0x00;
     a84:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		unsigned mask=1<<mob;
     a88:	21 e0       	ldi	r18, 0x01	; 1
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	a9 01       	movw	r20, r18
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <prepare_tx+0x38>
     a90:	44 0f       	add	r20, r20
     a92:	55 1f       	adc	r21, r21
     a94:	8a 95       	dec	r24
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <prepare_tx+0x34>
     a98:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
     a9a:	ee ed       	ldi	r30, 0xDE	; 222
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	20 81       	ld	r18, Z
     aa0:	80 95       	com	r24
     aa2:	82 23       	and	r24, r18
     aa4:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
     aa6:	ef ed       	ldi	r30, 0xDF	; 223
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	90 95       	com	r25
     aae:	89 23       	and	r24, r25
     ab0:	80 83       	st	Z, r24
		return false;
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	08 95       	ret
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
     ab6:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     aba:	90 7c       	andi	r25, 0xC0	; 192
     abc:	e9 f4       	brne	.+58     	; 0xaf8 <prepare_tx+0x9c>
		return false;     // no vacancy ...
	CANSTMOB = 0x00;      // cancel pending operation
     abe:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     ac2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANHPMOB = 0x00;    // enable direct mob indexing, see docu
     ac6:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	//CANIDT1=id >>3;
	//CANIDT2=id <<5;
	//CANCDMOB=0x40; // enable TX
	unsigned mask=1<<mob;
     aca:	21 e0       	ldi	r18, 0x01	; 1
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	a9 01       	movw	r20, r18
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <prepare_tx+0x7a>
     ad2:	44 0f       	add	r20, r20
     ad4:	55 1f       	adc	r21, r21
     ad6:	8a 95       	dec	r24
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <prepare_tx+0x76>
     ada:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
     adc:	ee ed       	ldi	r30, 0xDE	; 222
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	20 81       	ld	r18, Z
     ae2:	82 2b       	or	r24, r18
     ae4:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
     ae6:	ef ed       	ldi	r30, 0xDF	; 223
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	89 2b       	or	r24, r25
     aee:	80 83       	st	Z, r24
	return true;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	08 95       	ret
}

bool prepare_tx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
		return true;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return false;
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
		return false;     // no vacancy ...
     af8:	80 e0       	ldi	r24, 0x00	; 0
	//CANCDMOB=0x40; // enable TX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return true;
}
     afa:	08 95       	ret

00000afc <can_init>:

void can_init( void)
{
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
	unsigned mob;
#ifdef BAUD_500K
	CANBT1=0x02;  // 16 MHz, 500kbit/s
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2=0x0C;
     b06:	8c e0       	ldi	r24, 0x0C	; 12
     b08:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3=0x37;
     b0c:	87 e3       	ldi	r24, 0x37	; 55
     b0e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     b12:	80 e0       	ldi	r24, 0x00	; 0
	CANBT3=0x36;
#endif

	for (mob = 0; mob < NO_MOBS; mob++)
	{
		CANPAGE  = (mob << 4);
     b14:	cd ee       	ldi	r28, 0xED	; 237
     b16:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
     b18:	ae ee       	ldi	r26, 0xEE	; 238
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
     b1c:	ef ee       	ldi	r30, 0xEF	; 239
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT3=0x36;
#endif

	for (mob = 0; mob < NO_MOBS; mob++)
	{
		CANPAGE  = (mob << 4);
     b20:	98 2f       	mov	r25, r24
     b22:	92 95       	swap	r25
     b24:	90 7f       	andi	r25, 0xF0	; 240
     b26:	98 83       	st	Y, r25
		CANSTMOB = 0;
     b28:	1c 92       	st	X, r1
		CANCDMOB = 0;
     b2a:	10 82       	st	Z, r1
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
	CANBT1=0x00;  // 16 MHz, 1000kbit/s
	CANBT2=0x0C;
	CANBT3=0x36;
#endif

	for (mob = 0; mob < NO_MOBS; mob++)
     b2e:	8f 30       	cpi	r24, 0x0F	; 15
     b30:	b9 f7       	brne	.-18     	; 0xb20 <can_init+0x24>
	{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
	}
	CANGCON |= 0x02;
     b32:	e8 ed       	ldi	r30, 0xD8	; 216
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	82 60       	ori	r24, 0x02	; 2
     b3a:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX) | (1<< ENTX);
     b3c:	80 eb       	ldi	r24, 0xB0	; 176
     b3e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <setCANFTdata>:
void Send_buffer_flush(struct ringBufSCAN* _this, const int clearBuffer) {
	_this->count = 0;
	_this->head = 0;
	_this->tail = 0;
	if (clearBuffer) {
		memset(_this->buf, 0, sizeof (_this->buf));
     b48:	44 23       	and	r20, r20
     b4a:	79 f0       	breq	.+30     	; 0xb6a <setCANFTdata+0x22>
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	fc 01       	movw	r30, r24
     b52:	ed 55       	subi	r30, 0x5D	; 93
     b54:	fb 4f       	sbci	r31, 0xFB	; 251
     b56:	71 83       	std	Z+1, r23	; 0x01
     b58:	60 83       	st	Z, r22
     b5a:	fc 01       	movw	r30, r24
     b5c:	ed 50       	subi	r30, 0x0D	; 13
     b5e:	fa 4f       	sbci	r31, 0xFA	; 250
     b60:	21 e0       	ldi	r18, 0x01	; 1
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	31 83       	std	Z+1, r19	; 0x01
     b66:	20 83       	st	Z, r18
     b68:	08 95       	ret
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <receiveArrayAddressCAN>
     b72:	f0 91 a2 04 	lds	r31, 0x04A2	; 0x8004a2 <receiveArrayAddressCAN+0x1>
     b76:	e8 0f       	add	r30, r24
     b78:	f9 1f       	adc	r31, r25
     b7a:	71 83       	std	Z+1, r23	; 0x01
     b7c:	60 83       	st	Z, r22
     b7e:	fc 01       	movw	r30, r24
     b80:	e3 52       	subi	r30, 0x23	; 35
     b82:	fa 4f       	sbci	r31, 0xFA	; 250
     b84:	21 e0       	ldi	r18, 0x01	; 1
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	31 83       	std	Z+1, r19	; 0x01
     b8a:	20 83       	st	Z, r18
     b8c:	08 95       	ret

00000b8e <getCANFTdatas>:
     b8e:	66 23       	and	r22, r22
     b90:	41 f0       	breq	.+16     	; 0xba2 <getCANFTdatas+0x14>
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	fc 01       	movw	r30, r24
     b98:	ed 55       	subi	r30, 0x5D	; 93
     b9a:	fb 4f       	sbci	r31, 0xFB	; 251
     b9c:	80 81       	ld	r24, Z
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	08 95       	ret
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <receiveArrayAddressCAN>
     baa:	f0 91 a2 04 	lds	r31, 0x04A2	; 0x8004a2 <receiveArrayAddressCAN+0x1>
     bae:	e8 0f       	add	r30, r24
     bb0:	f9 1f       	adc	r31, r25
     bb2:	80 81       	ld	r24, Z
     bb4:	91 81       	ldd	r25, Z+1	; 0x01
     bb6:	08 95       	ret

00000bb8 <getCANFT_Flag>:
     bb8:	fb 01       	movw	r30, r22
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	e8 0f       	add	r30, r24
     bc0:	f9 1f       	adc	r31, r25
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	89 2b       	or	r24, r25
     bc8:	21 f0       	breq	.+8      	; 0xbd2 <getCANFT_Flag+0x1a>
     bca:	11 82       	std	Z+1, r1	; 0x01
     bcc:	10 82       	st	Z, r1
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	08 95       	ret
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	08 95       	ret

00000bd6 <Send_buffer_put>:
     bd6:	fc 01       	movw	r30, r24
     bd8:	ec 5a       	subi	r30, 0xAC	; 172
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	20 81       	ld	r18, Z
     bde:	31 81       	ldd	r19, Z+1	; 0x01
     be0:	25 32       	cpi	r18, 0x25	; 37
     be2:	31 05       	cpc	r19, r1
     be4:	8c f5       	brge	.+98     	; 0xc48 <Send_buffer_put+0x72>
     be6:	34 97       	sbiw	r30, 0x04	; 4
     be8:	01 90       	ld	r0, Z+
     bea:	f0 81       	ld	r31, Z
     bec:	e0 2d       	mov	r30, r0
     bee:	df 01       	movw	r26, r30
     bf0:	aa 0f       	add	r26, r26
     bf2:	bb 1f       	adc	r27, r27
     bf4:	a8 0f       	add	r26, r24
     bf6:	b9 1f       	adc	r27, r25
     bf8:	6d 93       	st	X+, r22
     bfa:	7c 93       	st	X, r23
     bfc:	bf 01       	movw	r22, r30
     bfe:	6f 5f       	subi	r22, 0xFF	; 255
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	68 32       	cpi	r22, 0x28	; 40
     c04:	71 05       	cpc	r23, r1
     c06:	d0 f4       	brcc	.+52     	; 0xc3c <Send_buffer_put+0x66>
     c08:	66 0f       	add	r22, r22
     c0a:	77 1f       	adc	r23, r23
     c0c:	dc 01       	movw	r26, r24
     c0e:	a6 0f       	add	r26, r22
     c10:	b7 1f       	adc	r27, r23
     c12:	4d 93       	st	X+, r20
     c14:	5c 93       	st	X, r21
     c16:	32 96       	adiw	r30, 0x02	; 2
     c18:	e8 32       	cpi	r30, 0x28	; 40
     c1a:	f1 05       	cpc	r31, r1
     c1c:	10 f0       	brcs	.+4      	; 0xc22 <Send_buffer_put+0x4c>
     c1e:	e0 e0       	ldi	r30, 0x00	; 0
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	dc 01       	movw	r26, r24
     c24:	a0 5b       	subi	r26, 0xB0	; 176
     c26:	bf 4f       	sbci	r27, 0xFF	; 255
     c28:	ed 93       	st	X+, r30
     c2a:	fc 93       	st	X, r31
     c2c:	fc 01       	movw	r30, r24
     c2e:	ec 5a       	subi	r30, 0xAC	; 172
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	2e 5f       	subi	r18, 0xFE	; 254
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	31 83       	std	Z+1, r19	; 0x01
     c38:	20 83       	st	Z, r18
     c3a:	08 95       	ret
     c3c:	fc 01       	movw	r30, r24
     c3e:	51 83       	std	Z+1, r21	; 0x01
     c40:	40 83       	st	Z, r20
     c42:	e1 e0       	ldi	r30, 0x01	; 1
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ed cf       	rjmp	.-38     	; 0xc22 <Send_buffer_put+0x4c>
     c48:	08 95       	ret

00000c4a <ReceiveCANFast>:
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
     c52:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <receiveMode>
     c56:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <receiveMode+0x1>
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	09 f0       	breq	.+2      	; 0xc60 <ReceiveCANFast+0x16>
     c5e:	73 c0       	rjmp	.+230    	; 0xd46 <ReceiveCANFast+0xfc>
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	88 50       	subi	r24, 0x08	; 8
     c64:	82 30       	cpi	r24, 0x02	; 2
     c66:	08 f0       	brcs	.+2      	; 0xc6a <ReceiveCANFast+0x20>
     c68:	46 c0       	rjmp	.+140    	; 0xcf6 <ReceiveCANFast+0xac>
     c6a:	6b 81       	ldd	r22, Y+3	; 0x03
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	76 2f       	mov	r23, r22
     c70:	66 27       	eor	r22, r22
     c72:	8c 81       	ldd	r24, Y+4	; 0x04
     c74:	68 0f       	add	r22, r24
     c76:	71 1d       	adc	r23, r1
     c78:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <MaxIndex>
     c7c:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <MaxIndex+0x1>
     c80:	68 17       	cp	r22, r24
     c82:	79 07       	cpc	r23, r25
     c84:	80 f4       	brcc	.+32     	; 0xca6 <ReceiveCANFast+0x5c>
     c86:	4d 81       	ldd	r20, Y+5	; 0x05
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	54 2f       	mov	r21, r20
     c8c:	44 27       	eor	r20, r20
     c8e:	8e 81       	ldd	r24, Y+6	; 0x06
     c90:	48 0f       	add	r20, r24
     c92:	51 1d       	adc	r21, r1
     c94:	87 e8       	ldi	r24, 0x87	; 135
     c96:	95 e0       	ldi	r25, 0x05	; 5
     c98:	9e df       	rcall	.-196    	; 0xbd6 <Send_buffer_put>
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ReceivedData+0x1>
     ca2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ReceivedData>
     ca6:	6f 81       	ldd	r22, Y+7	; 0x07
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	76 2f       	mov	r23, r22
     cac:	66 27       	eor	r22, r22
     cae:	88 85       	ldd	r24, Y+8	; 0x08
     cb0:	68 0f       	add	r22, r24
     cb2:	71 1d       	adc	r23, r1
     cb4:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <MaxIndex>
     cb8:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <MaxIndex+0x1>
     cbc:	68 17       	cp	r22, r24
     cbe:	79 07       	cpc	r23, r25
     cc0:	80 f4       	brcc	.+32     	; 0xce2 <ReceiveCANFast+0x98>
     cc2:	49 85       	ldd	r20, Y+9	; 0x09
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	54 2f       	mov	r21, r20
     cc8:	44 27       	eor	r20, r20
     cca:	8a 85       	ldd	r24, Y+10	; 0x0a
     ccc:	48 0f       	add	r20, r24
     cce:	51 1d       	adc	r21, r1
     cd0:	87 e8       	ldi	r24, 0x87	; 135
     cd2:	95 e0       	ldi	r25, 0x05	; 5
     cd4:	80 df       	rcall	.-256    	; 0xbd6 <Send_buffer_put>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ReceivedData+0x1>
     cde:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ReceivedData>
     ce2:	48 81       	ld	r20, Y
     ce4:	59 81       	ldd	r21, Y+1	; 0x01
     ce6:	4f 71       	andi	r20, 0x1F	; 31
     ce8:	55 27       	eor	r21, r21
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	87 e8       	ldi	r24, 0x87	; 135
     cf0:	95 e0       	ldi	r25, 0x05	; 5
     cf2:	71 df       	rcall	.-286    	; 0xbd6 <Send_buffer_put>
     cf4:	98 c0       	rjmp	.+304    	; 0xe26 <ReceiveCANFast+0x1dc>
     cf6:	6b 81       	ldd	r22, Y+3	; 0x03
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	76 2f       	mov	r23, r22
     cfc:	66 27       	eor	r22, r22
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	68 0f       	add	r22, r24
     d02:	71 1d       	adc	r23, r1
     d04:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <MaxIndex>
     d08:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <MaxIndex+0x1>
     d0c:	68 17       	cp	r22, r24
     d0e:	79 07       	cpc	r23, r25
     d10:	80 f4       	brcc	.+32     	; 0xd32 <ReceiveCANFast+0xe8>
     d12:	4d 81       	ldd	r20, Y+5	; 0x05
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	54 2f       	mov	r21, r20
     d18:	44 27       	eor	r20, r20
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	48 0f       	add	r20, r24
     d1e:	51 1d       	adc	r21, r1
     d20:	87 e8       	ldi	r24, 0x87	; 135
     d22:	95 e0       	ldi	r25, 0x05	; 5
     d24:	58 df       	rcall	.-336    	; 0xbd6 <Send_buffer_put>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ReceivedData+0x1>
     d2e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ReceivedData>
     d32:	48 81       	ld	r20, Y
     d34:	59 81       	ldd	r21, Y+1	; 0x01
     d36:	4f 71       	andi	r20, 0x1F	; 31
     d38:	55 27       	eor	r21, r21
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	87 e8       	ldi	r24, 0x87	; 135
     d40:	95 e0       	ldi	r25, 0x05	; 5
     d42:	49 df       	rcall	.-366    	; 0xbd6 <Send_buffer_put>
     d44:	70 c0       	rjmp	.+224    	; 0xe26 <ReceiveCANFast+0x1dc>
     d46:	68 81       	ld	r22, Y
     d48:	79 81       	ldd	r23, Y+1	; 0x01
     d4a:	cb 01       	movw	r24, r22
     d4c:	00 24       	eor	r0, r0
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	00 1c       	adc	r0, r0
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	00 1c       	adc	r0, r0
     d5a:	89 2f       	mov	r24, r25
     d5c:	90 2d       	mov	r25, r0
     d5e:	18 2f       	mov	r17, r24
     d60:	11 70       	andi	r17, 0x01	; 1
     d62:	6f 71       	andi	r22, 0x1F	; 31
     d64:	77 27       	eor	r23, r23
     d66:	41 2f       	mov	r20, r17
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	ed de       	rcall	.-550    	; 0xb48 <setCANFTdata>
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	88 50       	subi	r24, 0x08	; 8
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	d8 f5       	brcc	.+118    	; 0xdec <ReceiveCANFast+0x1a2>
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	98 2f       	mov	r25, r24
     d7c:	88 27       	eor	r24, r24
     d7e:	2c 81       	ldd	r18, Y+4	; 0x04
     d80:	82 0f       	add	r24, r18
     d82:	91 1d       	adc	r25, r1
     d84:	20 91 f1 05 	lds	r18, 0x05F1	; 0x8005f1 <MaxIndex>
     d88:	30 91 f2 05 	lds	r19, 0x05F2	; 0x8005f2 <MaxIndex+0x1>
     d8c:	82 17       	cp	r24, r18
     d8e:	93 07       	cpc	r25, r19
     d90:	78 f4       	brcc	.+30     	; 0xdb0 <ReceiveCANFast+0x166>
     d92:	6d 81       	ldd	r22, Y+5	; 0x05
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	76 2f       	mov	r23, r22
     d98:	66 27       	eor	r22, r22
     d9a:	2e 81       	ldd	r18, Y+6	; 0x06
     d9c:	62 0f       	add	r22, r18
     d9e:	71 1d       	adc	r23, r1
     da0:	41 2f       	mov	r20, r17
     da2:	d2 de       	rcall	.-604    	; 0xb48 <setCANFTdata>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ReceivedData+0x1>
     dac:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ReceivedData>
     db0:	8f 81       	ldd	r24, Y+7	; 0x07
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	98 2f       	mov	r25, r24
     db6:	88 27       	eor	r24, r24
     db8:	28 85       	ldd	r18, Y+8	; 0x08
     dba:	82 0f       	add	r24, r18
     dbc:	91 1d       	adc	r25, r1
     dbe:	20 91 f1 05 	lds	r18, 0x05F1	; 0x8005f1 <MaxIndex>
     dc2:	30 91 f2 05 	lds	r19, 0x05F2	; 0x8005f2 <MaxIndex+0x1>
     dc6:	82 17       	cp	r24, r18
     dc8:	93 07       	cpc	r25, r19
     dca:	68 f5       	brcc	.+90     	; 0xe26 <ReceiveCANFast+0x1dc>
     dcc:	69 85       	ldd	r22, Y+9	; 0x09
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	76 2f       	mov	r23, r22
     dd2:	66 27       	eor	r22, r22
     dd4:	2a 85       	ldd	r18, Y+10	; 0x0a
     dd6:	62 0f       	add	r22, r18
     dd8:	71 1d       	adc	r23, r1
     dda:	41 2f       	mov	r20, r17
     ddc:	b5 de       	rcall	.-662    	; 0xb48 <setCANFTdata>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ReceivedData+0x1>
     de6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ReceivedData>
     dea:	1d c0       	rjmp	.+58     	; 0xe26 <ReceiveCANFast+0x1dc>
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	98 2f       	mov	r25, r24
     df2:	88 27       	eor	r24, r24
     df4:	2c 81       	ldd	r18, Y+4	; 0x04
     df6:	82 0f       	add	r24, r18
     df8:	91 1d       	adc	r25, r1
     dfa:	20 91 f1 05 	lds	r18, 0x05F1	; 0x8005f1 <MaxIndex>
     dfe:	30 91 f2 05 	lds	r19, 0x05F2	; 0x8005f2 <MaxIndex+0x1>
     e02:	82 17       	cp	r24, r18
     e04:	93 07       	cpc	r25, r19
     e06:	78 f4       	brcc	.+30     	; 0xe26 <ReceiveCANFast+0x1dc>
     e08:	6d 81       	ldd	r22, Y+5	; 0x05
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	76 2f       	mov	r23, r22
     e0e:	66 27       	eor	r22, r22
     e10:	2e 81       	ldd	r18, Y+6	; 0x06
     e12:	62 0f       	add	r22, r18
     e14:	71 1d       	adc	r23, r1
     e16:	41 2f       	mov	r20, r17
     e18:	97 de       	rcall	.-722    	; 0xb48 <setCANFTdata>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ReceivedData+0x1>
     e22:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ReceivedData>
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ToSendCAN>:
     e2e:	ab 01       	movw	r20, r22
     e30:	bc 01       	movw	r22, r24
     e32:	8b e4       	ldi	r24, 0x4B	; 75
     e34:	94 e0       	ldi	r25, 0x04	; 4
     e36:	cf ce       	rjmp	.-610    	; 0xbd6 <Send_buffer_put>
     e38:	08 95       	ret

00000e3a <Transmit_buffer_put>:
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	fc 01       	movw	r30, r24
     e44:	e8 54       	subi	r30, 0x48	; 72
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	01 90       	ld	r0, Z+
     e4a:	f0 81       	ld	r31, Z
     e4c:	e0 2d       	mov	r30, r0
     e4e:	e7 35       	cpi	r30, 0x57	; 87
     e50:	f1 05       	cpc	r31, r1
     e52:	0c f0       	brlt	.+2      	; 0xe56 <Transmit_buffer_put+0x1c>
     e54:	55 c0       	rjmp	.+170    	; 0xf00 <Transmit_buffer_put+0xc6>
     e56:	dc 01       	movw	r26, r24
     e58:	ac 54       	subi	r26, 0x4C	; 76
     e5a:	bf 4f       	sbci	r27, 0xFF	; 255
     e5c:	0d 90       	ld	r0, X+
     e5e:	bc 91       	ld	r27, X
     e60:	a0 2d       	mov	r26, r0
     e62:	ed 01       	movw	r28, r26
     e64:	cc 0f       	add	r28, r28
     e66:	dd 1f       	adc	r29, r29
     e68:	c8 0f       	add	r28, r24
     e6a:	d9 1f       	adc	r29, r25
     e6c:	79 83       	std	Y+1, r23	; 0x01
     e6e:	68 83       	st	Y, r22
     e70:	bd 01       	movw	r22, r26
     e72:	6f 5f       	subi	r22, 0xFF	; 255
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	6a 35       	cpi	r22, 0x5A	; 90
     e78:	71 05       	cpc	r23, r1
     e7a:	88 f5       	brcc	.+98     	; 0xede <Transmit_buffer_put+0xa4>
     e7c:	ec 01       	movw	r28, r24
     e7e:	cc 54       	subi	r28, 0x4C	; 76
     e80:	df 4f       	sbci	r29, 0xFF	; 255
     e82:	79 83       	std	Y+1, r23	; 0x01
     e84:	68 83       	st	Y, r22
     e86:	24 96       	adiw	r28, 0x04	; 4
     e88:	8f 01       	movw	r16, r30
     e8a:	0f 5f       	subi	r16, 0xFF	; 255
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	19 83       	std	Y+1, r17	; 0x01
     e90:	08 83       	st	Y, r16
     e92:	66 0f       	add	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	ec 01       	movw	r28, r24
     e98:	c6 0f       	add	r28, r22
     e9a:	d7 1f       	adc	r29, r23
     e9c:	59 83       	std	Y+1, r21	; 0x01
     e9e:	48 83       	st	Y, r20
     ea0:	ad 01       	movw	r20, r26
     ea2:	4e 5f       	subi	r20, 0xFE	; 254
     ea4:	5f 4f       	sbci	r21, 0xFF	; 255
     ea6:	4a 35       	cpi	r20, 0x5A	; 90
     ea8:	51 05       	cpc	r21, r1
     eaa:	20 f5       	brcc	.+72     	; 0xef4 <Transmit_buffer_put+0xba>
     eac:	44 0f       	add	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	ec 01       	movw	r28, r24
     eb2:	c4 0f       	add	r28, r20
     eb4:	d5 1f       	adc	r29, r21
     eb6:	39 83       	std	Y+1, r19	; 0x01
     eb8:	28 83       	st	Y, r18
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	aa 35       	cpi	r26, 0x5A	; 90
     ebe:	b1 05       	cpc	r27, r1
     ec0:	10 f0       	brcs	.+4      	; 0xec6 <Transmit_buffer_put+0x8c>
     ec2:	a0 e0       	ldi	r26, 0x00	; 0
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ec 01       	movw	r28, r24
     ec8:	cc 54       	subi	r28, 0x4C	; 76
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	b9 83       	std	Y+1, r27	; 0x01
     ece:	a8 83       	st	Y, r26
     ed0:	dc 01       	movw	r26, r24
     ed2:	a8 54       	subi	r26, 0x48	; 72
     ed4:	bf 4f       	sbci	r27, 0xFF	; 255
     ed6:	33 96       	adiw	r30, 0x03	; 3
     ed8:	ed 93       	st	X+, r30
     eda:	fc 93       	st	X, r31
     edc:	11 c0       	rjmp	.+34     	; 0xf00 <Transmit_buffer_put+0xc6>
     ede:	dc 01       	movw	r26, r24
     ee0:	11 96       	adiw	r26, 0x01	; 1
     ee2:	5c 93       	st	X, r21
     ee4:	4e 93       	st	-X, r20
     ee6:	13 96       	adiw	r26, 0x03	; 3
     ee8:	3c 93       	st	X, r19
     eea:	2e 93       	st	-X, r18
     eec:	12 97       	sbiw	r26, 0x02	; 2
     eee:	a2 e0       	ldi	r26, 0x02	; 2
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e9 cf       	rjmp	.-46     	; 0xec6 <Transmit_buffer_put+0x8c>
     ef4:	dc 01       	movw	r26, r24
     ef6:	2d 93       	st	X+, r18
     ef8:	3c 93       	st	X, r19
     efa:	a1 e0       	ldi	r26, 0x01	; 1
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e3 cf       	rjmp	.-58     	; 0xec6 <Transmit_buffer_put+0x8c>
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <Send_buffer_get>:
     f0a:	fc 01       	movw	r30, r24
     f0c:	ec 5a       	subi	r30, 0xAC	; 172
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	40 81       	ld	r20, Z
     f12:	51 81       	ldd	r21, Z+1	; 0x01
     f14:	14 16       	cp	r1, r20
     f16:	15 06       	cpc	r1, r21
     f18:	e4 f4       	brge	.+56     	; 0xf52 <Send_buffer_get+0x48>
     f1a:	32 97       	sbiw	r30, 0x02	; 2
     f1c:	20 81       	ld	r18, Z
     f1e:	31 81       	ldd	r19, Z+1	; 0x01
     f20:	f9 01       	movw	r30, r18
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	e8 0f       	add	r30, r24
     f28:	f9 1f       	adc	r31, r25
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	2f 5f       	subi	r18, 0xFF	; 255
     f30:	3f 4f       	sbci	r19, 0xFF	; 255
     f32:	28 32       	cpi	r18, 0x28	; 40
     f34:	31 05       	cpc	r19, r1
     f36:	10 f0       	brcs	.+4      	; 0xf3c <Send_buffer_get+0x32>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	fc 01       	movw	r30, r24
     f3e:	ee 5a       	subi	r30, 0xAE	; 174
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	31 83       	std	Z+1, r19	; 0x01
     f44:	20 83       	st	Z, r18
     f46:	32 96       	adiw	r30, 0x02	; 2
     f48:	41 50       	subi	r20, 0x01	; 1
     f4a:	51 09       	sbc	r21, r1
     f4c:	51 83       	std	Z+1, r21	; 0x01
     f4e:	40 83       	st	Z, r20
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <Send_buffer_get+0x4c>
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	cb 01       	movw	r24, r22
     f58:	08 95       	ret

00000f5a <sendDataCAN>:
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	6c 01       	movw	r12, r24
     f70:	a0 90 32 03 	lds	r10, 0x0332	; 0x800332 <TransmitBuffer+0xb8>
     f74:	b0 90 33 03 	lds	r11, 0x0333	; 0x800333 <TransmitBuffer+0xb9>
     f78:	e0 90 9f 04 	lds	r14, 0x049F	; 0x80049f <ring_buffer_CAN+0x54>
     f7c:	f0 90 a0 04 	lds	r15, 0x04A0	; 0x8004a0 <ring_buffer_CAN+0x55>
     f80:	f5 94       	asr	r15
     f82:	e7 94       	ror	r14
     f84:	1e 14       	cp	r1, r14
     f86:	1f 04       	cpc	r1, r15
     f88:	9c f4       	brge	.+38     	; 0xfb0 <sendDataCAN+0x56>
     f8a:	c0 e0       	ldi	r28, 0x00	; 0
     f8c:	d0 e0       	ldi	r29, 0x00	; 0
     f8e:	8b e4       	ldi	r24, 0x4B	; 75
     f90:	94 e0       	ldi	r25, 0x04	; 4
     f92:	bb df       	rcall	.-138    	; 0xf0a <Send_buffer_get>
     f94:	8c 01       	movw	r16, r24
     f96:	8b e4       	ldi	r24, 0x4B	; 75
     f98:	94 e0       	ldi	r25, 0x04	; 4
     f9a:	b7 df       	rcall	.-146    	; 0xf0a <Send_buffer_get>
     f9c:	9c 01       	movw	r18, r24
     f9e:	a8 01       	movw	r20, r16
     fa0:	b6 01       	movw	r22, r12
     fa2:	8a e7       	ldi	r24, 0x7A	; 122
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	49 df       	rcall	.-366    	; 0xe3a <Transmit_buffer_put>
     fa8:	21 96       	adiw	r28, 0x01	; 1
     faa:	ec 16       	cp	r14, r28
     fac:	fd 06       	cpc	r15, r29
     fae:	79 f7       	brne	.-34     	; 0xf8e <sendDataCAN+0x34>
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	a8 16       	cp	r10, r24
     fb4:	b1 04       	cpc	r11, r1
     fb6:	10 f4       	brcc	.+4      	; 0xfbc <sendDataCAN+0x62>
     fb8:	8d e0       	ldi	r24, 0x0D	; 13
     fba:	63 dc       	rcall	.-1850   	; 0x882 <can_tx_kick>
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	bf 90       	pop	r11
     fce:	af 90       	pop	r10
     fd0:	08 95       	ret

00000fd2 <Transmit_buffer_get>:
     fd2:	fc 01       	movw	r30, r24
     fd4:	e8 54       	subi	r30, 0x48	; 72
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	40 81       	ld	r20, Z
     fda:	51 81       	ldd	r21, Z+1	; 0x01
     fdc:	14 16       	cp	r1, r20
     fde:	15 06       	cpc	r1, r21
     fe0:	e4 f4       	brge	.+56     	; 0x101a <Transmit_buffer_get+0x48>
     fe2:	32 97       	sbiw	r30, 0x02	; 2
     fe4:	20 81       	ld	r18, Z
     fe6:	31 81       	ldd	r19, Z+1	; 0x01
     fe8:	f9 01       	movw	r30, r18
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	e8 0f       	add	r30, r24
     ff0:	f9 1f       	adc	r31, r25
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	2f 5f       	subi	r18, 0xFF	; 255
     ff8:	3f 4f       	sbci	r19, 0xFF	; 255
     ffa:	2a 35       	cpi	r18, 0x5A	; 90
     ffc:	31 05       	cpc	r19, r1
     ffe:	10 f0       	brcs	.+4      	; 0x1004 <Transmit_buffer_get+0x32>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	fc 01       	movw	r30, r24
    1006:	ea 54       	subi	r30, 0x4A	; 74
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	31 83       	std	Z+1, r19	; 0x01
    100c:	20 83       	st	Z, r18
    100e:	32 96       	adiw	r30, 0x02	; 2
    1010:	41 50       	subi	r20, 0x01	; 1
    1012:	51 09       	sbc	r21, r1
    1014:	51 83       	std	Z+1, r21	; 0x01
    1016:	40 83       	st	Z, r20
    1018:	02 c0       	rjmp	.+4      	; 0x101e <Transmit_buffer_get+0x4c>
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	cb 01       	movw	r24, r22
    1020:	08 95       	ret

00001022 <Transmit_buffer_peek>:
    1022:	fc 01       	movw	r30, r24
    1024:	e8 54       	subi	r30, 0x48	; 72
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	20 81       	ld	r18, Z
    102a:	31 81       	ldd	r19, Z+1	; 0x01
    102c:	12 16       	cp	r1, r18
    102e:	13 06       	cpc	r1, r19
    1030:	5c f4       	brge	.+22     	; 0x1048 <Transmit_buffer_peek+0x26>
    1032:	32 97       	sbiw	r30, 0x02	; 2
    1034:	01 90       	ld	r0, Z+
    1036:	f0 81       	ld	r31, Z
    1038:	e0 2d       	mov	r30, r0
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	e8 0f       	add	r30, r24
    1040:	f9 1f       	adc	r31, r25
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	08 95       	ret
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	08 95       	ret

0000104e <Transmit_buffer_flush>:
	}
}

void Transmit_buffer_flush(struct ringBufTRANSMIT* _this, const int clearBuffer) {
	_this->count = 0;
    104e:	fc 01       	movw	r30, r24
    1050:	e8 54       	subi	r30, 0x48	; 72
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	11 82       	std	Z+1, r1	; 0x01
    1056:	10 82       	st	Z, r1
	_this->head = 0;
    1058:	34 97       	sbiw	r30, 0x04	; 4
    105a:	11 82       	std	Z+1, r1	; 0x01
    105c:	10 82       	st	Z, r1
	_this->tail = 0;
    105e:	32 96       	adiw	r30, 0x02	; 2
    1060:	11 82       	std	Z+1, r1	; 0x01
    1062:	10 82       	st	Z, r1
	if (clearBuffer) {
    1064:	67 2b       	or	r22, r23
    1066:	29 f0       	breq	.+10     	; 0x1072 <Transmit_buffer_flush+0x24>
		memset(_this->buf, 0, sizeof (_this->buf));
    1068:	24 eb       	ldi	r18, 0xB4	; 180
    106a:	fc 01       	movw	r30, r24
    106c:	11 92       	st	Z+, r1
    106e:	2a 95       	dec	r18
    1070:	e9 f7       	brne	.-6      	; 0x106c <Transmit_buffer_flush+0x1e>
    1072:	08 95       	ret

00001074 <beginCANFast>:
	}
}



void beginCANFast(volatile int * ptr, unsigned int maxSize, unsigned char givenAddress) {
    1074:	cf 93       	push	r28
	receiveArrayAddressCAN = ptr;
    1076:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <receiveArrayAddressCAN+0x1>
    107a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <receiveArrayAddressCAN>
	moduleAddressCAN = givenAddress;
    107e:	40 93 4a 04 	sts	0x044A, r20	; 0x80044a <moduleAddressCAN>
	MaxIndex = maxSize;
    1082:	70 93 f2 05 	sts	0x05F2, r23	; 0x8005f2 <MaxIndex+0x1>
    1086:	60 93 f1 05 	sts	0x05F1, r22	; 0x8005f1 <MaxIndex>

	bool ret;
	ret=prepare_rx( CANFAST_MOB, moduleAddressCAN<<6, 0b11111100000, ReceiveCANFast); // all 1s forces comparison
    108a:	80 e4       	ldi	r24, 0x40	; 64
    108c:	48 9f       	mul	r20, r24
    108e:	b0 01       	movw	r22, r0
    1090:	11 24       	eor	r1, r1
    1092:	25 e2       	ldi	r18, 0x25	; 37
    1094:	36 e0       	ldi	r19, 0x06	; 6
    1096:	40 ee       	ldi	r20, 0xE0	; 224
    1098:	57 e0       	ldi	r21, 0x07	; 7
    109a:	85 e0       	ldi	r24, 0x05	; 5
    109c:	6b dc       	rcall	.-1834   	; 0x974 <prepare_rx>
    109e:	c8 2f       	mov	r28, r24
	ret+=prepare_rx(CONTROL_MOB,GLOBAL_CAN_ADDRESS<<6, 0b11111100000,ReceiveCANFast); // Initialization the Receiver for the Global Bus
    10a0:	25 e2       	ldi	r18, 0x25	; 37
    10a2:	36 e0       	ldi	r19, 0x06	; 6
    10a4:	40 ee       	ldi	r20, 0xE0	; 224
    10a6:	57 e0       	ldi	r21, 0x07	; 7
    10a8:	60 ec       	ldi	r22, 0xC0	; 192
    10aa:	77 e0       	ldi	r23, 0x07	; 7
    10ac:	86 e0       	ldi	r24, 0x06	; 6
    10ae:	62 dc       	rcall	.-1852   	; 0x974 <prepare_rx>
	ASSERT( ret==0);
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	8c 0f       	add	r24, r28
    10b4:	91 1d       	adc	r25, r1
    10b6:	89 2b       	or	r24, r25
    10b8:	09 f0       	breq	.+2      	; 0x10bc <beginCANFast+0x48>
    10ba:	98 95       	break
	ASSERT( ret==0);
	ret=prepare_rx( BEACON_MOB, BeaconAddress<<6, 0b11111100000, ReceiveCANFastBEACON); //all 1s forces comparison
	ASSERT( ret==0);
#endif

	prepare_tx(TRANSMITMOB, 0b11111111111, 0b11111111111, TransmitCANFast);
    10bc:	23 e8       	ldi	r18, 0x83	; 131
    10be:	38 e0       	ldi	r19, 0x08	; 8
    10c0:	4f ef       	ldi	r20, 0xFF	; 255
    10c2:	57 e0       	ldi	r21, 0x07	; 7
    10c4:	6f ef       	ldi	r22, 0xFF	; 255
    10c6:	77 e0       	ldi	r23, 0x07	; 7
    10c8:	8d e0       	ldi	r24, 0x0D	; 13
    10ca:	c8 dc       	rcall	.-1648   	; 0xa5c <prepare_tx>
	List_Init(&head);
    10cc:	87 e4       	ldi	r24, 0x47	; 71
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	5e d5       	rcall	.+2748   	; 0x1b8e <List_Init>
    10d2:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <ring_buffer_CAN+0x55>
void *memset(void *s, int c, size_t n);

//flushes the send buffer to get it ready for new data

void Send_buffer_flush(struct ringBufSCAN* _this, const int clearBuffer) {
	_this->count = 0;
    10d6:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <ring_buffer_CAN+0x54>
    10da:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <ring_buffer_CAN+0x51>
	_this->head = 0;
    10de:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <ring_buffer_CAN+0x50>
    10e2:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <ring_buffer_CAN+0x53>
	_this->tail = 0;
    10e6:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <ring_buffer_CAN+0x52>
    10ea:	60 e0       	ldi	r22, 0x00	; 0
	prepare_tx(TRANSMITMOB, 0b11111111111, 0b11111111111, TransmitCANFast);
	List_Init(&head);
	Send_buffer_flush(&ring_buffer_CAN,0);
	//Send_buffer_flush(&ring_buffer_CAN_Control,1);
	//Send_buffer_flush(&ring_buffer_CAN_Beacon,1);
	Transmit_buffer_flush(&TransmitBuffer,0);
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	8a e7       	ldi	r24, 0x7A	; 122
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	ad df       	rcall	.-166    	; 0x104e <Transmit_buffer_flush>
    10f4:	cf 91       	pop	r28
}
    10f6:	08 95       	ret

000010f8 <initCANFastTransfer>:
    10f8:	44 e0       	ldi	r20, 0x04	; 4



void initCANFastTransfer(void)
{
	beginCANFast(ReceiveCAN, GLOBAL_DEVICES*GLOBAL_DATA_IDX_PER_DEV/*sizeof(ReceiveCAN)*/, ROUTER_ADDRESS);
    10fa:	66 e4       	ldi	r22, 0x46	; 70
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	86 e3       	ldi	r24, 0x36	; 54
    1100:	94 e0       	ldi	r25, 0x04	; 4
    1102:	b8 cf       	rjmp	.-144    	; 0x1074 <beginCANFast>
    1104:	08 95       	ret

00001106 <TransmitCANFast>:
	}
}
#endif

void TransmitCANFast( CAN_packet *p, unsigned char mob) // interrupt callback
{
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
	return _this->count;

}

unsigned int Transmit_buffer_GetCount(struct ringBufTRANSMIT* _this) {
	return _this->count;
    110e:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <TransmitBuffer+0xb8>
    1112:	30 91 33 03 	lds	r19, 0x0333	; 0x800333 <TransmitBuffer+0xb9>
{

	//NEW STATIC METHOD
	//if there is something to send

	if(Transmit_buffer_GetCount(&TransmitBuffer) > 0)
    1116:	21 15       	cp	r18, r1
    1118:	31 05       	cpc	r19, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <TransmitCANFast+0x18>
    111c:	a5 c0       	rjmp	.+330    	; 0x1268 <TransmitCANFast+0x162>
    111e:	ec 01       	movw	r28, r24
	{
//    #ifdef NEW_MAIN
//    toggleLED(LED1);
//    #endif
		//if more than 2 data/index pairs left might be able to send large packet.
		if(Transmit_buffer_GetCount(&TransmitBuffer)>6) {
    1120:	27 30       	cpi	r18, 0x07	; 7
    1122:	31 05       	cpc	r19, r1
    1124:	08 f4       	brcc	.+2      	; 0x1128 <TransmitCANFast+0x22>
    1126:	3c c0       	rjmp	.+120    	; 0x11a0 <TransmitCANFast+0x9a>
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    1128:	8a e7       	ldi	r24, 0x7A	; 122
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	52 df       	rcall	.-348    	; 0xfd2 <Transmit_buffer_get>
    112e:	8c 01       	movw	r16, r24
			p->id = ( address << 6) + ROUTER_ADDRESS; //not passed through messages will have wrong sender address
    1130:	00 24       	eor	r0, r0
    1132:	96 95       	lsr	r25
    1134:	87 95       	ror	r24
    1136:	07 94       	ror	r0
    1138:	96 95       	lsr	r25
    113a:	87 95       	ror	r24
    113c:	07 94       	ror	r0
    113e:	98 2f       	mov	r25, r24
    1140:	80 2d       	mov	r24, r0
    1142:	04 96       	adiw	r24, 0x04	; 4
    1144:	99 83       	std	Y+1, r25	; 0x01
    1146:	88 83       	st	Y, r24
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1148:	8a e7       	ldi	r24, 0x7A	; 122
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	42 df       	rcall	.-380    	; 0xfd2 <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    114e:	9b 83       	std	Y+3, r25	; 0x03
				p->data[2*i + 1] = temp;
    1150:	8c 83       	std	Y+4, r24	; 0x04
		if(Transmit_buffer_GetCount(&TransmitBuffer)>6) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + ROUTER_ADDRESS; //not passed through messages will have wrong sender address
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1152:	8a e7       	ldi	r24, 0x7A	; 122
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	3d df       	rcall	.-390    	; 0xfd2 <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    1158:	9d 83       	std	Y+5, r25	; 0x05
				p->data[2*i + 1] = temp;
			}
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
    115a:	8e 83       	std	Y+6, r24	; 0x06
    115c:	8a e7       	ldi	r24, 0x7A	; 122
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	60 df       	rcall	.-320    	; 0x1022 <Transmit_buffer_peek>
    1162:	08 17       	cp	r16, r24
    1164:	19 07       	cpc	r17, r25
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
    1166:	c9 f4       	brne	.+50     	; 0x119a <TransmitCANFast+0x94>
    1168:	8a e7       	ldi	r24, 0x7A	; 122
    116a:	92 e0       	ldi	r25, 0x02	; 2
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    116c:	32 df       	rcall	.-412    	; 0xfd2 <Transmit_buffer_get>
    116e:	8a e7       	ldi	r24, 0x7A	; 122
    1170:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    1172:	2f df       	rcall	.-418    	; 0xfd2 <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    1174:	9f 83       	std	Y+7, r25	; 0x07
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1176:	88 87       	std	Y+8, r24	; 0x08
    1178:	8a e7       	ldi	r24, 0x7A	; 122
    117a:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    117c:	2a df       	rcall	.-428    	; 0xfd2 <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    117e:	99 87       	std	Y+9, r25	; 0x09
				}
				//need to check if this was the last packet
				if(Transmit_buffer_peek(&TransmitBuffer) == address) {
    1180:	8a 87       	std	Y+10, r24	; 0x0a
    1182:	8a e7       	ldi	r24, 0x7A	; 122
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	4d df       	rcall	.-358    	; 0x1022 <Transmit_buffer_peek>
    1188:	08 17       	cp	r16, r24
    118a:	19 07       	cpc	r17, r25
    118c:	19 f4       	brne	.+6      	; 0x1194 <TransmitCANFast+0x8e>
					//next address is same, so this isn't the last packet, send a length 8.
					p->length = 8;
    118e:	88 e0       	ldi	r24, 0x08	; 8
    1190:	8a 83       	std	Y+2, r24	; 0x02
    1192:	70 c0       	rjmp	.+224    	; 0x1274 <TransmitCANFast+0x16e>
				}
				else {
					//next address is different, and this is the last packet, so send a 9.
					p->length = 9;
    1194:	89 e0       	ldi	r24, 0x09	; 9
    1196:	8a 83       	std	Y+2, r24	; 0x02
    1198:	6d c0       	rjmp	.+218    	; 0x1274 <TransmitCANFast+0x16e>
				}
			}
			else {
				//addresses don't match and we should just send what is currently in the packet.
				p->length = 4;
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	8a 83       	std	Y+2, r24	; 0x02
			}
		}
		//if exactly 2 data/index pairs left send with length 9. Receiver
		//will read the "wrong" length correctly, but realize this is the last packet.
		//note: still need to check incase two different destinations.
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==6) {
    119e:	6a c0       	rjmp	.+212    	; 0x1274 <TransmitCANFast+0x16e>
    11a0:	26 30       	cpi	r18, 0x06	; 6
    11a2:	31 05       	cpc	r19, r1
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    11a4:	99 f5       	brne	.+102    	; 0x120c <TransmitCANFast+0x106>
    11a6:	8a e7       	ldi	r24, 0x7A	; 122
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	13 df       	rcall	.-474    	; 0xfd2 <Transmit_buffer_get>
    11ac:	8c 01       	movw	r16, r24
			p->id = ( address << 6) + ROUTER_ADDRESS; //not passed through messages will have wrong sender address
    11ae:	00 24       	eor	r0, r0
    11b0:	96 95       	lsr	r25
    11b2:	87 95       	ror	r24
    11b4:	07 94       	ror	r0
    11b6:	96 95       	lsr	r25
    11b8:	87 95       	ror	r24
    11ba:	07 94       	ror	r0
    11bc:	98 2f       	mov	r25, r24
    11be:	80 2d       	mov	r24, r0
    11c0:	04 96       	adiw	r24, 0x04	; 4
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    11c2:	99 83       	std	Y+1, r25	; 0x01
    11c4:	88 83       	st	Y, r24
    11c6:	8a e7       	ldi	r24, 0x7A	; 122
				p->data[2*i] = (temp >> 8);//this is so dumb
    11c8:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i + 1] = temp;
    11ca:	03 df       	rcall	.-506    	; 0xfd2 <Transmit_buffer_get>
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==6) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + ROUTER_ADDRESS; //not passed through messages will have wrong sender address
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    11cc:	9b 83       	std	Y+3, r25	; 0x03
    11ce:	8c 83       	std	Y+4, r24	; 0x04
    11d0:	8a e7       	ldi	r24, 0x7A	; 122
				p->data[2*i] = (temp >> 8);//this is so dumb
    11d2:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i + 1] = temp;
    11d4:	fe de       	rcall	.-516    	; 0xfd2 <Transmit_buffer_get>
			}
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
    11d6:	9d 83       	std	Y+5, r25	; 0x05
    11d8:	8e 83       	std	Y+6, r24	; 0x06
    11da:	8a e7       	ldi	r24, 0x7A	; 122
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	21 df       	rcall	.-446    	; 0x1022 <Transmit_buffer_peek>
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
    11e0:	08 17       	cp	r16, r24
    11e2:	19 07       	cpc	r17, r25
    11e4:	81 f4       	brne	.+32     	; 0x1206 <TransmitCANFast+0x100>
    11e6:	8a e7       	ldi	r24, 0x7A	; 122
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    11e8:	92 e0       	ldi	r25, 0x02	; 2
    11ea:	f3 de       	rcall	.-538    	; 0xfd2 <Transmit_buffer_get>
    11ec:	8a e7       	ldi	r24, 0x7A	; 122
    11ee:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    11f0:	f0 de       	rcall	.-544    	; 0xfd2 <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    11f2:	9f 83       	std	Y+7, r25	; 0x07
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    11f4:	88 87       	std	Y+8, r24	; 0x08
    11f6:	8a e7       	ldi	r24, 0x7A	; 122
    11f8:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    11fa:	eb de       	rcall	.-554    	; 0xfd2 <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    11fc:	99 87       	std	Y+9, r25	; 0x09
				}
				p->length = 9;
    11fe:	8a 87       	std	Y+10, r24	; 0x0a
    1200:	89 e0       	ldi	r24, 0x09	; 9
    1202:	8a 83       	std	Y+2, r24	; 0x02
			}
			else {
				//addresses don't match and we should just send what is currently in the packet.
				p->length = 4;
    1204:	37 c0       	rjmp	.+110    	; 0x1274 <TransmitCANFast+0x16e>
    1206:	84 e0       	ldi	r24, 0x04	; 4
    1208:	8a 83       	std	Y+2, r24	; 0x02
			}

		}
		//if only 1 data/index pair receiver will know it is the last packet.
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==3) {
    120a:	34 c0       	rjmp	.+104    	; 0x1274 <TransmitCANFast+0x16e>
    120c:	23 30       	cpi	r18, 0x03	; 3
    120e:	31 05       	cpc	r19, r1
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    1210:	e1 f4       	brne	.+56     	; 0x124a <TransmitCANFast+0x144>
    1212:	8a e7       	ldi	r24, 0x7A	; 122
    1214:	92 e0       	ldi	r25, 0x02	; 2
    1216:	dd de       	rcall	.-582    	; 0xfd2 <Transmit_buffer_get>
			p->id = ( address << 6) + ROUTER_ADDRESS; //not passed through messages will have wrong sender address
    1218:	00 24       	eor	r0, r0
    121a:	96 95       	lsr	r25
    121c:	87 95       	ror	r24
    121e:	07 94       	ror	r0
    1220:	96 95       	lsr	r25
    1222:	87 95       	ror	r24
    1224:	07 94       	ror	r0
    1226:	98 2f       	mov	r25, r24
    1228:	80 2d       	mov	r24, r0
    122a:	04 96       	adiw	r24, 0x04	; 4
			p->length = 4;
    122c:	99 83       	std	Y+1, r25	; 0x01
    122e:	88 83       	st	Y, r24
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1230:	84 e0       	ldi	r24, 0x04	; 4
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	8a e7       	ldi	r24, 0x7A	; 122
    1236:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i] = (temp >> 8);
    1238:	cc de       	rcall	.-616    	; 0xfd2 <Transmit_buffer_get>
				p->data[2*i + 1] = temp;
    123a:	9b 83       	std	Y+3, r25	; 0x03
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==3) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + ROUTER_ADDRESS; //not passed through messages will have wrong sender address
			p->length = 4;
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    123c:	8c 83       	std	Y+4, r24	; 0x04
    123e:	8a e7       	ldi	r24, 0x7A	; 122
    1240:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i] = (temp >> 8);
    1242:	c7 de       	rcall	.-626    	; 0xfd2 <Transmit_buffer_get>
				p->data[2*i + 1] = temp;
    1244:	9d 83       	std	Y+5, r25	; 0x05
    1246:	8e 83       	std	Y+6, r24	; 0x06
		}

		else
		{
			//error, missing dest/index/value set, previous packets could be very corrupt
			TransmitSetMissMatch++;
    1248:	15 c0       	rjmp	.+42     	; 0x1274 <TransmitCANFast+0x16e>
    124a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <TransmitSetMissMatch>
    124e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <TransmitSetMissMatch+0x1>
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <TransmitSetMissMatch+0x1>
    1258:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <TransmitSetMissMatch>
//      #ifdef NEW_MAIN
//        toggleLED(LED9);
//      #endif
			Transmit_buffer_flush(&TransmitBuffer,1);
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	8a e7       	ldi	r24, 0x7A	; 122
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	f4 de       	rcall	.-536    	; 0x104e <Transmit_buffer_flush>
    1266:	06 c0       	rjmp	.+12     	; 0x1274 <TransmitCANFast+0x16e>
		}
	}
	else {
		p->id = 1;
    1268:	21 e0       	ldi	r18, 0x01	; 1
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	fc 01       	movw	r30, r24
    126e:	31 83       	std	Z+1, r19	; 0x01
    1270:	20 83       	st	Z, r18
		p->length = 0;
    1272:	12 82       	std	Z+2, r1	; 0x02
	}
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <initCOMs>:
}

bool manualMode(void)
{
	return (macroCommand==0);
}
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	0e e0       	ldi	r16, 0x0E	; 14
    1284:	12 e0       	ldi	r17, 0x02	; 2
    1286:	26 e0       	ldi	r18, 0x06	; 6
    1288:	32 e0       	ldi	r19, 0x02	; 2
    128a:	48 ee       	ldi	r20, 0xE8	; 232
    128c:	51 e0       	ldi	r21, 0x01	; 1
    128e:	64 e0       	ldi	r22, 0x04	; 4
    1290:	83 e3       	ldi	r24, 0x33	; 51
    1292:	9b e0       	ldi	r25, 0x0B	; 11
    1294:	ec d1       	rcall	.+984    	; 0x166e <FT_Init>
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	08 95       	ret

0000129c <System_STOP>:
    129c:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <MacroStatus>
    12a0:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <macroCommand+0x1>
    12a4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <macroCommand>
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	83 e3       	ldi	r24, 0x33	; 51
    12b0:	9b e0       	ldi	r25, 0x0B	; 11
    12b2:	16 d2       	rcall	.+1068   	; 0x16e0 <FT_ToSend>
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	83 e3       	ldi	r24, 0x33	; 51
    12b8:	9b e0       	ldi	r25, 0x0B	; 11
    12ba:	28 d2       	rcall	.+1104   	; 0x170c <FT_Send>
    12bc:	68 e0       	ldi	r22, 0x08	; 8
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	8d ed       	ldi	r24, 0xDD	; 221
    12c2:	95 e0       	ldi	r25, 0x05	; 5
    12c4:	79 dc       	rcall	.-1806   	; 0xbb8 <getCANFT_Flag>
    12c6:	64 e0       	ldi	r22, 0x04	; 4
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	af dd       	rcall	.-1186   	; 0xe2e <ToSendCAN>
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	88 e0       	ldi	r24, 0x08	; 8
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	aa dd       	rcall	.-1196   	; 0xe2e <ToSendCAN>
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	89 e0       	ldi	r24, 0x09	; 9
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a5 dd       	rcall	.-1206   	; 0xe2e <ToSendCAN>
    12e4:	85 e0       	ldi	r24, 0x05	; 5
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	38 de       	rcall	.-912    	; 0xf5a <sendDataCAN>
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	88 e0       	ldi	r24, 0x08	; 8
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	29 cc       	rjmp	.-1966   	; 0xb48 <setCANFTdata>
    12f6:	08 95       	ret

000012f8 <checkE_Stop>:
    12f8:	cf 93       	push	r28
    12fa:	68 e0       	ldi	r22, 0x08	; 8
    12fc:	83 e3       	ldi	r24, 0x33	; 51
    12fe:	9b e0       	ldi	r25, 0x0B	; 11
    1300:	e9 d1       	rcall	.+978    	; 0x16d4 <FT_Modified>
    1302:	c8 2f       	mov	r28, r24
    1304:	88 23       	and	r24, r24
    1306:	69 f0       	breq	.+26     	; 0x1322 <checkE_Stop+0x2a>
    1308:	68 e0       	ldi	r22, 0x08	; 8
    130a:	83 e3       	ldi	r24, 0x33	; 51
    130c:	9b e0       	ldi	r25, 0x0B	; 11
    130e:	d5 d1       	rcall	.+938    	; 0x16ba <FT_Read>
    1310:	68 2f       	mov	r22, r24
    1312:	83 e3       	ldi	r24, 0x33	; 51
    1314:	9b e0       	ldi	r25, 0x0B	; 11
    1316:	d1 d1       	rcall	.+930    	; 0x16ba <FT_Read>
    1318:	89 2b       	or	r24, r25
    131a:	11 f4       	brne	.+4      	; 0x1320 <checkE_Stop+0x28>
    131c:	bf df       	rcall	.-130    	; 0x129c <System_STOP>
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <checkE_Stop+0x2a>
    1320:	c0 e0       	ldi	r28, 0x00	; 0
    1322:	8c 2f       	mov	r24, r28
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret

00001328 <sendManualCommand>:
    1328:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <leftMotorCommand>
    132c:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <leftMotorCommand+0x1>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	7c dd       	rcall	.-1288   	; 0xe2e <ToSendCAN>
    1336:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <rightMotorCommand>
    133a:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <rightMotorCommand+0x1>
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	75 dd       	rcall	.-1302   	; 0xe2e <ToSendCAN>
    1344:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <actuatorSpeed>
    1348:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <actuatorSpeed+0x1>
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	6e dd       	rcall	.-1316   	; 0xe2e <ToSendCAN>
    1352:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <armMotorCommand>
    1356:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <armMotorCommand+0x1>
    135a:	84 e0       	ldi	r24, 0x04	; 4
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	67 dd       	rcall	.-1330   	; 0xe2e <ToSendCAN>
    1360:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <plowMotorCommand>
    1364:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <plowMotorCommand+0x1>
    1368:	85 e0       	ldi	r24, 0x05	; 5
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	60 dd       	rcall	.-1344   	; 0xe2e <ToSendCAN>
    136e:	86 e0       	ldi	r24, 0x06	; 6
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	f3 cd       	rjmp	.-1050   	; 0xf5a <sendDataCAN>
    1374:	08 95       	ret

00001376 <parseComms>:
    1376:	62 e0       	ldi	r22, 0x02	; 2
    1378:	83 e3       	ldi	r24, 0x33	; 51
    137a:	9b e0       	ldi	r25, 0x0B	; 11
    137c:	9e d1       	rcall	.+828    	; 0x16ba <FT_Read>
    137e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <leftMotorCommand+0x1>
    1382:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <leftMotorCommand>
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	83 e3       	ldi	r24, 0x33	; 51
    138a:	9b e0       	ldi	r25, 0x0B	; 11
    138c:	96 d1       	rcall	.+812    	; 0x16ba <FT_Read>
    138e:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <rightMotorCommand+0x1>
    1392:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <rightMotorCommand>
    1396:	63 e0       	ldi	r22, 0x03	; 3
    1398:	83 e3       	ldi	r24, 0x33	; 51
    139a:	9b e0       	ldi	r25, 0x0B	; 11
    139c:	8e d1       	rcall	.+796    	; 0x16ba <FT_Read>
    139e:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <actuatorSpeed+0x1>
    13a2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <actuatorSpeed>
    13a6:	64 e0       	ldi	r22, 0x04	; 4
    13a8:	83 e3       	ldi	r24, 0x33	; 51
    13aa:	9b e0       	ldi	r25, 0x0B	; 11
    13ac:	86 d1       	rcall	.+780    	; 0x16ba <FT_Read>
    13ae:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <armMotorCommand+0x1>
    13b2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <armMotorCommand>
    13b6:	65 e0       	ldi	r22, 0x05	; 5
    13b8:	83 e3       	ldi	r24, 0x33	; 51
    13ba:	9b e0       	ldi	r25, 0x0B	; 11
    13bc:	7e d1       	rcall	.+764    	; 0x16ba <FT_Read>
    13be:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <plowMotorCommand+0x1>
    13c2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <plowMotorCommand>
    13c6:	08 95       	ret

000013c8 <CommunicationsHandle>:
    13c8:	86 e8       	ldi	r24, 0x86	; 134
    13ca:	9a e0       	ldi	r25, 0x0A	; 10
    13cc:	28 d4       	rcall	.+2128   	; 0x1c1e <timerDone>
    13ce:	88 23       	and	r24, r24
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <CommunicationsHandle+0xc>
    13d2:	94 c0       	rjmp	.+296    	; 0x14fc <CommunicationsHandle+0x134>
    13d4:	86 e8       	ldi	r24, 0x86	; 134
    13d6:	9a e0       	ldi	r25, 0x0A	; 10
    13d8:	ec d3       	rcall	.+2008   	; 0x1bb2 <resetTimer>
    13da:	cd df       	rcall	.-102    	; 0x1376 <parseComms>
    13dc:	8d df       	rcall	.-230    	; 0x12f8 <checkE_Stop>
    13de:	80 e4       	ldi	r24, 0x40	; 64
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	90 d3       	rcall	.+1824   	; 0x1b04 <isSystemReady>
    13e4:	88 23       	and	r24, r24
    13e6:	09 f4       	brne	.+2      	; 0x13ea <CommunicationsHandle+0x22>
    13e8:	60 c0       	rjmp	.+192    	; 0x14aa <CommunicationsHandle+0xe2>
    13ea:	8e e0       	ldi	r24, 0x0E	; 14
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	f7 d4       	rcall	.+2542   	; 0x1dde <puts>
    13f0:	8f e3       	ldi	r24, 0x3F	; 63
    13f2:	9f e1       	ldi	r25, 0x1F	; 31
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <CommunicationsHandle+0x2c>
    13f8:	00 c0       	rjmp	.+0      	; 0x13fa <CommunicationsHandle+0x32>
    13fa:	00 00       	nop
    13fc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <pendingMacroIndex>
    1400:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <pendingMacroIndex+0x1>
    1404:	89 2b       	or	r24, r25
    1406:	41 f1       	breq	.+80     	; 0x1458 <CommunicationsHandle+0x90>
    1408:	bc d3       	rcall	.+1912   	; 0x1b82 <getCurrentMacro>
    140a:	21 e0       	ldi	r18, 0x01	; 1
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	89 2b       	or	r24, r25
    1410:	11 f0       	breq	.+4      	; 0x1416 <CommunicationsHandle+0x4e>
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <pendingMacroIndex>
    141a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <pendingMacroIndex+0x1>
    141e:	82 23       	and	r24, r18
    1420:	93 23       	and	r25, r19
    1422:	89 2b       	or	r24, r25
    1424:	c9 f0       	breq	.+50     	; 0x1458 <CommunicationsHandle+0x90>
    1426:	81 e9       	ldi	r24, 0x91	; 145
    1428:	96 e0       	ldi	r25, 0x06	; 6
    142a:	f9 d3       	rcall	.+2034   	; 0x1c1e <timerDone>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <CommunicationsHandle+0x6a>
    1430:	49 c0       	rjmp	.+146    	; 0x14c4 <CommunicationsHandle+0xfc>
    1432:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <macroSubmitCount>
    1436:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <macroSubmitCount+0x1>
    143a:	9c 01       	movw	r18, r24
    143c:	2f 5f       	subi	r18, 0xFF	; 255
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <macroSubmitCount+0x1>
    1444:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <macroSubmitCount>
    1448:	06 97       	sbiw	r24, 0x06	; 6
    144a:	08 f4       	brcc	.+2      	; 0x144e <CommunicationsHandle+0x86>
    144c:	3b c0       	rjmp	.+118    	; 0x14c4 <CommunicationsHandle+0xfc>
    144e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <pendingMacroIndex+0x1>
    1452:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <pendingMacroIndex>
    1456:	36 c0       	rjmp	.+108    	; 0x14c4 <CommunicationsHandle+0xfc>
    1458:	68 e0       	ldi	r22, 0x08	; 8
    145a:	83 e3       	ldi	r24, 0x33	; 51
    145c:	9b e0       	ldi	r25, 0x0B	; 11
    145e:	3a d1       	rcall	.+628    	; 0x16d4 <FT_Modified>
    1460:	88 23       	and	r24, r24
    1462:	79 f0       	breq	.+30     	; 0x1482 <CommunicationsHandle+0xba>
    1464:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <macroCommand>
    1468:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <macroCommand+0x1>
    146c:	89 2b       	or	r24, r25
    146e:	49 f4       	brne	.+18     	; 0x1482 <CommunicationsHandle+0xba>
    1470:	68 e0       	ldi	r22, 0x08	; 8
    1472:	83 e3       	ldi	r24, 0x33	; 51
    1474:	9b e0       	ldi	r25, 0x0B	; 11
    1476:	21 d1       	rcall	.+578    	; 0x16ba <FT_Read>
    1478:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <pendingMacroIndex+0x1>
    147c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <pendingMacroIndex>
    1480:	21 c0       	rjmp	.+66     	; 0x14c4 <CommunicationsHandle+0xfc>
    1482:	68 e0       	ldi	r22, 0x08	; 8
    1484:	83 e3       	ldi	r24, 0x33	; 51
    1486:	9b e0       	ldi	r25, 0x0B	; 11
    1488:	25 d1       	rcall	.+586    	; 0x16d4 <FT_Modified>
    148a:	81 11       	cpse	r24, r1
    148c:	1b c0       	rjmp	.+54     	; 0x14c4 <CommunicationsHandle+0xfc>
    148e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <macroCommand>
    1492:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <macroCommand+0x1>
    1496:	89 2b       	or	r24, r25
    1498:	a9 f4       	brne	.+42     	; 0x14c4 <CommunicationsHandle+0xfc>
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	68 e0       	ldi	r22, 0x08	; 8
    14a0:	83 e3       	ldi	r24, 0x33	; 51
    14a2:	9b e0       	ldi	r25, 0x0B	; 11
    14a4:	1d d1       	rcall	.+570    	; 0x16e0 <FT_ToSend>
    14a6:	40 df       	rcall	.-384    	; 0x1328 <sendManualCommand>
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <CommunicationsHandle+0xfc>
    14aa:	8c e1       	ldi	r24, 0x1C	; 28
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	97 d4       	rcall	.+2350   	; 0x1dde <puts>
    14b0:	68 e0       	ldi	r22, 0x08	; 8
    14b2:	83 e3       	ldi	r24, 0x33	; 51
    14b4:	9b e0       	ldi	r25, 0x0B	; 11
    14b6:	0e d1       	rcall	.+540    	; 0x16d4 <FT_Modified>
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	68 e0       	ldi	r22, 0x08	; 8
    14be:	83 e3       	ldi	r24, 0x33	; 51
    14c0:	9b e0       	ldi	r25, 0x0B	; 11
    14c2:	0e d1       	rcall	.+540    	; 0x16e0 <FT_ToSend>
    14c4:	8a ef       	ldi	r24, 0xFA	; 250
    14c6:	9b e0       	ldi	r25, 0x0B	; 11
    14c8:	8e d3       	rcall	.+1820   	; 0x1be6 <getTimeElepsed>
    14ca:	9c 01       	movw	r18, r24
    14cc:	36 95       	lsr	r19
    14ce:	27 95       	ror	r18
    14d0:	36 95       	lsr	r19
    14d2:	27 95       	ror	r18
    14d4:	36 95       	lsr	r19
    14d6:	27 95       	ror	r18
    14d8:	a5 ec       	ldi	r26, 0xC5	; 197
    14da:	b0 e2       	ldi	r27, 0x20	; 32
    14dc:	4a d4       	rcall	.+2196   	; 0x1d72 <__umulhisi3>
    14de:	ac 01       	movw	r20, r24
    14e0:	52 95       	swap	r21
    14e2:	42 95       	swap	r20
    14e4:	4f 70       	andi	r20, 0x0F	; 15
    14e6:	45 27       	eor	r20, r21
    14e8:	5f 70       	andi	r21, 0x0F	; 15
    14ea:	45 27       	eor	r20, r21
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	83 e3       	ldi	r24, 0x33	; 51
    14f0:	9b e0       	ldi	r25, 0x0B	; 11
    14f2:	f6 d0       	rcall	.+492    	; 0x16e0 <FT_ToSend>
    14f4:	61 e0       	ldi	r22, 0x01	; 1
    14f6:	83 e3       	ldi	r24, 0x33	; 51
    14f8:	9b e0       	ldi	r25, 0x0B	; 11
    14fa:	08 d1       	rcall	.+528    	; 0x170c <FT_Send>
    14fc:	86 e8       	ldi	r24, 0x86	; 134
    14fe:	9a e0       	ldi	r25, 0x0A	; 10
    1500:	8e d3       	rcall	.+1820   	; 0x1c1e <timerDone>
    1502:	88 23       	and	r24, r24
    1504:	19 f0       	breq	.+6      	; 0x150c <CommunicationsHandle+0x144>
    1506:	8a ef       	ldi	r24, 0xFA	; 250
    1508:	9b e0       	ldi	r25, 0x0B	; 11
    150a:	53 c3       	rjmp	.+1702   	; 0x1bb2 <resetTimer>
    150c:	08 95       	ret

0000150e <setupCommsTimers>:

void setupCommsTimers(void)
{
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
	setTimerInterval(&macroResubmitTimer,500);
    1512:	04 ef       	ldi	r16, 0xF4	; 244
    1514:	11 e0       	ldi	r17, 0x01	; 1
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	81 e9       	ldi	r24, 0x91	; 145
    1524:	96 e0       	ldi	r25, 0x06	; 6
    1526:	37 d3       	rcall	.+1646   	; 0x1b96 <setTimerInterval>
	setTimerInterval(&pingTimer,500);
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	81 e8       	ldi	r24, 0x81	; 129
    1536:	96 e0       	ldi	r25, 0x06	; 6
    1538:	2e d3       	rcall	.+1628   	; 0x1b96 <setTimerInterval>
	setTimerInterval(&commsTimer,5);
    153a:	05 e0       	ldi	r16, 0x05	; 5
    153c:	10 e0       	ldi	r17, 0x00	; 0
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	81 ea       	ldi	r24, 0xA1	; 161
    154c:	96 e0       	ldi	r25, 0x06	; 6
    154e:	23 d3       	rcall	.+1606   	; 0x1b96 <setTimerInterval>
	setTimerInterval(&commsTimerBeacon,5);
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	82 ee       	ldi	r24, 0xE2	; 226
    155e:	99 e0       	ldi	r25, 0x09	; 9
    1560:	1a d3       	rcall	.+1588   	; 0x1b96 <setTimerInterval>
	setTimerInterval(&safetyTimer,2000);
    1562:	00 ed       	ldi	r16, 0xD0	; 208
    1564:	17 e0       	ldi	r17, 0x07	; 7
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	86 e8       	ldi	r24, 0x86	; 134
    1574:	9a e0       	ldi	r25, 0x0A	; 10
    1576:	0f d3       	rcall	.+1566   	; 0x1b96 <setTimerInterval>
	setTimerInterval(&checkCANTimer,50);
    1578:	02 e3       	ldi	r16, 0x32	; 50
    157a:	10 e0       	ldi	r17, 0x00	; 0
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	86 ee       	ldi	r24, 0xE6	; 230
    158a:	9b e0       	ldi	r25, 0x0B	; 11
    158c:	04 d3       	rcall	.+1544   	; 0x1b96 <setTimerInterval>
	setTimerInterval(&TransmitManual, 50);
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	8d e1       	ldi	r24, 0x1D	; 29
    159c:	9b e0       	ldi	r25, 0x0B	; 11
    159e:	fb d2       	rcall	.+1526   	; 0x1b96 <setTimerInterval>
}
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	08 95       	ret

000015a6 <Buffer_init>:
}

bool Buffer_empty (Buffer_t * buffer)
{
	return Buffer_size(buffer) == 0;
}
    15a6:	fc 01       	movw	r30, r24
    15a8:	15 ae       	std	Z+61, r1	; 0x3d
    15aa:	14 ae       	std	Z+60, r1	; 0x3c
    15ac:	17 ae       	std	Z+63, r1	; 0x3f
    15ae:	16 ae       	std	Z+62, r1	; 0x3e
    15b0:	e0 5c       	subi	r30, 0xC0	; 192
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	11 82       	std	Z+1, r1	; 0x01
    15b6:	10 82       	st	Z, r1
    15b8:	08 95       	ret

000015ba <Buffer_size>:
    15ba:	fc 01       	movw	r30, r24
    15bc:	84 ad       	ldd	r24, Z+60	; 0x3c
    15be:	95 ad       	ldd	r25, Z+61	; 0x3d
    15c0:	08 95       	ret

000015c2 <Buffer_push>:
	buffer->tail = 0;
}

size_t Buffer_size (Buffer_t * buffer)
{
	return buffer->size;
    15c2:	dc 01       	movw	r26, r24
    15c4:	dc 96       	adiw	r26, 0x3c	; 60
    15c6:	2d 91       	ld	r18, X+
    15c8:	3c 91       	ld	r19, X
    15ca:	dd 97       	sbiw	r26, 0x3d	; 61
	return Buffer_size(buffer) == 0;
}

void Buffer_push (Buffer_t * buffer, uint8_t value)
{
	if (Buffer_full(buffer))
    15cc:	2c 33       	cpi	r18, 0x3C	; 60
    15ce:	31 05       	cpc	r19, r1
    15d0:	d9 f0       	breq	.+54     	; 0x1608 <Buffer_push+0x46>
		return;
	buffer->data[buffer->tail++] = value;
    15d2:	a0 5c       	subi	r26, 0xC0	; 192
    15d4:	bf 4f       	sbci	r27, 0xFF	; 255
    15d6:	4d 91       	ld	r20, X+
    15d8:	5c 91       	ld	r21, X
    15da:	11 97       	sbiw	r26, 0x01	; 1
    15dc:	fa 01       	movw	r30, r20
    15de:	31 96       	adiw	r30, 0x01	; 1
    15e0:	ed 93       	st	X+, r30
    15e2:	fc 93       	st	X, r31
    15e4:	dc 01       	movw	r26, r24
    15e6:	a4 0f       	add	r26, r20
    15e8:	b5 1f       	adc	r27, r21
    15ea:	6c 93       	st	X, r22
	++buffer->size;
    15ec:	2f 5f       	subi	r18, 0xFF	; 255
    15ee:	3f 4f       	sbci	r19, 0xFF	; 255
    15f0:	dc 01       	movw	r26, r24
    15f2:	dd 96       	adiw	r26, 0x3d	; 61
    15f4:	3c 93       	st	X, r19
    15f6:	2e 93       	st	-X, r18
    15f8:	dc 97       	sbiw	r26, 0x3c	; 60
	if (buffer->tail == MAX_PCKT_SZ)
    15fa:	fc 97       	sbiw	r30, 0x3c	; 60
    15fc:	29 f4       	brne	.+10     	; 0x1608 <Buffer_push+0x46>
		buffer->tail = 0;
    15fe:	fc 01       	movw	r30, r24
    1600:	e0 5c       	subi	r30, 0xC0	; 192
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	11 82       	std	Z+1, r1	; 0x01
    1606:	10 82       	st	Z, r1
    1608:	08 95       	ret

0000160a <Buffer_pop>:
}

uint8_t Buffer_pop (Buffer_t * buffer)
{
    160a:	fc 01       	movw	r30, r24
	--buffer->size;
    160c:	84 ad       	ldd	r24, Z+60	; 0x3c
    160e:	95 ad       	ldd	r25, Z+61	; 0x3d
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	95 af       	std	Z+61, r25	; 0x3d
    1614:	84 af       	std	Z+60, r24	; 0x3c
	uint8_t value = buffer->data[buffer->head];
    1616:	26 ad       	ldd	r18, Z+62	; 0x3e
    1618:	37 ad       	ldd	r19, Z+63	; 0x3f
    161a:	df 01       	movw	r26, r30
    161c:	a2 0f       	add	r26, r18
    161e:	b3 1f       	adc	r27, r19
    1620:	8c 91       	ld	r24, X
	++buffer->head;
    1622:	2f 5f       	subi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
	if (buffer->head == MAX_PCKT_SZ)
    1626:	2c 33       	cpi	r18, 0x3C	; 60
    1628:	31 05       	cpc	r19, r1
    162a:	19 f0       	breq	.+6      	; 0x1632 <Buffer_pop+0x28>

uint8_t Buffer_pop (Buffer_t * buffer)
{
	--buffer->size;
	uint8_t value = buffer->data[buffer->head];
	++buffer->head;
    162c:	37 af       	std	Z+63, r19	; 0x3f
    162e:	26 af       	std	Z+62, r18	; 0x3e
    1630:	08 95       	ret
	if (buffer->head == MAX_PCKT_SZ)
		buffer->head = 0;
    1632:	17 ae       	std	Z+63, r1	; 0x3f
    1634:	16 ae       	std	Z+62, r1	; 0x3e
	return value;
}
    1636:	08 95       	ret

00001638 <crc>:
uint8_t crc (uint8_t const *arr, uint8_t size) {

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	uint8_t i;
	for (i = 0; i < size; ++i) {
    1638:	66 23       	and	r22, r22
    163a:	b9 f0       	breq	.+46     	; 0x166a <crc+0x32>
    163c:	fc 01       	movw	r30, r24
    163e:	61 50       	subi	r22, 0x01	; 1
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	6f 5f       	subi	r22, 0xFF	; 255
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	68 0f       	add	r22, r24
    1648:	79 1f       	adc	r23, r25
    164a:	80 e0       	ldi	r24, 0x00	; 0

		for (j = 0; j < 8; ++j) {
			uint8_t sum = (value ^ data) & (uint8_t)0x01;
			value >>= 1;
			if (sum)
				value ^= POLYNOMIAL;
    164c:	4c e8       	ldi	r20, 0x8C	; 140

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	uint8_t i;
	for (i = 0; i < size; ++i) {
		uint8_t data = arr[i];
    164e:	21 91       	ld	r18, Z+
    1650:	98 e0       	ldi	r25, 0x08	; 8
		uint8_t j;

		for (j = 0; j < 8; ++j) {
			uint8_t sum = (value ^ data) & (uint8_t)0x01;
    1652:	38 2f       	mov	r19, r24
    1654:	32 27       	eor	r19, r18
			value >>= 1;
    1656:	86 95       	lsr	r24
			if (sum)
    1658:	30 fd       	sbrc	r19, 0
				value ^= POLYNOMIAL;
    165a:	84 27       	eor	r24, r20
			data >>= 1;
    165c:	26 95       	lsr	r18
    165e:	91 50       	subi	r25, 0x01	; 1
	uint8_t i;
	for (i = 0; i < size; ++i) {
		uint8_t data = arr[i];
		uint8_t j;

		for (j = 0; j < 8; ++j) {
    1660:	c1 f7       	brne	.-16     	; 0x1652 <crc+0x1a>
uint8_t crc (uint8_t const *arr, uint8_t size) {

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	uint8_t i;
	for (i = 0; i < size; ++i) {
    1662:	e6 17       	cp	r30, r22
    1664:	f7 07       	cpc	r31, r23
    1666:	99 f7       	brne	.-26     	; 0x164e <crc+0x16>
    1668:	08 95       	ret
 * @return  Returns the CRC code for the given packet.
 */
uint8_t crc (uint8_t const *arr, uint8_t size) {

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
    166a:	80 e0       	ldi	r24, 0x00	; 0
		}

	}

	return value;
}
    166c:	08 95       	ret

0000166e <FT_Init>:
		if(handle->receive_buf.size <= MAX_PCKT_SZ)
			handle->receive_buf.size = handle->receive_buf.size + 1;
	}
	// parse/extract messages from local buffer and update local array
	return parse(&handle->receive_buf, handle->array, handle->flags, ARRAY_SZ, handle->address);
}
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	ec 01       	movw	r28, r24
    1678:	fc 01       	movw	r30, r24
    167a:	61 93       	st	Z+, r22
    167c:	49 96       	adiw	r24, 0x19	; 25
    167e:	dc 01       	movw	r26, r24
    1680:	11 92       	st	Z+, r1
    1682:	11 92       	st	Z+, r1
    1684:	1d 92       	st	X+, r1
    1686:	e8 17       	cp	r30, r24
    1688:	f9 07       	cpc	r31, r25
    168a:	d1 f7       	brne	.-12     	; 0x1680 <FT_Init+0x12>
    168c:	fe 01       	movw	r30, r28
    168e:	e7 55       	subi	r30, 0x57	; 87
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	51 83       	std	Z+1, r21	; 0x01
    1694:	40 83       	st	Z, r20
    1696:	32 96       	adiw	r30, 0x02	; 2
    1698:	31 83       	std	Z+1, r19	; 0x01
    169a:	20 83       	st	Z, r18
    169c:	32 96       	adiw	r30, 0x02	; 2
    169e:	11 83       	std	Z+1, r17	; 0x01
    16a0:	00 83       	st	Z, r16
    16a2:	ce 01       	movw	r24, r28
    16a4:	85 96       	adiw	r24, 0x25	; 37
    16a6:	7f df       	rcall	.-258    	; 0x15a6 <Buffer_init>
    16a8:	ce 01       	movw	r24, r28
    16aa:	89 59       	subi	r24, 0x99	; 153
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	7b df       	rcall	.-266    	; 0x15a6 <Buffer_init>
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <FT_Read>:
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	fc 01       	movw	r30, r24
    16be:	e6 0f       	add	r30, r22
    16c0:	f7 1f       	adc	r31, r23
    16c2:	11 8e       	std	Z+25, r1	; 0x19
    16c4:	66 0f       	add	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	fc 01       	movw	r30, r24
    16ca:	e6 0f       	add	r30, r22
    16cc:	f7 1f       	adc	r31, r23
    16ce:	81 81       	ldd	r24, Z+1	; 0x01
    16d0:	92 81       	ldd	r25, Z+2	; 0x02
    16d2:	08 95       	ret

000016d4 <FT_Modified>:
    16d4:	fc 01       	movw	r30, r24
    16d6:	e6 0f       	add	r30, r22
    16d8:	f1 1d       	adc	r31, r1
    16da:	81 8d       	ldd	r24, Z+25	; 0x19
    16dc:	11 8e       	std	Z+25, r1	; 0x19
    16de:	08 95       	ret

000016e0 <FT_ToSend>:


void FT_ToSend (FT_t * handle, uint8_t index, int16_t data)
{
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	04 2f       	mov	r16, r20
    16ea:	15 2f       	mov	r17, r21
	uint16_t combined = (uint16_t)data;
	uint8_t msb = (combined >> 8);
	uint8_t lsb = combined & 0x00FF;
	Buffer_push(&handle->transmit_buf, index);
    16ec:	ec 01       	movw	r28, r24
    16ee:	c9 59       	subi	r28, 0x99	; 153
    16f0:	df 4f       	sbci	r29, 0xFF	; 255
    16f2:	ce 01       	movw	r24, r28
    16f4:	66 df       	rcall	.-308    	; 0x15c2 <Buffer_push>
	Buffer_push(&handle->transmit_buf, lsb);
    16f6:	60 2f       	mov	r22, r16
    16f8:	ce 01       	movw	r24, r28
    16fa:	63 df       	rcall	.-314    	; 0x15c2 <Buffer_push>
	Buffer_push(&handle->transmit_buf, msb);
    16fc:	61 2f       	mov	r22, r17
    16fe:	ce 01       	movw	r24, r28
    1700:	60 df       	rcall	.-320    	; 0x15c2 <Buffer_push>

}
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	08 95       	ret

0000170c <FT_Send>:

void FT_Send (FT_t * handle, uint8_t address)
{
    170c:	6f 92       	push	r6
    170e:	7f 92       	push	r7
    1710:	8f 92       	push	r8
    1712:	9f 92       	push	r9
    1714:	af 92       	push	r10
    1716:	bf 92       	push	r11
    1718:	cf 92       	push	r12
    171a:	df 92       	push	r13
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	ec 97       	sbiw	r28, 0x3c	; 60
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	4c 01       	movw	r8, r24
    173a:	d6 2e       	mov	r13, r22
	size_t payload_sz = Buffer_size(&handle->transmit_buf);
    173c:	7c 01       	movw	r14, r24
    173e:	87 e6       	ldi	r24, 0x67	; 103
    1740:	e8 0e       	add	r14, r24
    1742:	f1 1c       	adc	r15, r1
    1744:	c7 01       	movw	r24, r14
    1746:	39 df       	rcall	.-398    	; 0x15ba <Buffer_size>
    1748:	3c 01       	movw	r6, r24

	// abandon send if there is no payload
	if (payload_sz == 0)
    174a:	89 2b       	or	r24, r25
    174c:	09 f4       	brne	.+2      	; 0x1750 <FT_Send+0x44>
    174e:	3e c0       	rjmp	.+124    	; 0x17cc <FT_Send+0xc0>
		return;

	// populate header
	handle->put(0x06);
    1750:	84 01       	movw	r16, r8
    1752:	07 55       	subi	r16, 0x57	; 87
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	d8 01       	movw	r26, r16
    1758:	ed 91       	ld	r30, X+
    175a:	fc 91       	ld	r31, X
    175c:	86 e0       	ldi	r24, 0x06	; 6
    175e:	09 95       	icall
	handle->put(0x85);
    1760:	d8 01       	movw	r26, r16
    1762:	ed 91       	ld	r30, X+
    1764:	fc 91       	ld	r31, X
    1766:	85 e8       	ldi	r24, 0x85	; 133
    1768:	09 95       	icall
	handle->put(address);
    176a:	d8 01       	movw	r26, r16
    176c:	ed 91       	ld	r30, X+
    176e:	fc 91       	ld	r31, X
    1770:	8d 2d       	mov	r24, r13
    1772:	09 95       	icall
	handle->put(handle->address);
    1774:	d8 01       	movw	r26, r16
    1776:	ed 91       	ld	r30, X+
    1778:	fc 91       	ld	r31, X
    177a:	d4 01       	movw	r26, r8
    177c:	8c 91       	ld	r24, X
    177e:	09 95       	icall
	handle->put(payload_sz);
    1780:	d8 01       	movw	r26, r16
    1782:	ed 91       	ld	r30, X+
    1784:	fc 91       	ld	r31, X
    1786:	86 2d       	mov	r24, r6
    1788:	09 95       	icall
    178a:	8e 01       	movw	r16, r28
    178c:	0f 5f       	subi	r16, 0xFF	; 255
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	58 01       	movw	r10, r16
    1792:	a6 0c       	add	r10, r6
    1794:	b7 1c       	adc	r11, r7
	unsigned int i;
	for (i = 0; i < payload_sz; ++i)
	{
		uint8_t next_byte = Buffer_pop(&handle->transmit_buf);
		payload[i] = next_byte;
		handle->put(next_byte);
    1796:	64 01       	movw	r12, r8
    1798:	b9 ea       	ldi	r27, 0xA9	; 169
    179a:	cb 0e       	add	r12, r27
    179c:	d1 1c       	adc	r13, r1
	// add the payload
	uint8_t payload [MAX_PCKT_SZ];
	unsigned int i;
	for (i = 0; i < payload_sz; ++i)
	{
		uint8_t next_byte = Buffer_pop(&handle->transmit_buf);
    179e:	c7 01       	movw	r24, r14
    17a0:	34 df       	rcall	.-408    	; 0x160a <Buffer_pop>
		payload[i] = next_byte;
    17a2:	f8 01       	movw	r30, r16
    17a4:	81 93       	st	Z+, r24
    17a6:	8f 01       	movw	r16, r30
		handle->put(next_byte);
    17a8:	d6 01       	movw	r26, r12
    17aa:	ed 91       	ld	r30, X+
    17ac:	fc 91       	ld	r31, X
    17ae:	09 95       	icall
	handle->put(payload_sz);

	// add the payload
	uint8_t payload [MAX_PCKT_SZ];
	unsigned int i;
	for (i = 0; i < payload_sz; ++i)
    17b0:	0a 15       	cp	r16, r10
    17b2:	1b 05       	cpc	r17, r11
    17b4:	a1 f7       	brne	.-24     	; 0x179e <FT_Send+0x92>
		payload[i] = next_byte;
		handle->put(next_byte);
	}

	// add the CRC code
	handle->put(crc(payload, payload_sz));
    17b6:	f4 01       	movw	r30, r8
    17b8:	e7 55       	subi	r30, 0x57	; 87
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	00 81       	ld	r16, Z
    17be:	11 81       	ldd	r17, Z+1	; 0x01
    17c0:	66 2d       	mov	r22, r6
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	38 df       	rcall	.-400    	; 0x1638 <crc>
    17c8:	f8 01       	movw	r30, r16
    17ca:	09 95       	icall

}
    17cc:	ec 96       	adiw	r28, 0x3c	; 60
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	9f 90       	pop	r9
    17ee:	8f 90       	pop	r8
    17f0:	7f 90       	pop	r7
    17f2:	6f 90       	pop	r6
    17f4:	08 95       	ret

000017f6 <initialize>:
extern timer_t ledTimer,  checkCANTimer;

//#define WATCHDOG_RESET

void initialize(void)
{
    17f6:	cf 93       	push	r28
#ifdef WATCHDOG_RESET
	WDTCR= (1<<3)| (0b00000111);    //Enable watchdog with prescaler 111
#endif
	//stdout = &mystdout;
	//Startup the USARTs
	USART1_Init(115200); //control box
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	72 ec       	ldi	r23, 0xC2	; 194
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 4c 01 	call	0x298	; 0x298 <USART1_Init>
	USART0_Init(115200); //beacon
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	72 ec       	ldi	r23, 0xC2	; 194
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART0_Init>
//Initialize the timer0 and timer systems
	initTimer0();
    1810:	62 d2       	rcall	.+1220   	; 0x1cd6 <initTimer0>

	setupCommsTimers();
    1812:	7d de       	rcall	.-774    	; 0x150e <setupCommsTimers>
    1814:	8f e7       	ldi	r24, 0x7F	; 127


	//Setup the I/O ports
	PORTA = 0b01111111;
    1816:	82 b9       	out	0x02, r24	; 2
    1818:	88 ef       	ldi	r24, 0xF8	; 248
	PORTF = 0b11111000;
    181a:	81 bb       	out	0x11, r24	; 17
    181c:	9f ef       	ldi	r25, 0xFF	; 255
	DDRA  = 0b11111111; //0-6 are outputs, 7 is an input (jumper for competition mode) //(Currently an output for debug)
    181e:	91 b9       	out	0x01, r25	; 1
	DDRF  = 0b11111000; //3-7 are outputs
    1820:	80 bb       	out	0x10, r24	; 16
#ifdef WATCHDOG_RESET
	//Clear watchdog
	WDTCR = 0b00011000;
	WDTCR = 0b00010000;
#endif
	initLED();
    1822:	58 d0       	rcall	.+176    	; 0x18d4 <initLED>
    1824:	78 94       	sei
	sei();
    1826:	c1 e0       	ldi	r28, 0x01	; 1

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
	{
		setLED(i,ON);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	8c 2f       	mov	r24, r28
    182c:	6a d0       	rcall	.+212    	; 0x1902 <setLED>
    182e:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1830:	80 e7       	ldi	r24, 0x70	; 112
    1832:	92 e0       	ldi	r25, 0x02	; 2
    1834:	21 50       	subi	r18, 0x01	; 1
    1836:	80 40       	sbci	r24, 0x00	; 0
    1838:	90 40       	sbci	r25, 0x00	; 0
    183a:	e1 f7       	brne	.-8      	; 0x1834 <initialize+0x3e>
    183c:	00 c0       	rjmp	.+0      	; 0x183e <initialize+0x48>
    183e:	00 00       	nop
    1840:	cf 5f       	subi	r28, 0xFF	; 255
    1842:	cd 30       	cpi	r28, 0x0D	; 13
	WDTCR = 0b00010000;
#endif
	initLED();
	sei();

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
    1844:	89 f7       	brne	.-30     	; 0x1828 <initialize+0x32>
    1846:	2f ef       	ldi	r18, 0xFF	; 255
    1848:	83 ed       	ldi	r24, 0xD3	; 211
    184a:	90 e3       	ldi	r25, 0x30	; 48
    184c:	21 50       	subi	r18, 0x01	; 1
    184e:	80 40       	sbci	r24, 0x00	; 0
    1850:	90 40       	sbci	r25, 0x00	; 0
    1852:	e1 f7       	brne	.-8      	; 0x184c <initialize+0x56>
    1854:	00 c0       	rjmp	.+0      	; 0x1856 <initialize+0x60>
    1856:	00 00       	nop
    1858:	c1 e0       	ldi	r28, 0x01	; 1

	_delay_ms(1000);

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
	{
		setLED(i,OFF);
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	8c 2f       	mov	r24, r28
    185e:	51 d0       	rcall	.+162    	; 0x1902 <setLED>
    1860:	2f ef       	ldi	r18, 0xFF	; 255
    1862:	80 e7       	ldi	r24, 0x70	; 112
    1864:	92 e0       	ldi	r25, 0x02	; 2
    1866:	21 50       	subi	r18, 0x01	; 1
    1868:	80 40       	sbci	r24, 0x00	; 0
    186a:	90 40       	sbci	r25, 0x00	; 0
    186c:	e1 f7       	brne	.-8      	; 0x1866 <initialize+0x70>
    186e:	00 c0       	rjmp	.+0      	; 0x1870 <initialize+0x7a>
    1870:	00 00       	nop
		_delay_ms(50);
	}

	_delay_ms(1000);

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
    1872:	cf 5f       	subi	r28, 0xFF	; 255
    1874:	cd 30       	cpi	r28, 0x0D	; 13
	}
#ifdef WATCHDOG_RESET
	WDTCR= (1<<3)| (0b00000111);    //Enable watchdog with prescaler 111
#endif
	//Init the CAN here
	can_init();
    1876:	89 f7       	brne	.-30     	; 0x185a <initialize+0x64>
    1878:	41 d9       	rcall	.-3454   	; 0xafc <can_init>

	//Start communciations handlers
	initCANFastTransfer();
    187a:	3e dc       	rcall	.-1924   	; 0x10f8 <initCANFastTransfer>
    187c:	cf 91       	pop	r28

#ifdef WATCHDOG_RESET
	WDTCR = 0b00011000;
	WDTCR = 0b00010000;
#endif
    187e:	08 95       	ret

00001880 <SetNeoPixRGB>:
    1880:	cf 93       	push	r28
			SetNeoPixRGB(cRGB_2.r, cRGB_2.g, cRGB_2.b);
			ToggleVal = true;
		}
	}

}
    1882:	df 93       	push	r29
    1884:	e4 e3       	ldi	r30, 0x34	; 52
    1886:	fc e0       	ldi	r31, 0x0C	; 12
    1888:	81 83       	std	Z+1, r24	; 0x01
    188a:	60 83       	st	Z, r22
    188c:	42 83       	std	Z+2, r20	; 0x02
    188e:	c0 e0       	ldi	r28, 0x00	; 0
    1890:	d0 e0       	ldi	r29, 0x00	; 0
    1892:	45 e0       	ldi	r20, 0x05	; 5
    1894:	be 01       	movw	r22, r28
    1896:	84 e3       	ldi	r24, 0x34	; 52
    1898:	9c e0       	ldi	r25, 0x0C	; 12
    189a:	98 d0       	rcall	.+304    	; 0x19cc <ws2812_setleds>
    189c:	46 e0       	ldi	r20, 0x06	; 6
    189e:	be 01       	movw	r22, r28
    18a0:	84 e3       	ldi	r24, 0x34	; 52
    18a2:	9c e0       	ldi	r25, 0x0C	; 12
    18a4:	93 d0       	rcall	.+294    	; 0x19cc <ws2812_setleds>
    18a6:	21 96       	adiw	r28, 0x01	; 1
    18a8:	c9 30       	cpi	r28, 0x09	; 9
    18aa:	d1 05       	cpc	r29, r1
    18ac:	91 f7       	brne	.-28     	; 0x1892 <SetNeoPixRGB+0x12>
    18ae:	c1 e0       	ldi	r28, 0x01	; 1
    18b0:	d0 e0       	ldi	r29, 0x00	; 0
    18b2:	43 e0       	ldi	r20, 0x03	; 3
    18b4:	be 01       	movw	r22, r28
    18b6:	84 e3       	ldi	r24, 0x34	; 52
    18b8:	9c e0       	ldi	r25, 0x0C	; 12
    18ba:	88 d0       	rcall	.+272    	; 0x19cc <ws2812_setleds>
    18bc:	44 e0       	ldi	r20, 0x04	; 4
    18be:	be 01       	movw	r22, r28
    18c0:	84 e3       	ldi	r24, 0x34	; 52
    18c2:	9c e0       	ldi	r25, 0x0C	; 12
    18c4:	83 d0       	rcall	.+262    	; 0x19cc <ws2812_setleds>
    18c6:	21 96       	adiw	r28, 0x01	; 1
    18c8:	c9 31       	cpi	r28, 0x19	; 25
    18ca:	d1 05       	cpc	r29, r1
    18cc:	91 f7       	brne	.-28     	; 0x18b2 <SetNeoPixRGB+0x32>
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <initLED>:
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	08 ee       	ldi	r16, 0xE8	; 232
    18da:	13 e0       	ldi	r17, 0x03	; 3
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	8c e0       	ldi	r24, 0x0C	; 12
    18ea:	9c e0       	ldi	r25, 0x0C	; 12
    18ec:	54 d1       	rcall	.+680    	; 0x1b96 <setTimerInterval>
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	c2 df       	rcall	.-124    	; 0x1880 <SetNeoPixRGB>
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	08 95       	ret

00001902 <setLED>:
void setLED(LEDs_ENUMED_t ledNumber, bool state)
{
    1902:	96 2f       	mov	r25, r22
	int ledToSwitch = 0;
	//HIGH SETS
	if(!state)
    1904:	61 11       	cpse	r22, r1
    1906:	1a c0       	rjmp	.+52     	; 0x193c <setLED+0x3a>
	{
		switch(ledNumber)
    1908:	48 2f       	mov	r20, r24
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	fa 01       	movw	r30, r20
    190e:	31 97       	sbiw	r30, 0x01	; 1
    1910:	ec 30       	cpi	r30, 0x0C	; 12
    1912:	f1 05       	cpc	r31, r1
    1914:	88 f5       	brcc	.+98     	; 0x1978 <setLED+0x76>
    1916:	e6 5b       	subi	r30, 0xB6	; 182
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	22 c2       	rjmp	.+1092   	; 0x1d60 <__tablejump2__>
			break;
		case LED7:
			ledToSwitch=LED7_P_HIGH;
			break;
		case LED8:
			ledToSwitch=LED8_P_HIGH;
    191c:	88 e0       	ldi	r24, 0x08	; 8
    191e:	40 c0       	rjmp	.+128    	; 0x19a0 <setLED+0x9e>
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_HIGH;
			break;
		case LED2:
			ledToSwitch=LED2_P_HIGH;
    1920:	80 e4       	ldi	r24, 0x40	; 64
    1922:	34 c0       	rjmp	.+104    	; 0x198c <setLED+0x8a>
			ledToSwitch=LED9_P_HIGH;
			break;

		//LEDs on PORTA
		case LED3:
			ledToSwitch=LED3_P_HIGH;
    1924:	81 e0       	ldi	r24, 0x01	; 1
			break;
    1926:	3c c0       	rjmp	.+120    	; 0x19a0 <setLED+0x9e>
		case LED4:
			ledToSwitch=LED4_P_HIGH;
    1928:	84 e0       	ldi	r24, 0x04	; 4
			break;
    192a:	3a c0       	rjmp	.+116    	; 0x19a0 <setLED+0x9e>
		case LED5:
			ledToSwitch=LED5_P_HIGH;
    192c:	80 e1       	ldi	r24, 0x10	; 16
			break;
    192e:	38 c0       	rjmp	.+112    	; 0x19a0 <setLED+0x9e>
		case LED6:
			ledToSwitch=LED6_P_HIGH;
    1930:	80 e4       	ldi	r24, 0x40	; 64
			break;
    1932:	36 c0       	rjmp	.+108    	; 0x19a0 <setLED+0x9e>
		case LED10:
			ledToSwitch=LED10_P_HIGH;
			break;
		case LED11:
			ledToSwitch=LED11_P_HIGH;
    1934:	80 e2       	ldi	r24, 0x20	; 32
			break;
    1936:	2a c0       	rjmp	.+84     	; 0x198c <setLED+0x8a>
		case LED12:
			ledToSwitch=LED12_P_HIGH;
    1938:	88 e0       	ldi	r24, 0x08	; 8
			break;
    193a:	28 c0       	rjmp	.+80     	; 0x198c <setLED+0x8a>
#endif
		}
	}
	else
	{
		switch(ledNumber)
    193c:	48 2f       	mov	r20, r24
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	fa 01       	movw	r30, r20
    1942:	31 97       	sbiw	r30, 0x01	; 1
    1944:	ec 30       	cpi	r30, 0x0C	; 12
    1946:	f1 05       	cpc	r31, r1
    1948:	b8 f4       	brcc	.+46     	; 0x1978 <setLED+0x76>
    194a:	ea 5a       	subi	r30, 0xAA	; 170
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	08 c2       	rjmp	.+1040   	; 0x1d60 <__tablejump2__>
			break;
		case LED7:
			ledToSwitch=LED7_P_LOW;
			break;
		case LED8:
			ledToSwitch=LED8_P_LOW;
    1950:	87 ef       	ldi	r24, 0xF7	; 247
    1952:	26 c0       	rjmp	.+76     	; 0x19a0 <setLED+0x9e>
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_LOW;
			break;
		case LED2:
			ledToSwitch=LED2_P_LOW;
    1954:	8f eb       	ldi	r24, 0xBF	; 191
    1956:	1a c0       	rjmp	.+52     	; 0x198c <setLED+0x8a>
			break;
		case LED8:
			ledToSwitch=LED8_P_LOW;
			break;
		case LED9:
			ledToSwitch=LED9_P_LOW;
    1958:	8d ef       	ldi	r24, 0xFD	; 253
			break;
    195a:	22 c0       	rjmp	.+68     	; 0x19a0 <setLED+0x9e>

		//LEDs on PORTA
		case LED3:
			ledToSwitch=LED3_P_LOW;
    195c:	8e ef       	ldi	r24, 0xFE	; 254
			break;
    195e:	20 c0       	rjmp	.+64     	; 0x19a0 <setLED+0x9e>
		case LED4:
			ledToSwitch=LED4_P_LOW;
    1960:	8b ef       	ldi	r24, 0xFB	; 251
			break;
    1962:	1e c0       	rjmp	.+60     	; 0x19a0 <setLED+0x9e>
		case LED5:
			ledToSwitch=LED5_P_LOW;
    1964:	8f ee       	ldi	r24, 0xEF	; 239
			break;
    1966:	1c c0       	rjmp	.+56     	; 0x19a0 <setLED+0x9e>
		case LED6:
			ledToSwitch=LED6_P_LOW;
    1968:	8f eb       	ldi	r24, 0xBF	; 191
			break;
    196a:	1a c0       	rjmp	.+52     	; 0x19a0 <setLED+0x9e>
		case LED10:
			ledToSwitch=LED10_P_LOW;
    196c:	8f e7       	ldi	r24, 0x7F	; 127
			break;
    196e:	0e c0       	rjmp	.+28     	; 0x198c <setLED+0x8a>
		case LED11:
			ledToSwitch=LED11_P_LOW;
    1970:	8f ed       	ldi	r24, 0xDF	; 223
			break;
    1972:	0c c0       	rjmp	.+24     	; 0x198c <setLED+0x8a>
		case LED12:
			ledToSwitch=LED12_P_LOW;
    1974:	87 ef       	ldi	r24, 0xF7	; 247
			break;
    1976:	0a c0       	rjmp	.+20     	; 0x198c <setLED+0x8a>


	}
#ifdef NEW_MAIN
	unsigned int portRead;
	switch(ledNumber)
    1978:	8a 30       	cpi	r24, 0x0A	; 10
    197a:	28 f4       	brcc	.+10     	; 0x1986 <setLED+0x84>
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	78 f4       	brcc	.+30     	; 0x199e <setLED+0x9c>
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	18 f1       	brcs	.+70     	; 0x19ca <setLED+0xc8>
    1984:	02 c0       	rjmp	.+4      	; 0x198a <setLED+0x88>
    1986:	8d 30       	cpi	r24, 0x0D	; 13
    1988:	00 f5       	brcc	.+64     	; 0x19ca <setLED+0xc8>
    198a:	80 e0       	ldi	r24, 0x00	; 0
	case LED2:
	case LED10:
	case LED11:
	case LED12:

		portRead= PINF;
    198c:	2f b1       	in	r18, 0x0f	; 15
		//if you want the LED off
		if(!state)
    198e:	91 11       	cpse	r25, r1
    1990:	03 c0       	rjmp	.+6      	; 0x1998 <setLED+0x96>
		{
			//Turn it high (OFF)
			PORTF = portRead | (ledToSwitch);
    1992:	82 2b       	or	r24, r18
    1994:	81 bb       	out	0x11, r24	; 17
    1996:	08 95       	ret
		}
		else
		{
			//Turn it low (ON)
			PORTF = portRead & (ledToSwitch);
    1998:	82 23       	and	r24, r18
    199a:	81 bb       	out	0x11, r24	; 17
    199c:	08 95       	ret


	}
#ifdef NEW_MAIN
	unsigned int portRead;
	switch(ledNumber)
    199e:	80 e0       	ldi	r24, 0x00	; 0
	case LED5:
	case LED6:
	case LED7:
	case LED8:
	case LED9:
		portRead= PINA;
    19a0:	20 b1       	in	r18, 0x00	; 0
		//If you want the LED off
		if(!state)
    19a2:	91 11       	cpse	r25, r1
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <setLED+0xaa>
		{
			//Turn the port high (OFF)
			PORTA = portRead | (ledToSwitch);
    19a6:	82 2b       	or	r24, r18
    19a8:	82 b9       	out	0x02, r24	; 2
    19aa:	08 95       	ret
		}
		else
		{
			//Turn the port low (ON)
			PORTA = portRead & (ledToSwitch);
    19ac:	82 23       	and	r24, r18
    19ae:	82 b9       	out	0x02, r24	; 2
	{
		PORTA= PINA & (ledToSwitch);
	}
#endif

}
    19b0:	08 95       	ret
		switch(ledNumber)
		{
#ifdef NEW_MAIN
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_HIGH;
    19b2:	80 e1       	ldi	r24, 0x10	; 16
    19b4:	eb cf       	rjmp	.-42     	; 0x198c <setLED+0x8a>
			break;
		case LED6:
			ledToSwitch=LED6_P_HIGH;
			break;
		case LED10:
			ledToSwitch=LED10_P_HIGH;
    19b6:	80 e8       	ldi	r24, 0x80	; 128
    19b8:	e9 cf       	rjmp	.-46     	; 0x198c <setLED+0x8a>
		switch(ledNumber)
		{
#ifdef NEW_MAIN
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_LOW;
    19ba:	8f ee       	ldi	r24, 0xEF	; 239
    19bc:	e7 cf       	rjmp	.-50     	; 0x198c <setLED+0x8a>
			break;
		case LED2:
			ledToSwitch=LED2_P_HIGH;
			break;
		case LED7:
			ledToSwitch=LED7_P_HIGH;
    19be:	80 e2       	ldi	r24, 0x20	; 32
    19c0:	ef cf       	rjmp	.-34     	; 0x19a0 <setLED+0x9e>
			break;
		case LED8:
			ledToSwitch=LED8_P_HIGH;
			break;
		case LED9:
			ledToSwitch=LED9_P_HIGH;
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	ed cf       	rjmp	.-38     	; 0x19a0 <setLED+0x9e>
			break;
		case LED2:
			ledToSwitch=LED2_P_LOW;
			break;
		case LED7:
			ledToSwitch=LED7_P_LOW;
    19c6:	8f ed       	ldi	r24, 0xDF	; 223
    19c8:	eb cf       	rjmp	.-42     	; 0x19a0 <setLED+0x9e>
    19ca:	08 95       	ret

000019cc <ws2812_setleds>:



// Setleds for standard RGB
void ws2812_setleds( cRGB_t *ledarray, uint16_t leds, uint8_t pin)
{
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
	ws2812_setleds_pin(ledarray,leds, _BV(pin));
    19d2:	21 e0       	ldi	r18, 0x01	; 1
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <ws2812_setleds+0x10>
    19d8:	22 0f       	add	r18, r18
    19da:	33 1f       	adc	r19, r19
    19dc:	4a 95       	dec	r20
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <ws2812_setleds+0xc>

}

void inline ws2812_setleds_pin(cRGB_t *ledarray, uint16_t leds, uint8_t pinmask)
{
	ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
    19e0:	fb 01       	movw	r30, r22
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	e6 0f       	add	r30, r22
    19e8:	f7 1f       	adc	r31, r23
uint8_t *homeptr;
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
	uint8_t curbyte,ctr,masklo;
	uint8_t sreg_prev;
	tmpData = (data+3);
    19ea:	ac 01       	movw	r20, r24
    19ec:	4d 5f       	subi	r20, 0xFD	; 253
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255
    19f0:	50 93 3a 0c 	sts	0x0C3A, r21	; 0x800c3a <tmpData+0x1>
    19f4:	40 93 39 0c 	sts	0x0C39, r20	; 0x800c39 <tmpData>
	homeptr = data;
    19f8:	90 93 3c 0c 	sts	0x0C3C, r25	; 0x800c3c <homeptr+0x1>
    19fc:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <homeptr>
	ws2812_DDRREG |= maskhi; // Enable output
    1a00:	37 b1       	in	r19, 0x07	; 7
    1a02:	32 2b       	or	r19, r18
    1a04:	37 b9       	out	0x07, r19	; 7

	masklo  =~maskhi&ws2812_PORTREG;
    1a06:	38 b1       	in	r19, 0x08	; 8
    1a08:	72 2f       	mov	r23, r18
    1a0a:	70 95       	com	r23
    1a0c:	73 23       	and	r23, r19
	maskhi |=        ws2812_PORTREG;
    1a0e:	58 b1       	in	r21, 0x08	; 8
    1a10:	52 2b       	or	r21, r18

	sreg_prev=SREG;
    1a12:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1a14:	f8 94       	cli

	while (datlen--) {
    1a16:	9f 01       	movw	r18, r30
    1a18:	21 50       	subi	r18, 0x01	; 1
    1a1a:	31 09       	sbc	r19, r1
    1a1c:	ef 2b       	or	r30, r31
    1a1e:	21 f1       	breq	.+72     	; 0x1a68 <loop98+0x22>
		if(data == tmpData)
    1a20:	a0 91 39 0c 	lds	r26, 0x0C39	; 0x800c39 <tmpData>
    1a24:	b0 91 3a 0c 	lds	r27, 0x0C3A	; 0x800c3a <tmpData+0x1>
			data = homeptr;
    1a28:	d0 91 3b 0c 	lds	r29, 0x0C3B	; 0x800c3b <homeptr>
    1a2c:	c0 91 3c 0c 	lds	r28, 0x0C3C	; 0x800c3c <homeptr+0x1>

	sreg_prev=SREG;
	cli();

	while (datlen--) {
		if(data == tmpData)
    1a30:	a8 17       	cp	r26, r24
    1a32:	b9 07       	cpc	r27, r25
    1a34:	19 f4       	brne	.+6      	; 0x1a3c <ws2812_setleds+0x70>
			data = homeptr;
    1a36:	ed 2f       	mov	r30, r29
    1a38:	fc 2f       	mov	r31, r28
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <ws2812_setleds+0x72>

	sreg_prev=SREG;
	cli();

	while (datlen--) {
		if(data == tmpData)
    1a3c:	fc 01       	movw	r30, r24
			data = homeptr;
		curbyte=*data++;
    1a3e:	cf 01       	movw	r24, r30
    1a40:	01 96       	adiw	r24, 0x01	; 1

		asm volatile(
    1a42:	40 81       	ld	r20, Z
    1a44:	68 e0       	ldi	r22, 0x08	; 8

00001a46 <loop98>:
    1a46:	58 b9       	out	0x08, r21	; 8
    1a48:	00 00       	nop
    1a4a:	00 c0       	rjmp	.+0      	; 0x1a4c <loop98+0x6>
    1a4c:	47 ff       	sbrs	r20, 7
    1a4e:	78 b9       	out	0x08, r23	; 8
    1a50:	44 0f       	add	r20, r20
    1a52:	00 00       	nop
    1a54:	00 c0       	rjmp	.+0      	; 0x1a56 <loop98+0x10>
    1a56:	00 c0       	rjmp	.+0      	; 0x1a58 <loop98+0x12>
    1a58:	00 c0       	rjmp	.+0      	; 0x1a5a <loop98+0x14>
    1a5a:	78 b9       	out	0x08, r23	; 8
    1a5c:	00 c0       	rjmp	.+0      	; 0x1a5e <loop98+0x18>
    1a5e:	6a 95       	dec	r22
    1a60:	91 f7       	brne	.-28     	; 0x1a46 <loop98>
	maskhi |=        ws2812_PORTREG;

	sreg_prev=SREG;
	cli();

	while (datlen--) {
    1a62:	21 50       	subi	r18, 0x01	; 1
    1a64:	31 09       	sbc	r19, r1
    1a66:	20 f7       	brcc	.-56     	; 0x1a30 <ws2812_setleds+0x64>
			: "=&d" (ctr)
			: "r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
		);
	}

	SREG=sreg_prev;
    1a68:	1f bf       	out	0x3f, r17	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a6a:	8f ea       	ldi	r24, 0xAF	; 175
    1a6c:	94 e0       	ldi	r25, 0x04	; 4
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <loop98+0x28>
    1a72:	00 c0       	rjmp	.+0      	; 0x1a74 <loop98+0x2e>
    1a74:	00 00       	nop
// Setleds for standard RGB
void ws2812_setleds( cRGB_t *ledarray, uint16_t leds, uint8_t pin)
{
	ws2812_setleds_pin(ledarray,leds, _BV(pin));

}
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	08 95       	ret

00001a7e <main>:
bool flipFlop= true;

int main(void)
{

	initialize();
    1a7e:	bb de       	rcall	.-650    	; 0x17f6 <initialize>

	initCOMs();
    1a80:	fe db       	rcall	.-2052   	; 0x127e <initCOMs>
    1a82:	04 e6       	ldi	r16, 0x64	; 100



	setTimerInterval(&checkCANTimer,100);
    1a84:	10 e0       	ldi	r17, 0x00	; 0
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	86 ee       	ldi	r24, 0xE6	; 230
    1a94:	9b e0       	ldi	r25, 0x0B	; 11
    1a96:	7f d0       	rcall	.+254    	; 0x1b96 <setTimerInterval>
    1a98:	40 e0       	ldi	r20, 0x00	; 0

	SetNeoPixRGB(100,0,0);
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	84 e6       	ldi	r24, 0x64	; 100
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	ed de       	rcall	.-550    	; 0x1880 <SetNeoPixRGB>

	while(1)
	{

		//updateComs2();
		CommunicationsHandle();
    1aa6:	90 dc       	rcall	.-1760   	; 0x13c8 <CommunicationsHandle>
    1aa8:	fe cf       	rjmp	.-4      	; 0x1aa6 <main+0x28>

00001aaa <getSystemStatus>:
    1aaa:	ef 92       	push	r14
	uint16_t status = getSystemStatus() & (0xFFFF >> 16 - GLOBAL_DEVICES);
	/* Return true if the required statuses are valid */
	return ((status & _mask) == status);
}
uint16_t getSystemStatus()
{
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	07 e0       	ldi	r16, 0x07	; 7
    1ab8:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	uint16_t isReady = 0x00;
    1aba:	e1 2c       	mov	r14, r1
    1abc:	f1 2c       	mov	r15, r1
	for(i = 1; i<= GLOBAL_DEVICES+1; i++)
    1abe:	c1 e0       	ldi	r28, 0x01	; 1
    1ac0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(getGBL_CANFTFlag(getGBL_DEVICE_STATUS(i)))
    1ac2:	b8 01       	movw	r22, r16
    1ac4:	83 ef       	ldi	r24, 0xF3	; 243
    1ac6:	95 e0       	ldi	r25, 0x05	; 5
    1ac8:	77 d8       	rcall	.-3858   	; 0xbb8 <getCANFT_Flag>
    1aca:	88 23       	and	r24, r24
    1acc:	69 f0       	breq	.+26     	; 0x1ae8 <getSystemStatus+0x3e>
		{
			/* if there is any device that has a '0' in the first
			   bit of  their status word isReady will become false*/
			isReady |= (getGBL_CANFTdata(getGBL_DEVICE_STATUS(i)) & 0x01) << (i);
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	c8 01       	movw	r24, r16
    1ad2:	5d d8       	rcall	.-3910   	; 0xb8e <getCANFTdatas>
    1ad4:	81 70       	andi	r24, 0x01	; 1
    1ad6:	99 27       	eor	r25, r25
    1ad8:	0c 2e       	mov	r0, r28
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <getSystemStatus+0x36>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <getSystemStatus+0x32>
    1ae4:	e8 2a       	or	r14, r24
    1ae6:	f9 2a       	or	r15, r25
}
uint16_t getSystemStatus()
{
	int i;
	uint16_t isReady = 0x00;
	for(i = 1; i<= GLOBAL_DEVICES+1; i++)
    1ae8:	21 96       	adiw	r28, 0x01	; 1
    1aea:	09 5f       	subi	r16, 0xF9	; 249
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	cc 30       	cpi	r28, 0x0C	; 12
    1af0:	d1 05       	cpc	r29, r1
    1af2:	39 f7       	brne	.-50     	; 0x1ac2 <getSystemStatus+0x18>
			   bit of  their status word isReady will become false*/
			isReady |= (getGBL_CANFTdata(getGBL_DEVICE_STATUS(i)) & 0x01) << (i);
		}
	}
	return isReady;
}
    1af4:	c7 01       	movw	r24, r14
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	08 95       	ret

00001b04 <isSystemReady>:

uint16_t currentMacro = 0;
uint16_t previousMacro = 0;

bool isSystemReady(uint16_t _mask)
{
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	ec 01       	movw	r28, r24
	/* Make sure the mask only is looking for devices that are actually on the bus */
	_mask &= (0xFFFF >> 16 - GLOBAL_DEVICES);
	/* Getting the status of all the devices that have sent in a status */
	uint16_t status = getSystemStatus() & (0xFFFF >> 16 - GLOBAL_DEVICES);
    1b0a:	cf df       	rcall	.-98     	; 0x1aaa <getSystemStatus>
	/* Return true if the required statuses are valid */
	return ((status & _mask) == status);
    1b0c:	d3 70       	andi	r29, 0x03	; 3
    1b0e:	c8 23       	and	r28, r24
    1b10:	d9 23       	and	r29, r25
    1b12:	9c 01       	movw	r18, r24
    1b14:	33 70       	andi	r19, 0x03	; 3
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	c2 17       	cp	r28, r18
    1b1a:	d3 07       	cpc	r29, r19
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <isSystemReady+0x1c>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
}
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	08 95       	ret

00001b26 <updateMacroCommand>:
	}
	return isReady;
}

void updateMacroCommand()
{
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	c8 e0       	ldi	r28, 0x08	; 8
    1b30:	d0 e0       	ldi	r29, 0x00	; 0
	int rx_macro = 0x0000;
    1b32:	00 e0       	ldi	r16, 0x00	; 0
    1b34:	10 e0       	ldi	r17, 0x00	; 0
	int x;
	// Set the corresponding macro bit to 1 if active for all devices on the GBL bus
	int i;
	for(i = 1; i<= GLOBAL_DEVICES+1; i++)
	{
		if(getGBL_CANFTdata(getGBL_MACRO_INDEX(i))) {
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	ce 01       	movw	r24, r28
    1b3a:	29 d8       	rcall	.-4014   	; 0xb8e <getCANFTdatas>
    1b3c:	89 2b       	or	r24, r25
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <updateMacroCommand+0x24>

			rx_macro |= getGBL_CANFTdata(getGBL_MACRO_INDEX(i));
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	ce 01       	movw	r24, r28
    1b44:	24 d8       	rcall	.-4024   	; 0xb8e <getCANFTdatas>
    1b46:	08 2b       	or	r16, r24
    1b48:	19 2b       	or	r17, r25
    1b4a:	27 96       	adiw	r28, 0x07	; 7
{
	int rx_macro = 0x0000;
	int x;
	// Set the corresponding macro bit to 1 if active for all devices on the GBL bus
	int i;
	for(i = 1; i<= GLOBAL_DEVICES+1; i++)
    1b4c:	c5 35       	cpi	r28, 0x55	; 85
    1b4e:	d1 05       	cpc	r29, r1
    1b50:	91 f7       	brne	.-28     	; 0x1b36 <updateMacroCommand+0x10>

			rx_macro |= getGBL_CANFTdata(getGBL_MACRO_INDEX(i));
		}

	}
	if(rx_macro != previousMacro)
    1b52:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <previousMacro>
    1b56:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <previousMacro+0x1>
    1b5a:	08 17       	cp	r16, r24
    1b5c:	19 07       	cpc	r17, r25
    1b5e:	61 f0       	breq	.+24     	; 0x1b78 <updateMacroCommand+0x52>
	{
		previousMacro = currentMacro;
    1b60:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <currentMacro>
    1b64:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <currentMacro+0x1>
    1b68:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <previousMacro+0x1>
    1b6c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <previousMacro>
		currentMacro = rx_macro;
    1b70:	10 93 5f 01 	sts	0x015F, r17	; 0x80015f <currentMacro+0x1>
    1b74:	00 93 5e 01 	sts	0x015E, r16	; 0x80015e <currentMacro>

	}

}
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <getCurrentMacro>:
uint16_t getCurrentMacro()
{
	updateMacroCommand();
    1b82:	d1 df       	rcall	.-94     	; 0x1b26 <updateMacroCommand>
	return currentMacro;
    1b84:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <currentMacro>
    1b88:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <currentMacro+0x1>
    1b8c:	08 95       	ret

00001b8e <List_Init>:
	

 
	//point head to null
	void List_Init(struct Node** head) {
		*head = NULL;
    1b8e:	fc 01       	movw	r30, r24
    1b90:	11 82       	std	Z+1, r1	; 0x01
    1b92:	10 82       	st	Z, r1
    1b94:	08 95       	ret

00001b96 <setTimerInterval>:
	}
	else
	{
		return false;
	}
}
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	00 83       	st	Z, r16
    1b9e:	11 83       	std	Z+1, r17	; 0x01
    1ba0:	22 83       	std	Z+2, r18	; 0x02
    1ba2:	33 83       	std	Z+3, r19	; 0x03
    1ba4:	44 83       	std	Z+4, r20	; 0x04
    1ba6:	55 83       	std	Z+5, r21	; 0x05
    1ba8:	66 83       	std	Z+6, r22	; 0x06
    1baa:	77 83       	std	Z+7, r23	; 0x07
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	08 95       	ret

00001bb2 <resetTimer>:
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <globalTime>
    1bb8:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <globalTime+0x1>
    1bbc:	50 91 62 01 	lds	r21, 0x0162	; 0x800162 <globalTime+0x2>
    1bc0:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <globalTime+0x3>
    1bc4:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <globalTime+0x4>
    1bc8:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <globalTime+0x5>
    1bcc:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <globalTime+0x6>
    1bd0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <globalTime+0x7>
    1bd4:	70 87       	std	Z+8, r23	; 0x08
    1bd6:	61 87       	std	Z+9, r22	; 0x09
    1bd8:	52 87       	std	Z+10, r21	; 0x0a
    1bda:	43 87       	std	Z+11, r20	; 0x0b
    1bdc:	34 87       	std	Z+12, r19	; 0x0c
    1bde:	25 87       	std	Z+13, r18	; 0x0d
    1be0:	96 87       	std	Z+14, r25	; 0x0e
    1be2:	87 87       	std	Z+15, r24	; 0x0f
    1be4:	08 95       	ret

00001be6 <getTimeElepsed>:
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	00 91 60 01 	lds	r16, 0x0160	; 0x800160 <globalTime>
    1bee:	10 91 61 01 	lds	r17, 0x0161	; 0x800161 <globalTime+0x1>
    1bf2:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <globalTime+0x2>
    1bf6:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <globalTime+0x3>
    1bfa:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <globalTime+0x4>
    1bfe:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <globalTime+0x5>
    1c02:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <globalTime+0x6>
    1c06:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <globalTime+0x7>
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	80 85       	ldd	r24, Z+8	; 0x08
    1c0e:	91 85       	ldd	r25, Z+9	; 0x09
    1c10:	f8 01       	movw	r30, r16
    1c12:	e8 1b       	sub	r30, r24
    1c14:	f9 0b       	sbc	r31, r25
    1c16:	cf 01       	movw	r24, r30
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	08 95       	ret

00001c1e <timerDone>:
    1c1e:	6f 92       	push	r6
    1c20:	7f 92       	push	r7
    1c22:	8f 92       	push	r8
    1c24:	9f 92       	push	r9
    1c26:	af 92       	push	r10
    1c28:	bf 92       	push	r11
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	60 90 60 01 	lds	r6, 0x0160	; 0x800160 <globalTime>
    1c40:	70 90 61 01 	lds	r7, 0x0161	; 0x800161 <globalTime+0x1>
    1c44:	80 90 62 01 	lds	r8, 0x0162	; 0x800162 <globalTime+0x2>
    1c48:	90 90 63 01 	lds	r9, 0x0163	; 0x800163 <globalTime+0x3>
    1c4c:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <globalTime+0x4>
    1c50:	c0 91 65 01 	lds	r28, 0x0165	; 0x800165 <globalTime+0x5>
    1c54:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <globalTime+0x6>
    1c58:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <globalTime+0x7>
    1c5c:	20 85       	ldd	r18, Z+8	; 0x08
    1c5e:	31 85       	ldd	r19, Z+9	; 0x09
    1c60:	42 85       	ldd	r20, Z+10	; 0x0a
    1c62:	53 85       	ldd	r21, Z+11	; 0x0b
    1c64:	64 85       	ldd	r22, Z+12	; 0x0c
    1c66:	75 85       	ldd	r23, Z+13	; 0x0d
    1c68:	86 85       	ldd	r24, Z+14	; 0x0e
    1c6a:	97 85       	ldd	r25, Z+15	; 0x0f
    1c6c:	a0 80       	ld	r10, Z
    1c6e:	b1 80       	ldd	r11, Z+1	; 0x01
    1c70:	c2 80       	ldd	r12, Z+2	; 0x02
    1c72:	d3 80       	ldd	r13, Z+3	; 0x03
    1c74:	e4 80       	ldd	r14, Z+4	; 0x04
    1c76:	f5 80       	ldd	r15, Z+5	; 0x05
    1c78:	06 81       	ldd	r16, Z+6	; 0x06
    1c7a:	17 81       	ldd	r17, Z+7	; 0x07
    1c7c:	89 d0       	rcall	.+274    	; 0x1d90 <__adddi3>
    1c7e:	a2 2e       	mov	r10, r18
    1c80:	b3 2e       	mov	r11, r19
    1c82:	c4 2e       	mov	r12, r20
    1c84:	d5 2e       	mov	r13, r21
    1c86:	e6 2e       	mov	r14, r22
    1c88:	f7 2e       	mov	r15, r23
    1c8a:	08 2f       	mov	r16, r24
    1c8c:	19 2f       	mov	r17, r25
    1c8e:	26 2d       	mov	r18, r6
    1c90:	37 2d       	mov	r19, r7
    1c92:	48 2d       	mov	r20, r8
    1c94:	59 2d       	mov	r21, r9
    1c96:	6d 2f       	mov	r22, r29
    1c98:	7c 2f       	mov	r23, r28
    1c9a:	8b 2f       	mov	r24, r27
    1c9c:	9a 2f       	mov	r25, r26
    1c9e:	8d d0       	rcall	.+282    	; 0x1dba <__cmpdi2>
    1ca0:	50 f0       	brcs	.+20     	; 0x1cb6 <timerDone+0x98>
    1ca2:	60 86       	std	Z+8, r6	; 0x08
    1ca4:	71 86       	std	Z+9, r7	; 0x09
    1ca6:	82 86       	std	Z+10, r8	; 0x0a
    1ca8:	93 86       	std	Z+11, r9	; 0x0b
    1caa:	d4 87       	std	Z+12, r29	; 0x0c
    1cac:	c5 87       	std	Z+13, r28	; 0x0d
    1cae:	b6 87       	std	Z+14, r27	; 0x0e
    1cb0:	a7 87       	std	Z+15, r26	; 0x0f
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	01 c0       	rjmp	.+2      	; 0x1cb8 <timerDone+0x9a>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	df 90       	pop	r13
    1cc6:	cf 90       	pop	r12
    1cc8:	bf 90       	pop	r11
    1cca:	af 90       	pop	r10
    1ccc:	9f 90       	pop	r9
    1cce:	8f 90       	pop	r8
    1cd0:	7f 90       	pop	r7
    1cd2:	6f 90       	pop	r6
    1cd4:	08 95       	ret

00001cd6 <initTimer0>:
void initTimer0(void)
{
	TCCR0A = PRESCALER;   //Set the prescaler
    1cd6:	85 e0       	ldi	r24, 0x05	; 5
    1cd8:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1<<TOIE0);    //ENABLE Timer Overflow interrupt
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1ce0:	08 95       	ret

00001ce2 <__vector_17>:
}

ISR(TIMER0_OVF_vect)
{
    1ce2:	1f 92       	push	r1
    1ce4:	0f 92       	push	r0
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	0f 92       	push	r0
    1cea:	11 24       	eor	r1, r1
    1cec:	2f 93       	push	r18
    1cee:	3f 93       	push	r19
    1cf0:	4f 93       	push	r20
    1cf2:	5f 93       	push	r21
    1cf4:	6f 93       	push	r22
    1cf6:	7f 93       	push	r23
    1cf8:	8f 93       	push	r24
    1cfa:	9f 93       	push	r25
    1cfc:	af 93       	push	r26
#ifdef PRESCALER1024
	globalTime+=16;
    1cfe:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <globalTime>
    1d02:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <globalTime+0x1>
    1d06:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <globalTime+0x2>
    1d0a:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <globalTime+0x3>
    1d0e:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <globalTime+0x4>
    1d12:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <globalTime+0x5>
    1d16:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <globalTime+0x6>
    1d1a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <globalTime+0x7>
    1d1e:	a0 e1       	ldi	r26, 0x10	; 16
    1d20:	40 d0       	rcall	.+128    	; 0x1da2 <__adddi3_s8>
    1d22:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <globalTime>
    1d26:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <globalTime+0x1>
    1d2a:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <globalTime+0x2>
    1d2e:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <globalTime+0x3>
    1d32:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <globalTime+0x4>
    1d36:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <globalTime+0x5>
    1d3a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <globalTime+0x6>
    1d3e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <globalTime+0x7>
	globalTime+=4;
#elif PRESCALER64
	globalTime++;
#endif

	TIFR0 = (0<<TOV0);  //Reset timer0 overflow interrupt flag
    1d42:	15 ba       	out	0x15, r1	; 21
    1d44:	af 91       	pop	r26
    1d46:	9f 91       	pop	r25
    1d48:	8f 91       	pop	r24
    1d4a:	7f 91       	pop	r23
    1d4c:	6f 91       	pop	r22
    1d4e:	5f 91       	pop	r21
    1d50:	4f 91       	pop	r20
    1d52:	3f 91       	pop	r19
    1d54:	2f 91       	pop	r18
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

00001d60 <__tablejump2__>:
    1d60:	ee 0f       	add	r30, r30
    1d62:	ff 1f       	adc	r31, r31
    1d64:	00 24       	eor	r0, r0
    1d66:	00 1c       	adc	r0, r0
    1d68:	0b be       	out	0x3b, r0	; 59
    1d6a:	07 90       	elpm	r0, Z+
    1d6c:	f6 91       	elpm	r31, Z
    1d6e:	e0 2d       	mov	r30, r0
    1d70:	09 94       	ijmp

00001d72 <__umulhisi3>:
    1d72:	a2 9f       	mul	r26, r18
    1d74:	b0 01       	movw	r22, r0
    1d76:	b3 9f       	mul	r27, r19
    1d78:	c0 01       	movw	r24, r0
    1d7a:	a3 9f       	mul	r26, r19
    1d7c:	70 0d       	add	r23, r0
    1d7e:	81 1d       	adc	r24, r1
    1d80:	11 24       	eor	r1, r1
    1d82:	91 1d       	adc	r25, r1
    1d84:	b2 9f       	mul	r27, r18
    1d86:	70 0d       	add	r23, r0
    1d88:	81 1d       	adc	r24, r1
    1d8a:	11 24       	eor	r1, r1
    1d8c:	91 1d       	adc	r25, r1
    1d8e:	08 95       	ret

00001d90 <__adddi3>:
    1d90:	2a 0d       	add	r18, r10
    1d92:	3b 1d       	adc	r19, r11
    1d94:	4c 1d       	adc	r20, r12
    1d96:	5d 1d       	adc	r21, r13
    1d98:	6e 1d       	adc	r22, r14
    1d9a:	7f 1d       	adc	r23, r15
    1d9c:	80 1f       	adc	r24, r16
    1d9e:	91 1f       	adc	r25, r17
    1da0:	08 95       	ret

00001da2 <__adddi3_s8>:
    1da2:	00 24       	eor	r0, r0
    1da4:	a7 fd       	sbrc	r26, 7
    1da6:	00 94       	com	r0
    1da8:	2a 0f       	add	r18, r26
    1daa:	30 1d       	adc	r19, r0
    1dac:	40 1d       	adc	r20, r0
    1dae:	50 1d       	adc	r21, r0
    1db0:	60 1d       	adc	r22, r0
    1db2:	70 1d       	adc	r23, r0
    1db4:	80 1d       	adc	r24, r0
    1db6:	90 1d       	adc	r25, r0
    1db8:	08 95       	ret

00001dba <__cmpdi2>:
    1dba:	2a 15       	cp	r18, r10
    1dbc:	3b 05       	cpc	r19, r11
    1dbe:	4c 05       	cpc	r20, r12
    1dc0:	5d 05       	cpc	r21, r13
    1dc2:	6e 05       	cpc	r22, r14
    1dc4:	7f 05       	cpc	r23, r15
    1dc6:	80 07       	cpc	r24, r16
    1dc8:	91 07       	cpc	r25, r17
    1dca:	08 95       	ret

00001dcc <memcpy>:
    1dcc:	fb 01       	movw	r30, r22
    1dce:	dc 01       	movw	r26, r24
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <memcpy+0xa>
    1dd2:	01 90       	ld	r0, Z+
    1dd4:	0d 92       	st	X+, r0
    1dd6:	41 50       	subi	r20, 0x01	; 1
    1dd8:	50 40       	sbci	r21, 0x00	; 0
    1dda:	d8 f7       	brcc	.-10     	; 0x1dd2 <memcpy+0x6>
    1ddc:	08 95       	ret

00001dde <puts>:
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	e0 91 3f 0c 	lds	r30, 0x0C3F	; 0x800c3f <__iob+0x2>
    1dea:	f0 91 40 0c 	lds	r31, 0x0C40	; 0x800c40 <__iob+0x3>
    1dee:	23 81       	ldd	r18, Z+3	; 0x03
    1df0:	21 ff       	sbrs	r18, 1
    1df2:	1b c0       	rjmp	.+54     	; 0x1e2a <puts+0x4c>
    1df4:	8c 01       	movw	r16, r24
    1df6:	d0 e0       	ldi	r29, 0x00	; 0
    1df8:	c0 e0       	ldi	r28, 0x00	; 0
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	81 91       	ld	r24, Z+
    1dfe:	8f 01       	movw	r16, r30
    1e00:	60 91 3f 0c 	lds	r22, 0x0C3F	; 0x800c3f <__iob+0x2>
    1e04:	70 91 40 0c 	lds	r23, 0x0C40	; 0x800c40 <__iob+0x3>
    1e08:	db 01       	movw	r26, r22
    1e0a:	18 96       	adiw	r26, 0x08	; 8
    1e0c:	ed 91       	ld	r30, X+
    1e0e:	fc 91       	ld	r31, X
    1e10:	19 97       	sbiw	r26, 0x09	; 9
    1e12:	88 23       	and	r24, r24
    1e14:	31 f0       	breq	.+12     	; 0x1e22 <puts+0x44>
    1e16:	09 95       	icall
    1e18:	89 2b       	or	r24, r25
    1e1a:	79 f3       	breq	.-34     	; 0x1dfa <puts+0x1c>
    1e1c:	df ef       	ldi	r29, 0xFF	; 255
    1e1e:	cf ef       	ldi	r28, 0xFF	; 255
    1e20:	ec cf       	rjmp	.-40     	; 0x1dfa <puts+0x1c>
    1e22:	8a e0       	ldi	r24, 0x0A	; 10
    1e24:	09 95       	icall
    1e26:	89 2b       	or	r24, r25
    1e28:	19 f0       	breq	.+6      	; 0x1e30 <puts+0x52>
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	9f ef       	ldi	r25, 0xFF	; 255
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <puts+0x56>
    1e30:	8d 2f       	mov	r24, r29
    1e32:	9c 2f       	mov	r25, r28
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <_exit>:
    1e3e:	f8 94       	cli

00001e40 <__stop_program>:
    1e40:	ff cf       	rjmp	.-2      	; 0x1e40 <__stop_program>
