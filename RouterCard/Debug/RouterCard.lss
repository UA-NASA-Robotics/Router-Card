
RouterCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00002c78  00002d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ad6  00800164  00800164  00002d70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b0  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000077bb  00000000  00000000  000033bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d1c  00000000  00000000  0000ab77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000371a  00000000  00000000  0000c893  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000117c  00000000  00000000  0000ffb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001682  00000000  00000000  0001112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004e3c  00000000  00000000  000127ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000528  00000000  00000000  000175ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
       2:	00 00       	nop
       4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c0       	rjmp	.+252    	; 0x11a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c0       	rjmp	.+236    	; 0x11a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c0       	rjmp	.+224    	; 0x11a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c0       	rjmp	.+216    	; 0x11a <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__vector_17>
      48:	e0 c2       	rjmp	.+1472   	; 0x60a <__vector_18>
      4a:	00 00       	nop
      4c:	66 c0       	rjmp	.+204    	; 0x11a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
      52:	00 00       	nop
      54:	ab c2       	rjmp	.+1366   	; 0x5ac <__vector_21>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__vector_22>
      5a:	00 00       	nop
      5c:	5e c0       	rjmp	.+188    	; 0x11a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c0       	rjmp	.+184    	; 0x11a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c0       	rjmp	.+180    	; 0x11a <__bad_interrupt>
      66:	00 00       	nop
      68:	58 c0       	rjmp	.+176    	; 0x11a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	56 c0       	rjmp	.+172    	; 0x11a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c0       	rjmp	.+168    	; 0x11a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c0       	rjmp	.+164    	; 0x11a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c0       	rjmp	.+160    	; 0x11a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c0       	rjmp	.+156    	; 0x11a <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c2       	rjmp	.+1222   	; 0x548 <__vector_32>
      82:	00 00       	nop
      84:	e1 c1       	rjmp	.+962    	; 0x448 <__vector_33>
      86:	00 00       	nop
      88:	48 c0       	rjmp	.+144    	; 0x11a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	46 c0       	rjmp	.+140    	; 0x11a <__bad_interrupt>
      8e:	00 00       	nop
      90:	44 c0       	rjmp	.+136    	; 0x11a <__bad_interrupt>
      92:	00 00       	nop
      94:	68 10       	cpse	r6, r8
      96:	1f 10       	cpse	r1, r15
      98:	21 10       	cpse	r2, r1
      9a:	23 10       	cpse	r2, r3
      9c:	25 10       	cpse	r2, r5
      9e:	27 10       	cpse	r2, r7
      a0:	6e 10       	cpse	r6, r14
      a2:	1d 10       	cpse	r1, r13
      a4:	70 10       	cpse	r7, r0
      a6:	6a 10       	cpse	r6, r10
      a8:	29 10       	cpse	r2, r9
      aa:	2b 10       	cpse	r2, r11
      ac:	6c 10       	cpse	r6, r12
      ae:	39 10       	cpse	r3, r9
      b0:	3d 10       	cpse	r3, r13
      b2:	3f 10       	cpse	r3, r15
      b4:	41 10       	cpse	r4, r1
      b6:	43 10       	cpse	r4, r3
      b8:	72 10       	cpse	r7, r2
      ba:	37 10       	cpse	r3, r7
      bc:	3b 10       	cpse	r3, r11
      be:	45 10       	cpse	r4, r5
      c0:	47 10       	cpse	r4, r7
      c2:	49 10       	cpse	r4, r9
      c4:	9e 10       	cpse	r9, r14
      c6:	81 10       	cpse	r8, r1
      c8:	83 10       	cpse	r8, r3
      ca:	85 10       	cpse	r8, r5
      cc:	87 10       	cpse	r8, r7
      ce:	89 10       	cpse	r8, r9
      d0:	a2 10       	cpse	r10, r2
      d2:	7f 10       	cpse	r7, r15
      d4:	a4 10       	cpse	r10, r4
      d6:	a0 10       	cpse	r10, r0
      d8:	8b 10       	cpse	r8, r11
      da:	8d 10       	cpse	r8, r13

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d0 e1       	ldi	r29, 0x10	; 16
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e8 e7       	ldi	r30, 0x78	; 120
      f0:	fc e2       	ldi	r31, 0x2C	; 44
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0b bf       	out	0x3b, r16	; 59
      f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
      f8:	07 90       	elpm	r0, Z+
      fa:	0d 92       	st	X+, r0
      fc:	a4 36       	cpi	r26, 0x64	; 100
      fe:	b1 07       	cpc	r27, r17
     100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
     102:	2c e0       	ldi	r18, 0x0C	; 12
     104:	a4 e6       	ldi	r26, 0x64	; 100
     106:	b1 e0       	ldi	r27, 0x01	; 1
     108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
     10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
     10c:	aa 33       	cpi	r26, 0x3A	; 58
     10e:	b2 07       	cpc	r27, r18
     110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
     112:	0e 94 00 11 	call	0x2200	; 0x2200 <main>
     116:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <_exit>

0000011a <__bad_interrupt>:
     11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <cb_push_back>:
	cb->tail = (int*)cb->tail + cb->sz;
	if(cb->tail == cb->buffer_end)
		cb->tail = cb->buffer;
	cb->count--;
	return *val;
}
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	ec 01       	movw	r28, r24
     122:	4c 85       	ldd	r20, Y+12	; 0x0c
     124:	5d 85       	ldd	r21, Y+13	; 0x0d
     126:	88 81       	ld	r24, Y
     128:	99 81       	ldd	r25, Y+1	; 0x01
     12a:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     12e:	28 81       	ld	r18, Y
     130:	39 81       	ldd	r19, Y+1	; 0x01
     132:	8c 85       	ldd	r24, Y+12	; 0x0c
     134:	9d 85       	ldd	r25, Y+13	; 0x0d
     136:	82 0f       	add	r24, r18
     138:	93 1f       	adc	r25, r19
     13a:	99 83       	std	Y+1, r25	; 0x01
     13c:	88 83       	st	Y, r24
     13e:	2e 81       	ldd	r18, Y+6	; 0x06
     140:	3f 81       	ldd	r19, Y+7	; 0x07
     142:	82 17       	cp	r24, r18
     144:	93 07       	cpc	r25, r19
     146:	20 f0       	brcs	.+8      	; 0x150 <cb_push_back+0x34>
     148:	8c 81       	ldd	r24, Y+4	; 0x04
     14a:	9d 81       	ldd	r25, Y+5	; 0x05
     14c:	99 83       	std	Y+1, r25	; 0x01
     14e:	88 83       	st	Y, r24
     150:	8a 85       	ldd	r24, Y+10	; 0x0a
     152:	9b 85       	ldd	r25, Y+11	; 0x0b
     154:	28 85       	ldd	r18, Y+8	; 0x08
     156:	39 85       	ldd	r19, Y+9	; 0x09
     158:	82 17       	cp	r24, r18
     15a:	93 07       	cpc	r25, r19
     15c:	1c f4       	brge	.+6      	; 0x164 <cb_push_back+0x48>
     15e:	01 96       	adiw	r24, 0x01	; 1
     160:	9b 87       	std	Y+11, r25	; 0x0b
     162:	8a 87       	std	Y+10, r24	; 0x0a
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <cb_pop_front>:
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	fb 01       	movw	r30, r22
     170:	10 82       	st	Z, r1
     172:	fc 01       	movw	r30, r24
     174:	22 85       	ldd	r18, Z+10	; 0x0a
     176:	33 85       	ldd	r19, Z+11	; 0x0b
     178:	23 2b       	or	r18, r19
     17a:	f9 f0       	breq	.+62     	; 0x1ba <cb_pop_front+0x50>
     17c:	9b 01       	movw	r18, r22
     17e:	ec 01       	movw	r28, r24
     180:	62 81       	ldd	r22, Z+2	; 0x02
     182:	73 81       	ldd	r23, Z+3	; 0x03
     184:	44 85       	ldd	r20, Z+12	; 0x0c
     186:	55 85       	ldd	r21, Z+13	; 0x0d
     188:	c9 01       	movw	r24, r18
     18a:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     18e:	2a 81       	ldd	r18, Y+2	; 0x02
     190:	3b 81       	ldd	r19, Y+3	; 0x03
     192:	8c 85       	ldd	r24, Y+12	; 0x0c
     194:	9d 85       	ldd	r25, Y+13	; 0x0d
     196:	82 0f       	add	r24, r18
     198:	93 1f       	adc	r25, r19
     19a:	9b 83       	std	Y+3, r25	; 0x03
     19c:	8a 83       	std	Y+2, r24	; 0x02
     19e:	2e 81       	ldd	r18, Y+6	; 0x06
     1a0:	3f 81       	ldd	r19, Y+7	; 0x07
     1a2:	82 17       	cp	r24, r18
     1a4:	93 07       	cpc	r25, r19
     1a6:	21 f4       	brne	.+8      	; 0x1b0 <cb_pop_front+0x46>
     1a8:	8c 81       	ldd	r24, Y+4	; 0x04
     1aa:	9d 81       	ldd	r25, Y+5	; 0x05
     1ac:	9b 83       	std	Y+3, r25	; 0x03
     1ae:	8a 83       	std	Y+2, r24	; 0x02
     1b0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	9b 87       	std	Y+11, r25	; 0x0b
     1b8:	8a 87       	std	Y+10, r24	; 0x0a
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <USART0_Init>:
     1c0:	ee e6       	ldi	r30, 0x6E	; 110
     1c2:	f2 e0       	ldi	r31, 0x02	; 2
     1c4:	45 e3       	ldi	r20, 0x35	; 53
     1c6:	52 e0       	ldi	r21, 0x02	; 2
     1c8:	55 83       	std	Z+5, r21	; 0x05
     1ca:	44 83       	std	Z+4, r20	; 0x04
     1cc:	27 e6       	ldi	r18, 0x67	; 103
     1ce:	32 e0       	ldi	r19, 0x02	; 2
     1d0:	37 83       	std	Z+7, r19	; 0x07
     1d2:	26 83       	std	Z+6, r18	; 0x06
     1d4:	22 e3       	ldi	r18, 0x32	; 50
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	31 87       	std	Z+9, r19	; 0x09
     1da:	20 87       	std	Z+8, r18	; 0x08
     1dc:	13 86       	std	Z+11, r1	; 0x0b
     1de:	12 86       	std	Z+10, r1	; 0x0a
     1e0:	21 e0       	ldi	r18, 0x01	; 1
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	35 87       	std	Z+13, r19	; 0x0d
     1e6:	24 87       	std	Z+12, r18	; 0x0c
     1e8:	51 83       	std	Z+1, r21	; 0x01
     1ea:	40 83       	st	Z, r20
     1ec:	53 83       	std	Z+3, r21	; 0x03
     1ee:	42 83       	std	Z+2, r20	; 0x02
     1f0:	ea e8       	ldi	r30, 0x8A	; 138
     1f2:	f2 e0       	ldi	r31, 0x02	; 2
     1f4:	48 e6       	ldi	r20, 0x68	; 104
     1f6:	52 e0       	ldi	r21, 0x02	; 2
     1f8:	55 83       	std	Z+5, r21	; 0x05
     1fa:	44 83       	std	Z+4, r20	; 0x04
     1fc:	ad e6       	ldi	r26, 0x6D	; 109
     1fe:	b2 e0       	ldi	r27, 0x02	; 2
     200:	b7 83       	std	Z+7, r27	; 0x07
     202:	a6 83       	std	Z+6, r26	; 0x06
     204:	a5 e0       	ldi	r26, 0x05	; 5
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	b1 87       	std	Z+9, r27	; 0x09
     20a:	a0 87       	std	Z+8, r26	; 0x08
     20c:	13 86       	std	Z+11, r1	; 0x0b
     20e:	12 86       	std	Z+10, r1	; 0x0a
     210:	35 87       	std	Z+13, r19	; 0x0d
     212:	24 87       	std	Z+12, r18	; 0x0c
     214:	51 83       	std	Z+1, r21	; 0x01
     216:	40 83       	st	Z, r20
     218:	53 83       	std	Z+3, r21	; 0x03
     21a:	42 83       	std	Z+2, r20	; 0x02
     21c:	61 15       	cp	r22, r1
     21e:	26 e9       	ldi	r18, 0x96	; 150
     220:	72 07       	cpc	r23, r18
     222:	81 05       	cpc	r24, r1
     224:	91 05       	cpc	r25, r1
     226:	01 f1       	breq	.+64     	; 0x268 <USART0_Init+0xa8>
     228:	30 f4       	brcc	.+12     	; 0x236 <USART0_Init+0x76>
     22a:	61 15       	cp	r22, r1
     22c:	7b 44       	sbci	r23, 0x4B	; 75
     22e:	81 05       	cpc	r24, r1
     230:	91 05       	cpc	r25, r1
     232:	09 f1       	breq	.+66     	; 0x276 <USART0_Init+0xb6>
     234:	27 c0       	rjmp	.+78     	; 0x284 <USART0_Init+0xc4>
     236:	61 15       	cp	r22, r1
     238:	21 ee       	ldi	r18, 0xE1	; 225
     23a:	72 07       	cpc	r23, r18
     23c:	81 05       	cpc	r24, r1
     23e:	91 05       	cpc	r25, r1
     240:	61 f0       	breq	.+24     	; 0x25a <USART0_Init+0x9a>
     242:	61 15       	cp	r22, r1
     244:	72 4c       	sbci	r23, 0xC2	; 194
     246:	81 40       	sbci	r24, 0x01	; 1
     248:	91 05       	cpc	r25, r1
     24a:	e1 f4       	brne	.+56     	; 0x284 <USART0_Init+0xc4>
     24c:	80 e1       	ldi	r24, 0x10	; 16
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     254:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     258:	1b c0       	rjmp	.+54     	; 0x290 <USART0_Init+0xd0>
     25a:	82 e2       	ldi	r24, 0x22	; 34
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     262:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     266:	14 c0       	rjmp	.+40     	; 0x290 <USART0_Init+0xd0>
     268:	83 e3       	ldi	r24, 0x33	; 51
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     270:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     274:	0d c0       	rjmp	.+26     	; 0x290 <USART0_Init+0xd0>
     276:	87 e6       	ldi	r24, 0x67	; 103
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     282:	06 c0       	rjmp	.+12     	; 0x290 <USART0_Init+0xd0>
     284:	8f ec       	ldi	r24, 0xCF	; 207
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     28c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     296:	8e e0       	ldi	r24, 0x0E	; 14
     298:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     29c:	88 e9       	ldi	r24, 0x98	; 152
     29e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	90 93 37 0c 	sts	0x0C37, r25	; 0x800c37 <__iob+0x3>
     2aa:	80 93 36 0c 	sts	0x0C36, r24	; 0x800c36 <__iob+0x2>
     2ae:	08 95       	ret

000002b0 <USART1_Init>:
     2b0:	ec e7       	ldi	r30, 0x7C	; 124
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	48 eb       	ldi	r20, 0xB8	; 184
     2b6:	51 e0       	ldi	r21, 0x01	; 1
     2b8:	55 83       	std	Z+5, r21	; 0x05
     2ba:	44 83       	std	Z+4, r20	; 0x04
     2bc:	2c e1       	ldi	r18, 0x1C	; 28
     2be:	32 e0       	ldi	r19, 0x02	; 2
     2c0:	37 83       	std	Z+7, r19	; 0x07
     2c2:	26 83       	std	Z+6, r18	; 0x06
     2c4:	24 e6       	ldi	r18, 0x64	; 100
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	31 87       	std	Z+9, r19	; 0x09
     2ca:	20 87       	std	Z+8, r18	; 0x08
     2cc:	13 86       	std	Z+11, r1	; 0x0b
     2ce:	12 86       	std	Z+10, r1	; 0x0a
     2d0:	21 e0       	ldi	r18, 0x01	; 1
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	35 87       	std	Z+13, r19	; 0x0d
     2d6:	24 87       	std	Z+12, r18	; 0x0c
     2d8:	51 83       	std	Z+1, r21	; 0x01
     2da:	40 83       	st	Z, r20
     2dc:	53 83       	std	Z+3, r21	; 0x03
     2de:	42 83       	std	Z+2, r20	; 0x02
     2e0:	e8 ea       	ldi	r30, 0xA8	; 168
     2e2:	f1 e0       	ldi	r31, 0x01	; 1
     2e4:	4c e1       	ldi	r20, 0x1C	; 28
     2e6:	52 e0       	ldi	r21, 0x02	; 2
     2e8:	55 83       	std	Z+5, r21	; 0x05
     2ea:	44 83       	std	Z+4, r20	; 0x04
     2ec:	a5 e3       	ldi	r26, 0x35	; 53
     2ee:	b2 e0       	ldi	r27, 0x02	; 2
     2f0:	b7 83       	std	Z+7, r27	; 0x07
     2f2:	a6 83       	std	Z+6, r26	; 0x06
     2f4:	a9 e1       	ldi	r26, 0x19	; 25
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	b1 87       	std	Z+9, r27	; 0x09
     2fa:	a0 87       	std	Z+8, r26	; 0x08
     2fc:	13 86       	std	Z+11, r1	; 0x0b
     2fe:	12 86       	std	Z+10, r1	; 0x0a
     300:	35 87       	std	Z+13, r19	; 0x0d
     302:	24 87       	std	Z+12, r18	; 0x0c
     304:	51 83       	std	Z+1, r21	; 0x01
     306:	40 83       	st	Z, r20
     308:	53 83       	std	Z+3, r21	; 0x03
     30a:	42 83       	std	Z+2, r20	; 0x02
     30c:	61 15       	cp	r22, r1
     30e:	26 e9       	ldi	r18, 0x96	; 150
     310:	72 07       	cpc	r23, r18
     312:	81 05       	cpc	r24, r1
     314:	91 05       	cpc	r25, r1
     316:	01 f1       	breq	.+64     	; 0x358 <USART1_Init+0xa8>
     318:	30 f4       	brcc	.+12     	; 0x326 <USART1_Init+0x76>
     31a:	61 15       	cp	r22, r1
     31c:	7b 44       	sbci	r23, 0x4B	; 75
     31e:	81 05       	cpc	r24, r1
     320:	91 05       	cpc	r25, r1
     322:	09 f1       	breq	.+66     	; 0x366 <USART1_Init+0xb6>
     324:	27 c0       	rjmp	.+78     	; 0x374 <USART1_Init+0xc4>
     326:	61 15       	cp	r22, r1
     328:	21 ee       	ldi	r18, 0xE1	; 225
     32a:	72 07       	cpc	r23, r18
     32c:	81 05       	cpc	r24, r1
     32e:	91 05       	cpc	r25, r1
     330:	61 f0       	breq	.+24     	; 0x34a <USART1_Init+0x9a>
     332:	61 15       	cp	r22, r1
     334:	72 4c       	sbci	r23, 0xC2	; 194
     336:	81 40       	sbci	r24, 0x01	; 1
     338:	91 05       	cpc	r25, r1
     33a:	e1 f4       	brne	.+56     	; 0x374 <USART1_Init+0xc4>
     33c:	80 e1       	ldi	r24, 0x10	; 16
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     344:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     348:	1b c0       	rjmp	.+54     	; 0x380 <USART1_Init+0xd0>
     34a:	82 e2       	ldi	r24, 0x22	; 34
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     352:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     356:	14 c0       	rjmp	.+40     	; 0x380 <USART1_Init+0xd0>
     358:	83 e3       	ldi	r24, 0x33	; 51
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     360:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     364:	0d c0       	rjmp	.+26     	; 0x380 <USART1_Init+0xd0>
     366:	87 e6       	ldi	r24, 0x67	; 103
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     36e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     372:	06 c0       	rjmp	.+12     	; 0x380 <USART1_Init+0xd0>
     374:	8f ec       	ldi	r24, 0xCF	; 207
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     37c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     386:	86 e0       	ldi	r24, 0x06	; 6
     388:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     38c:	88 e9       	ldi	r24, 0x98	; 152
     38e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     392:	08 95       	ret

00000394 <USART0_put_C>:
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	1f 92       	push	r1
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	89 83       	std	Y+1, r24	; 0x01
     3a4:	01 ec       	ldi	r16, 0xC1	; 193
     3a6:	10 e0       	ldi	r17, 0x00	; 0
     3a8:	f8 01       	movw	r30, r16
     3aa:	80 81       	ld	r24, Z
     3ac:	8f 7d       	andi	r24, 0xDF	; 223
     3ae:	80 83       	st	Z, r24
     3b0:	be 01       	movw	r22, r28
     3b2:	6f 5f       	subi	r22, 0xFF	; 255
     3b4:	7f 4f       	sbci	r23, 0xFF	; 255
     3b6:	8e e6       	ldi	r24, 0x6E	; 110
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	b0 de       	rcall	.-672    	; 0x11c <cb_push_back>
     3bc:	f8 01       	movw	r30, r16
     3be:	80 81       	ld	r24, Z
     3c0:	80 62       	ori	r24, 0x20	; 32
     3c2:	80 83       	st	Z, r24
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	08 95       	ret

000003d0 <uart_putchar>:
     3d0:	cf 93       	push	r28
     3d2:	c8 2f       	mov	r28, r24
     3d4:	8a 30       	cpi	r24, 0x0A	; 10
     3d6:	11 f4       	brne	.+4      	; 0x3dc <uart_putchar+0xc>
     3d8:	8d e0       	ldi	r24, 0x0D	; 13
     3da:	fa df       	rcall	.-12     	; 0x3d0 <uart_putchar>
     3dc:	8c 2f       	mov	r24, r28
     3de:	da df       	rcall	.-76     	; 0x394 <USART0_put_C>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <USART1_put_C>:
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	1f 92       	push	r1
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	89 83       	std	Y+1, r24	; 0x01
     3f8:	09 ec       	ldi	r16, 0xC9	; 201
     3fa:	10 e0       	ldi	r17, 0x00	; 0
     3fc:	f8 01       	movw	r30, r16
     3fe:	80 81       	ld	r24, Z
     400:	8f 7d       	andi	r24, 0xDF	; 223
     402:	80 83       	st	Z, r24
     404:	be 01       	movw	r22, r28
     406:	6f 5f       	subi	r22, 0xFF	; 255
     408:	7f 4f       	sbci	r23, 0xFF	; 255
     40a:	88 ea       	ldi	r24, 0xA8	; 168
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	86 de       	rcall	.-756    	; 0x11c <cb_push_back>
     410:	f8 01       	movw	r30, r16
     412:	80 81       	ld	r24, Z
     414:	80 62       	ori	r24, 0x20	; 32
     416:	80 83       	st	Z, r24
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	08 95       	ret

00000424 <USART1_get_C>:
     424:	67 e6       	ldi	r22, 0x67	; 103
     426:	72 e0       	ldi	r23, 0x02	; 2
     428:	8c e7       	ldi	r24, 0x7C	; 124
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	9e de       	rcall	.-708    	; 0x16a <cb_pop_front>
     42e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <val>
     432:	08 95       	ret

00000434 <isUART1_ReceiveEmpty>:
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <UART1_RX_Buffer+0xa>
     43a:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <UART1_RX_Buffer+0xb>
     43e:	12 16       	cp	r1, r18
     440:	13 06       	cpc	r1, r19
     442:	0c f4       	brge	.+2      	; 0x446 <isUART1_ReceiveEmpty+0x12>
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	08 95       	ret

00000448 <__vector_33>:
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	0b b6       	in	r0, 0x3b	; 59
     454:	0f 92       	push	r0
     456:	2f 93       	push	r18
     458:	3f 93       	push	r19
     45a:	4f 93       	push	r20
     45c:	5f 93       	push	r21
     45e:	6f 93       	push	r22
     460:	7f 93       	push	r23
     462:	8f 93       	push	r24
     464:	9f 93       	push	r25
     466:	af 93       	push	r26
     468:	bf 93       	push	r27
     46a:	ef 93       	push	r30
     46c:	ff 93       	push	r31
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	1f 92       	push	r1
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <UART1_TX_Buffer+0xa>
     47c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <UART1_TX_Buffer+0xb>
     480:	18 16       	cp	r1, r24
     482:	19 06       	cpc	r1, r25
     484:	54 f4       	brge	.+20     	; 0x49a <__vector_33+0x52>
     486:	be 01       	movw	r22, r28
     488:	6f 5f       	subi	r22, 0xFF	; 255
     48a:	7f 4f       	sbci	r23, 0xFF	; 255
     48c:	88 ea       	ldi	r24, 0xA8	; 168
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	6c de       	rcall	.-808    	; 0x16a <cb_pop_front>
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <__vector_33+0x5c>
     49a:	e9 ec       	ldi	r30, 0xC9	; 201
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 7d       	andi	r24, 0xDF	; 223
     4a2:	80 83       	st	Z, r24
     4a4:	0f 90       	pop	r0
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0b be       	out	0x3b, r0	; 59
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <__vector_22>:
ISR(USART0_UDRE_vect)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     4d0:	1f 92       	push	r1
     4d2:	0f 92       	push	r0
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	0f 92       	push	r0
     4d8:	11 24       	eor	r1, r1
     4da:	0b b6       	in	r0, 0x3b	; 59
     4dc:	0f 92       	push	r0
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	if (UART0_TX_Buffer.count > 0)
     4f6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <UART0_TX_Buffer+0xa>
     4fa:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <UART0_TX_Buffer+0xb>
     4fe:	18 16       	cp	r1, r24
     500:	19 06       	cpc	r1, r25
     502:	54 f4       	brge	.+20     	; 0x518 <__vector_22+0x48>
	{

		//if(uart0POP(&UART0_TX_Buffer, &tempTX))
		cb_pop_front(&UART0_TX_Buffer, &tempTX);
     504:	64 e6       	ldi	r22, 0x64	; 100
     506:	71 e0       	ldi	r23, 0x01	; 1
     508:	8e e6       	ldi	r24, 0x6E	; 110
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	2e de       	rcall	.-932    	; 0x16a <cb_pop_front>
		UDR0 = tempTX;
     50e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
     512:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     516:	05 c0       	rjmp	.+10     	; 0x522 <__vector_22+0x52>
	}
	else
	{
		UCSR0B &=  ~(1<<UDRIE0); //disable sending when buffer empty
     518:	e1 ec       	ldi	r30, 0xC1	; 193
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	8f 7d       	andi	r24, 0xDF	; 223
     520:	80 83       	st	Z, r24
	}
}
     522:	ff 91       	pop	r31
     524:	ef 91       	pop	r30
     526:	bf 91       	pop	r27
     528:	af 91       	pop	r26
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	7f 91       	pop	r23
     530:	6f 91       	pop	r22
     532:	5f 91       	pop	r21
     534:	4f 91       	pop	r20
     536:	3f 91       	pop	r19
     538:	2f 91       	pop	r18
     53a:	0f 90       	pop	r0
     53c:	0b be       	out	0x3b, r0	; 59
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_32>:
// ISR(USART1_TX_vect) {
// //not used
// }
char received1;
int* HeadPtr;
ISR(USART1_RX_vect) {
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	0b b6       	in	r0, 0x3b	; 59
     554:	0f 92       	push	r0
     556:	2f 93       	push	r18
     558:	3f 93       	push	r19
     55a:	4f 93       	push	r20
     55c:	5f 93       	push	r21
     55e:	6f 93       	push	r22
     560:	7f 93       	push	r23
     562:	8f 93       	push	r24
     564:	9f 93       	push	r25
     566:	af 93       	push	r26
     568:	bf 93       	push	r27
     56a:	ef 93       	push	r30
     56c:	ff 93       	push	r31


	received1 = UDR1; // might be able to eliminate this line.
     56e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     572:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <received1>
	toggleLED(LED6);
     576:	86 e0       	ldi	r24, 0x06	; 6
     578:	0e 94 75 10 	call	0x20ea	; 0x20ea <toggleLED>
	cb_push_back(&UART1_RX_Buffer, &received1);
     57c:	6d e6       	ldi	r22, 0x6D	; 109
     57e:	72 e0       	ldi	r23, 0x02	; 2
     580:	8c e7       	ldi	r24, 0x7C	; 124
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	cb dd       	rcall	.-1130   	; 0x11c <cb_push_back>

}
     586:	ff 91       	pop	r31
     588:	ef 91       	pop	r30
     58a:	bf 91       	pop	r27
     58c:	af 91       	pop	r26
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	7f 91       	pop	r23
     594:	6f 91       	pop	r22
     596:	5f 91       	pop	r21
     598:	4f 91       	pop	r20
     59a:	3f 91       	pop	r19
     59c:	2f 91       	pop	r18
     59e:	0f 90       	pop	r0
     5a0:	0b be       	out	0x3b, r0	; 59
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <__vector_21>:

char received0;
ISR(USART0_RX_vect) {
     5ac:	1f 92       	push	r1
     5ae:	0f 92       	push	r0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	0f 92       	push	r0
     5b4:	11 24       	eor	r1, r1
     5b6:	0b b6       	in	r0, 0x3b	; 59
     5b8:	0f 92       	push	r0
     5ba:	2f 93       	push	r18
     5bc:	3f 93       	push	r19
     5be:	4f 93       	push	r20
     5c0:	5f 93       	push	r21
     5c2:	6f 93       	push	r22
     5c4:	7f 93       	push	r23
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	af 93       	push	r26
     5cc:	bf 93       	push	r27
     5ce:	ef 93       	push	r30
     5d0:	ff 93       	push	r31
	received0 = UDR0; // might be able to eliminate this line.
     5d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5d6:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <received0>
	cb_push_back(&UART0_RX_Buffer, &received0);
     5da:	68 e9       	ldi	r22, 0x98	; 152
     5dc:	72 e0       	ldi	r23, 0x02	; 2
     5de:	8a e8       	ldi	r24, 0x8A	; 138
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	9c dd       	rcall	.-1224   	; 0x11c <cb_push_back>
     5e4:	ff 91       	pop	r31
     5e6:	ef 91       	pop	r30
     5e8:	bf 91       	pop	r27
     5ea:	af 91       	pop	r26
     5ec:	9f 91       	pop	r25
     5ee:	8f 91       	pop	r24
     5f0:	7f 91       	pop	r23
     5f2:	6f 91       	pop	r22
     5f4:	5f 91       	pop	r21
     5f6:	4f 91       	pop	r20
     5f8:	3f 91       	pop	r19
     5fa:	2f 91       	pop	r18
     5fc:	0f 90       	pop	r0
     5fe:	0b be       	out	0x3b, r0	; 59
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <__vector_18>:
		CANIDT4 = 1<<RTRTAG;
	}
	CANCDMOB = 0x40 + packet->length;

	return true;
}
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	cf 93       	push	r28
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
     632:	ed ee       	ldi	r30, 0xED	; 237
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	c0 81       	ld	r28, Z
     638:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     63c:	68 2f       	mov	r22, r24
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	80 7f       	andi	r24, 0xF0	; 240
     642:	80 83       	st	Z, r24
     644:	72 95       	swap	r23
     646:	62 95       	swap	r22
     648:	6f 70       	andi	r22, 0x0F	; 15
     64a:	67 27       	eor	r22, r23
     64c:	7f 70       	andi	r23, 0x0F	; 15
     64e:	67 27       	eor	r22, r23
     650:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     654:	8f 7d       	andi	r24, 0xDF	; 223
     656:	c1 f5       	brne	.+112    	; 0x6c8 <__vector_18+0xbe>
     658:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     65c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     660:	e0 e7       	ldi	r30, 0x70	; 112
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	22 95       	swap	r18
     666:	26 95       	lsr	r18
     668:	27 70       	andi	r18, 0x07	; 7
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	82 2b       	or	r24, r18
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	80 83       	st	Z, r24
     67e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     682:	8f 70       	andi	r24, 0x0F	; 15
     684:	82 83       	std	Z+2, r24	; 0x02
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	00 97       	sbiw	r24, 0x00	; 0
     68a:	59 f0       	breq	.+22     	; 0x6a2 <__vector_18+0x98>
     68c:	e3 e7       	ldi	r30, 0x73	; 115
     68e:	f1 e0       	ldi	r31, 0x01	; 1
     690:	8d 58       	subi	r24, 0x8D	; 141
     692:	9e 4f       	sbci	r25, 0xFE	; 254
     694:	aa ef       	ldi	r26, 0xFA	; 250
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	2c 91       	ld	r18, X
     69a:	21 93       	st	Z+, r18
     69c:	e8 17       	cp	r30, r24
     69e:	f9 07       	cpc	r31, r25
     6a0:	d9 f7       	brne	.-10     	; 0x698 <__vector_18+0x8e>
     6a2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     6a6:	80 e8       	ldi	r24, 0x80	; 128
     6a8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     6ac:	fb 01       	movw	r30, r22
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e6 56       	subi	r30, 0x66	; 102
     6b4:	fd 4f       	sbci	r31, 0xFD	; 253
     6b6:	01 90       	ld	r0, Z+
     6b8:	f0 81       	ld	r31, Z
     6ba:	e0 2d       	mov	r30, r0
     6bc:	80 e7       	ldi	r24, 0x70	; 112
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	09 95       	icall
     6c2:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     6c6:	d8 c0       	rjmp	.+432    	; 0x878 <__vector_18+0x26e>
     6c8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     6cc:	8f 7b       	andi	r24, 0xBF	; 191
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <__vector_18+0xc8>
     6d0:	57 c0       	rjmp	.+174    	; 0x780 <__vector_18+0x176>
     6d2:	fb 01       	movw	r30, r22
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	e6 56       	subi	r30, 0x66	; 102
     6da:	fd 4f       	sbci	r31, 0xFD	; 253
     6dc:	01 90       	ld	r0, Z+
     6de:	f0 81       	ld	r31, Z
     6e0:	e0 2d       	mov	r30, r0
     6e2:	80 e7       	ldi	r24, 0x70	; 112
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	09 95       	icall
     6e8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <packet.2164+0x2>
     6ec:	88 23       	and	r24, r24
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <__vector_18+0xe8>
     6f0:	40 c0       	rjmp	.+128    	; 0x772 <__vector_18+0x168>
     6f2:	e0 e7       	ldi	r30, 0x70	; 112
     6f4:	f1 e0       	ldi	r31, 0x01	; 1
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	96 95       	lsr	r25
     6fc:	87 95       	ror	r24
     6fe:	96 95       	lsr	r25
     700:	87 95       	ror	r24
     702:	96 95       	lsr	r25
     704:	87 95       	ror	r24
     706:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     70a:	80 81       	ld	r24, Z
     70c:	82 95       	swap	r24
     70e:	88 0f       	add	r24, r24
     710:	80 7e       	andi	r24, 0xE0	; 224
     712:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     716:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     71a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     71e:	82 81       	ldd	r24, Z+2	; 0x02
     720:	89 30       	cpi	r24, 0x09	; 9
     722:	19 f0       	breq	.+6      	; 0x72a <__vector_18+0x120>
     724:	81 11       	cpse	r24, r1
     726:	0d c0       	rjmp	.+26     	; 0x742 <__vector_18+0x138>
     728:	1c c0       	rjmp	.+56     	; 0x762 <__vector_18+0x158>
     72a:	e3 e7       	ldi	r30, 0x73	; 115
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	2b e7       	ldi	r18, 0x7B	; 123
     730:	31 e0       	ldi	r19, 0x01	; 1
     732:	aa ef       	ldi	r26, 0xFA	; 250
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	81 91       	ld	r24, Z+
     738:	8c 93       	st	X, r24
     73a:	e2 17       	cp	r30, r18
     73c:	f3 07       	cpc	r31, r19
     73e:	d9 f7       	brne	.-10     	; 0x736 <__vector_18+0x12c>
     740:	10 c0       	rjmp	.+32     	; 0x762 <__vector_18+0x158>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	20 e7       	ldi	r18, 0x70	; 112
     746:	31 e0       	ldi	r19, 0x01	; 1
     748:	aa ef       	ldi	r26, 0xFA	; 250
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e8 2f       	mov	r30, r24
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	e0 59       	subi	r30, 0x90	; 144
     752:	fe 4f       	sbci	r31, 0xFE	; 254
     754:	93 81       	ldd	r25, Z+3	; 0x03
     756:	9c 93       	st	X, r25
     758:	8f 5f       	subi	r24, 0xFF	; 255
     75a:	f9 01       	movw	r30, r18
     75c:	92 81       	ldd	r25, Z+2	; 0x02
     75e:	89 17       	cp	r24, r25
     760:	a8 f3       	brcs	.-22     	; 0x74c <__vector_18+0x142>
     762:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     766:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <packet.2164+0x2>
     76a:	80 5c       	subi	r24, 0xC0	; 192
     76c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     770:	04 c0       	rjmp	.+8      	; 0x77a <__vector_18+0x170>
     772:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     776:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     77a:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     77e:	7c c0       	rjmp	.+248    	; 0x878 <__vector_18+0x26e>
     780:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	8f 77       	andi	r24, 0x7F	; 127
     788:	89 2b       	or	r24, r25
     78a:	c1 f5       	brne	.+112    	; 0x7fc <__vector_18+0x1f2>
     78c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     790:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     794:	e0 e7       	ldi	r30, 0x70	; 112
     796:	f1 e0       	ldi	r31, 0x01	; 1
     798:	22 95       	swap	r18
     79a:	26 95       	lsr	r18
     79c:	27 70       	andi	r18, 0x07	; 7
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	82 2b       	or	r24, r18
     7ae:	91 83       	std	Z+1, r25	; 0x01
     7b0:	80 83       	st	Z, r24
     7b2:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     7b6:	8f 70       	andi	r24, 0x0F	; 15
     7b8:	82 83       	std	Z+2, r24	; 0x02
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	00 97       	sbiw	r24, 0x00	; 0
     7be:	59 f0       	breq	.+22     	; 0x7d6 <__vector_18+0x1cc>
     7c0:	e3 e7       	ldi	r30, 0x73	; 115
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	8d 58       	subi	r24, 0x8D	; 141
     7c6:	9e 4f       	sbci	r25, 0xFE	; 254
     7c8:	aa ef       	ldi	r26, 0xFA	; 250
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	2c 91       	ld	r18, X
     7ce:	21 93       	st	Z+, r18
     7d0:	8e 17       	cp	r24, r30
     7d2:	9f 07       	cpc	r25, r31
     7d4:	d9 f7       	brne	.-10     	; 0x7cc <__vector_18+0x1c2>
     7d6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     7da:	80 e8       	ldi	r24, 0x80	; 128
     7dc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     7e0:	fb 01       	movw	r30, r22
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	e6 56       	subi	r30, 0x66	; 102
     7e8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ea:	01 90       	ld	r0, Z+
     7ec:	f0 81       	ld	r31, Z
     7ee:	e0 2d       	mov	r30, r0
     7f0:	80 e7       	ldi	r24, 0x70	; 112
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	09 95       	icall
     7f6:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     7fa:	3e c0       	rjmp	.+124    	; 0x878 <__vector_18+0x26e>
     7fc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     800:	8f 75       	andi	r24, 0x5F	; 95
     802:	c1 f5       	brne	.+112    	; 0x874 <__vector_18+0x26a>
     804:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     808:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     80c:	e0 e7       	ldi	r30, 0x70	; 112
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	22 95       	swap	r18
     812:	26 95       	lsr	r18
     814:	27 70       	andi	r18, 0x07	; 7
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	82 2b       	or	r24, r18
     826:	91 83       	std	Z+1, r25	; 0x01
     828:	80 83       	st	Z, r24
     82a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     82e:	8f 70       	andi	r24, 0x0F	; 15
     830:	82 83       	std	Z+2, r24	; 0x02
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	59 f0       	breq	.+22     	; 0x84e <__vector_18+0x244>
     838:	e3 e7       	ldi	r30, 0x73	; 115
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	8d 58       	subi	r24, 0x8D	; 141
     83e:	9e 4f       	sbci	r25, 0xFE	; 254
     840:	aa ef       	ldi	r26, 0xFA	; 250
     842:	b0 e0       	ldi	r27, 0x00	; 0
     844:	2c 91       	ld	r18, X
     846:	21 93       	st	Z+, r18
     848:	e8 17       	cp	r30, r24
     84a:	f9 07       	cpc	r31, r25
     84c:	d9 f7       	brne	.-10     	; 0x844 <__vector_18+0x23a>
     84e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     852:	80 e8       	ldi	r24, 0x80	; 128
     854:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     858:	fb 01       	movw	r30, r22
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	e6 56       	subi	r30, 0x66	; 102
     860:	fd 4f       	sbci	r31, 0xFD	; 253
     862:	01 90       	ld	r0, Z+
     864:	f0 81       	ld	r31, Z
     866:	e0 2d       	mov	r30, r0
     868:	80 e7       	ldi	r24, 0x70	; 112
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	09 95       	icall
     86e:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     872:	02 c0       	rjmp	.+4      	; 0x878 <__vector_18+0x26e>
     874:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     878:	ff 91       	pop	r31
     87a:	ef 91       	pop	r30
     87c:	cf 91       	pop	r28
     87e:	bf 91       	pop	r27
     880:	af 91       	pop	r26
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	7f 91       	pop	r23
     888:	6f 91       	pop	r22
     88a:	5f 91       	pop	r21
     88c:	4f 91       	pop	r20
     88e:	3f 91       	pop	r19
     890:	2f 91       	pop	r18
     892:	0f 90       	pop	r0
     894:	0b be       	out	0x3b, r0	; 59
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <can_tx_kick>:
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	c8 2f       	mov	r28, r24
     8a6:	e8 2f       	mov	r30, r24
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	e6 56       	subi	r30, 0x66	; 102
     8b0:	fd 4f       	sbci	r31, 0xFD	; 253
     8b2:	01 90       	ld	r0, Z+
     8b4:	f0 81       	ld	r31, Z
     8b6:	e0 2d       	mov	r30, r0
     8b8:	68 2f       	mov	r22, r24
     8ba:	85 e6       	ldi	r24, 0x65	; 101
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	09 95       	icall
     8c0:	c2 95       	swap	r28
     8c2:	c0 7f       	andi	r28, 0xF0	; 240
     8c4:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     8c8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <packet.2190+0x2>
     8cc:	88 23       	and	r24, r24
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <can_tx_kick+0x32>
     8d0:	5c c0       	rjmp	.+184    	; 0x98a <can_tx_kick+0xea>
     8d2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     8d6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     8da:	8f 3f       	cpi	r24, 0xFF	; 255
     8dc:	c1 f1       	breq	.+112    	; 0x94e <can_tx_kick+0xae>
     8de:	e5 e6       	ldi	r30, 0x65	; 101
     8e0:	f1 e0       	ldi	r31, 0x01	; 1
     8e2:	80 81       	ld	r24, Z
     8e4:	91 81       	ldd	r25, Z+1	; 0x01
     8e6:	96 95       	lsr	r25
     8e8:	87 95       	ror	r24
     8ea:	96 95       	lsr	r25
     8ec:	87 95       	ror	r24
     8ee:	96 95       	lsr	r25
     8f0:	87 95       	ror	r24
     8f2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     8f6:	80 81       	ld	r24, Z
     8f8:	82 95       	swap	r24
     8fa:	88 0f       	add	r24, r24
     8fc:	80 7e       	andi	r24, 0xE0	; 224
     8fe:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     902:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     906:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     90a:	82 81       	ldd	r24, Z+2	; 0x02
     90c:	89 30       	cpi	r24, 0x09	; 9
     90e:	19 f0       	breq	.+6      	; 0x916 <can_tx_kick+0x76>
     910:	81 11       	cpse	r24, r1
     912:	0d c0       	rjmp	.+26     	; 0x92e <can_tx_kick+0x8e>
     914:	33 c0       	rjmp	.+102    	; 0x97c <can_tx_kick+0xdc>
     916:	e8 e6       	ldi	r30, 0x68	; 104
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	20 e7       	ldi	r18, 0x70	; 112
     91c:	31 e0       	ldi	r19, 0x01	; 1
     91e:	aa ef       	ldi	r26, 0xFA	; 250
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	81 91       	ld	r24, Z+
     924:	8c 93       	st	X, r24
     926:	e2 17       	cp	r30, r18
     928:	f3 07       	cpc	r31, r19
     92a:	d9 f7       	brne	.-10     	; 0x922 <can_tx_kick+0x82>
     92c:	27 c0       	rjmp	.+78     	; 0x97c <can_tx_kick+0xdc>
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	c5 e6       	ldi	r28, 0x65	; 101
     932:	d1 e0       	ldi	r29, 0x01	; 1
     934:	aa ef       	ldi	r26, 0xFA	; 250
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e8 2f       	mov	r30, r24
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	eb 59       	subi	r30, 0x9B	; 155
     93e:	fe 4f       	sbci	r31, 0xFE	; 254
     940:	93 81       	ldd	r25, Z+3	; 0x03
     942:	9c 93       	st	X, r25
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	9a 81       	ldd	r25, Y+2	; 0x02
     948:	89 17       	cp	r24, r25
     94a:	b0 f3       	brcs	.-20     	; 0x938 <can_tx_kick+0x98>
     94c:	17 c0       	rjmp	.+46     	; 0x97c <can_tx_kick+0xdc>
     94e:	e5 e6       	ldi	r30, 0x65	; 101
     950:	f1 e0       	ldi	r31, 0x01	; 1
     952:	80 81       	ld	r24, Z
     954:	91 81       	ldd	r25, Z+1	; 0x01
     956:	96 95       	lsr	r25
     958:	87 95       	ror	r24
     95a:	96 95       	lsr	r25
     95c:	87 95       	ror	r24
     95e:	96 95       	lsr	r25
     960:	87 95       	ror	r24
     962:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     966:	80 81       	ld	r24, Z
     968:	82 95       	swap	r24
     96a:	88 0f       	add	r24, r24
     96c:	80 7e       	andi	r24, 0xE0	; 224
     96e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     972:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     97c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <packet.2190+0x2>
     980:	80 5c       	subi	r24, 0xC0	; 192
     982:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	01 c0       	rjmp	.+2      	; 0x98c <can_tx_kick+0xec>
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <prepare_rx>:

bool prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
     992:	8f 30       	cpi	r24, 0x0F	; 15
     994:	08 f0       	brcs	.+2      	; 0x998 <prepare_rx+0x6>
     996:	6d c0       	rjmp	.+218    	; 0xa72 <prepare_rx+0xe0>
		return true;
	canlist[ (unsigned)mob]=callback;
     998:	e8 2f       	mov	r30, r24
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	e6 56       	subi	r30, 0x66	; 102
     9a2:	fd 4f       	sbci	r31, 0xFD	; 253
     9a4:	31 83       	std	Z+1, r19	; 0x01
     9a6:	20 83       	st	Z, r18

	CANPAGE = mob << 4;
     9a8:	98 2f       	mov	r25, r24
     9aa:	92 95       	swap	r25
     9ac:	90 7f       	andi	r25, 0xF0	; 240
     9ae:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if( callback==0)      // release this MOB
     9b2:	23 2b       	or	r18, r19
     9b4:	d9 f4       	brne	.+54     	; 0x9ec <prepare_rx+0x5a>
	{
		CANSTMOB = 0x00;      // cancel pending operation
     9b6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0x00;
     9ba:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		unsigned mask=1<<mob;
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	a9 01       	movw	r20, r18
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <prepare_rx+0x38>
     9c6:	44 0f       	add	r20, r20
     9c8:	55 1f       	adc	r21, r21
     9ca:	8a 95       	dec	r24
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <prepare_rx+0x34>
     9ce:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
     9d0:	ee ed       	ldi	r30, 0xDE	; 222
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	20 81       	ld	r18, Z
     9d6:	80 95       	com	r24
     9d8:	82 23       	and	r24, r18
     9da:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
     9dc:	ef ed       	ldi	r30, 0xDF	; 223
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	90 95       	com	r25
     9e4:	89 23       	and	r24, r25
     9e6:	80 83       	st	Z, r24
		return false;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	08 95       	ret
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
     9ec:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     9f0:	90 7c       	andi	r25, 0xC0	; 192
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <prepare_rx+0x64>
     9f4:	40 c0       	rjmp	.+128    	; 0xa76 <prepare_rx+0xe4>
		return true;      // no vacancy ...
	CANSTMOB = 0x00;      // cancel pending operation
     9f6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     9fa:	ef ee       	ldi	r30, 0xEF	; 239
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	10 82       	st	Z, r1
	CANHPMOB = 0x00;    // enable direct mob indexing, see docu
     a00:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANIDT1=id >>3;
     a04:	9b 01       	movw	r18, r22
     a06:	36 95       	lsr	r19
     a08:	27 95       	ror	r18
     a0a:	36 95       	lsr	r19
     a0c:	27 95       	ror	r18
     a0e:	36 95       	lsr	r19
     a10:	27 95       	ror	r18
     a12:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2=id <<5;
     a16:	62 95       	swap	r22
     a18:	66 0f       	add	r22, r22
     a1a:	60 7e       	andi	r22, 0xE0	; 224
     a1c:	60 93 f2 00 	sts	0x00F2, r22	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDM1=idmask >>3;
     a20:	9a 01       	movw	r18, r20
     a22:	36 95       	lsr	r19
     a24:	27 95       	ror	r18
     a26:	36 95       	lsr	r19
     a28:	27 95       	ror	r18
     a2a:	36 95       	lsr	r19
     a2c:	27 95       	ror	r18
     a2e:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2=idmask <<5;
     a32:	42 95       	swap	r20
     a34:	44 0f       	add	r20, r20
     a36:	40 7e       	andi	r20, 0xE0	; 224
     a38:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM3=0;
     a3c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM4=0;
     a40:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANCDMOB=0x80; // enable RX
     a44:	90 e8       	ldi	r25, 0x80	; 128
     a46:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	a9 01       	movw	r20, r18
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <prepare_rx+0xc2>
     a50:	44 0f       	add	r20, r20
     a52:	55 1f       	adc	r21, r21
     a54:	8a 95       	dec	r24
     a56:	e2 f7       	brpl	.-8      	; 0xa50 <prepare_rx+0xbe>
     a58:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
     a5a:	ee ed       	ldi	r30, 0xDE	; 222
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	20 81       	ld	r18, Z
     a60:	82 2b       	or	r24, r18
     a62:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
     a64:	ef ed       	ldi	r30, 0xDF	; 223
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	89 2b       	or	r24, r25
     a6c:	80 83       	st	Z, r24
	return false;
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	08 95       	ret
}

bool prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
		return true;
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return false;
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
		return true;      // no vacancy ...
     a76:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return false;
}
     a78:	08 95       	ret

00000a7a <prepare_tx>:

bool prepare_tx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
     a7a:	8f 30       	cpi	r24, 0x0F	; 15
     a7c:	08 f0       	brcs	.+2      	; 0xa80 <prepare_tx+0x6>
     a7e:	49 c0       	rjmp	.+146    	; 0xb12 <prepare_tx+0x98>
		return true;
	canlist[ (unsigned)mob]=callback;
     a80:	e8 2f       	mov	r30, r24
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	e6 56       	subi	r30, 0x66	; 102
     a8a:	fd 4f       	sbci	r31, 0xFD	; 253
     a8c:	31 83       	std	Z+1, r19	; 0x01
     a8e:	20 83       	st	Z, r18

	CANPAGE = mob << 4;
     a90:	98 2f       	mov	r25, r24
     a92:	92 95       	swap	r25
     a94:	90 7f       	andi	r25, 0xF0	; 240
     a96:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if( callback==0)      // release this MOB
     a9a:	23 2b       	or	r18, r19
     a9c:	d9 f4       	brne	.+54     	; 0xad4 <prepare_tx+0x5a>
	{
		CANSTMOB = 0x00;      // cancel pending operation
     a9e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0x00;
     aa2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		unsigned mask=1<<mob;
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	a9 01       	movw	r20, r18
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <prepare_tx+0x38>
     aae:	44 0f       	add	r20, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	8a 95       	dec	r24
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <prepare_tx+0x34>
     ab6:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
     ab8:	ee ed       	ldi	r30, 0xDE	; 222
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	20 81       	ld	r18, Z
     abe:	80 95       	com	r24
     ac0:	82 23       	and	r24, r18
     ac2:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
     ac4:	ef ed       	ldi	r30, 0xDF	; 223
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	90 95       	com	r25
     acc:	89 23       	and	r24, r25
     ace:	80 83       	st	Z, r24
		return false;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	08 95       	ret
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
     ad4:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     ad8:	90 7c       	andi	r25, 0xC0	; 192
     ada:	e9 f4       	brne	.+58     	; 0xb16 <prepare_tx+0x9c>
		return false;     // no vacancy ...
	CANSTMOB = 0x00;      // cancel pending operation
     adc:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     ae0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANHPMOB = 0x00;    // enable direct mob indexing, see docu
     ae4:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	//CANIDT1=id >>3;
	//CANIDT2=id <<5;
	//CANCDMOB=0x40; // enable TX
	unsigned mask=1<<mob;
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	a9 01       	movw	r20, r18
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <prepare_tx+0x7a>
     af0:	44 0f       	add	r20, r20
     af2:	55 1f       	adc	r21, r21
     af4:	8a 95       	dec	r24
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <prepare_tx+0x76>
     af8:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
     afa:	ee ed       	ldi	r30, 0xDE	; 222
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	20 81       	ld	r18, Z
     b00:	82 2b       	or	r24, r18
     b02:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
     b04:	ef ed       	ldi	r30, 0xDF	; 223
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	89 2b       	or	r24, r25
     b0c:	80 83       	st	Z, r24
	return true;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	08 95       	ret
}

bool prepare_tx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
		return true;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return false;
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
		return false;     // no vacancy ...
     b16:	80 e0       	ldi	r24, 0x00	; 0
	//CANCDMOB=0x40; // enable TX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return true;
}
     b18:	08 95       	ret

00000b1a <can_init>:

void can_init( void)
{
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
	unsigned mob;
#ifdef BAUD_500K
	CANBT1=0x02;  // 16 MHz, 500kbit/s
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2=0x0C;
     b24:	8c e0       	ldi	r24, 0x0C	; 12
     b26:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3=0x37;
     b2a:	87 e3       	ldi	r24, 0x37	; 55
     b2c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     b30:	80 e0       	ldi	r24, 0x00	; 0
	CANBT3=0x36;
#endif

	for (mob = 0; mob < NO_MOBS; mob++)
	{
		CANPAGE  = (mob << 4);
     b32:	cd ee       	ldi	r28, 0xED	; 237
     b34:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
     b36:	ae ee       	ldi	r26, 0xEE	; 238
     b38:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
     b3a:	ef ee       	ldi	r30, 0xEF	; 239
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT3=0x36;
#endif

	for (mob = 0; mob < NO_MOBS; mob++)
	{
		CANPAGE  = (mob << 4);
     b3e:	98 2f       	mov	r25, r24
     b40:	92 95       	swap	r25
     b42:	90 7f       	andi	r25, 0xF0	; 240
     b44:	98 83       	st	Y, r25
		CANSTMOB = 0;
     b46:	1c 92       	st	X, r1
		CANCDMOB = 0;
     b48:	10 82       	st	Z, r1
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
	CANBT1=0x00;  // 16 MHz, 1000kbit/s
	CANBT2=0x0C;
	CANBT3=0x36;
#endif

	for (mob = 0; mob < NO_MOBS; mob++)
     b4c:	8f 30       	cpi	r24, 0x0F	; 15
     b4e:	b9 f7       	brne	.-18     	; 0xb3e <can_init+0x24>
	{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
	}
	CANGCON |= 0x02;
     b50:	e8 ed       	ldi	r30, 0xD8	; 216
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	82 60       	ori	r24, 0x02	; 2
     b58:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX) | (1<< ENTX);
     b5a:	80 eb       	ldi	r24, 0xB0	; 176
     b5c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <setCANFTdata>:
void Send_buffer_flush(struct ringBufSCAN* _this, const int clearBuffer) {
	_this->count = 0;
	_this->head = 0;
	_this->tail = 0;
	if (clearBuffer) {
		memset(_this->buf, 0, sizeof (_this->buf));
     b66:	44 23       	and	r20, r20
     b68:	69 f0       	breq	.+26     	; 0xb84 <setCANFTdata+0x1e>
     b6a:	fc 01       	movw	r30, r24
     b6c:	ee 0f       	add	r30, r30
     b6e:	ff 1f       	adc	r31, r31
     b70:	ef 51       	subi	r30, 0x1F	; 31
     b72:	fb 4f       	sbci	r31, 0xFB	; 251
     b74:	71 83       	std	Z+1, r23	; 0x01
     b76:	60 83       	st	Z, r22
     b78:	fc 01       	movw	r30, r24
     b7a:	ef 5c       	subi	r30, 0xCF	; 207
     b7c:	f9 4f       	sbci	r31, 0xF9	; 249
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	20 83       	st	Z, r18
     b82:	08 95       	ret
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	e0 91 df 04 	lds	r30, 0x04DF	; 0x8004df <receiveArrayAddressCAN>
     b8c:	f0 91 e0 04 	lds	r31, 0x04E0	; 0x8004e0 <receiveArrayAddressCAN+0x1>
     b90:	e8 0f       	add	r30, r24
     b92:	f9 1f       	adc	r31, r25
     b94:	71 83       	std	Z+1, r23	; 0x01
     b96:	60 83       	st	Z, r22
     b98:	fc 01       	movw	r30, r24
     b9a:	e5 5e       	subi	r30, 0xE5	; 229
     b9c:	f9 4f       	sbci	r31, 0xF9	; 249
     b9e:	21 e0       	ldi	r18, 0x01	; 1
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	31 83       	std	Z+1, r19	; 0x01
     ba4:	20 83       	st	Z, r18
     ba6:	08 95       	ret

00000ba8 <getCANFTdatas>:
     ba8:	66 23       	and	r22, r22
     baa:	41 f0       	breq	.+16     	; 0xbbc <getCANFTdatas+0x14>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	fc 01       	movw	r30, r24
     bb2:	ef 51       	subi	r30, 0x1F	; 31
     bb4:	fb 4f       	sbci	r31, 0xFB	; 251
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01
     bba:	08 95       	ret
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	e0 91 df 04 	lds	r30, 0x04DF	; 0x8004df <receiveArrayAddressCAN>
     bc4:	f0 91 e0 04 	lds	r31, 0x04E0	; 0x8004e0 <receiveArrayAddressCAN+0x1>
     bc8:	e8 0f       	add	r30, r24
     bca:	f9 1f       	adc	r31, r25
     bcc:	80 81       	ld	r24, Z
     bce:	91 81       	ldd	r25, Z+1	; 0x01
     bd0:	08 95       	ret

00000bd2 <getCANFT_Flag>:
     bd2:	fc 01       	movw	r30, r24
     bd4:	e6 0f       	add	r30, r22
     bd6:	f7 1f       	adc	r31, r23
     bd8:	80 81       	ld	r24, Z
     bda:	81 11       	cpse	r24, r1
     bdc:	10 82       	st	Z, r1
     bde:	08 95       	ret

00000be0 <Send_buffer_put>:
     be0:	fc 01       	movw	r30, r24
     be2:	ec 5a       	subi	r30, 0xAC	; 172
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	20 81       	ld	r18, Z
     be8:	31 81       	ldd	r19, Z+1	; 0x01
     bea:	25 32       	cpi	r18, 0x25	; 37
     bec:	31 05       	cpc	r19, r1
     bee:	8c f5       	brge	.+98     	; 0xc52 <Send_buffer_put+0x72>
     bf0:	34 97       	sbiw	r30, 0x04	; 4
     bf2:	01 90       	ld	r0, Z+
     bf4:	f0 81       	ld	r31, Z
     bf6:	e0 2d       	mov	r30, r0
     bf8:	df 01       	movw	r26, r30
     bfa:	aa 0f       	add	r26, r26
     bfc:	bb 1f       	adc	r27, r27
     bfe:	a8 0f       	add	r26, r24
     c00:	b9 1f       	adc	r27, r25
     c02:	6d 93       	st	X+, r22
     c04:	7c 93       	st	X, r23
     c06:	bf 01       	movw	r22, r30
     c08:	6f 5f       	subi	r22, 0xFF	; 255
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255
     c0c:	68 32       	cpi	r22, 0x28	; 40
     c0e:	71 05       	cpc	r23, r1
     c10:	d0 f4       	brcc	.+52     	; 0xc46 <Send_buffer_put+0x66>
     c12:	66 0f       	add	r22, r22
     c14:	77 1f       	adc	r23, r23
     c16:	dc 01       	movw	r26, r24
     c18:	a6 0f       	add	r26, r22
     c1a:	b7 1f       	adc	r27, r23
     c1c:	4d 93       	st	X+, r20
     c1e:	5c 93       	st	X, r21
     c20:	32 96       	adiw	r30, 0x02	; 2
     c22:	e8 32       	cpi	r30, 0x28	; 40
     c24:	f1 05       	cpc	r31, r1
     c26:	10 f0       	brcs	.+4      	; 0xc2c <Send_buffer_put+0x4c>
     c28:	e0 e0       	ldi	r30, 0x00	; 0
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	dc 01       	movw	r26, r24
     c2e:	a0 5b       	subi	r26, 0xB0	; 176
     c30:	bf 4f       	sbci	r27, 0xFF	; 255
     c32:	ed 93       	st	X+, r30
     c34:	fc 93       	st	X, r31
     c36:	fc 01       	movw	r30, r24
     c38:	ec 5a       	subi	r30, 0xAC	; 172
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	2e 5f       	subi	r18, 0xFE	; 254
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
     c40:	31 83       	std	Z+1, r19	; 0x01
     c42:	20 83       	st	Z, r18
     c44:	08 95       	ret
     c46:	fc 01       	movw	r30, r24
     c48:	51 83       	std	Z+1, r21	; 0x01
     c4a:	40 83       	st	Z, r20
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	ed cf       	rjmp	.-38     	; 0xc2c <Send_buffer_put+0x4c>
     c52:	08 95       	ret

00000c54 <ReceiveCANFast>:
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	ec 01       	movw	r28, r24
     c5c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <receiveMode>
     c60:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <receiveMode+0x1>
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	09 f0       	breq	.+2      	; 0xc6a <ReceiveCANFast+0x16>
     c68:	73 c0       	rjmp	.+230    	; 0xd50 <ReceiveCANFast+0xfc>
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	88 50       	subi	r24, 0x08	; 8
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	08 f0       	brcs	.+2      	; 0xc74 <ReceiveCANFast+0x20>
     c72:	46 c0       	rjmp	.+140    	; 0xd00 <ReceiveCANFast+0xac>
     c74:	6b 81       	ldd	r22, Y+3	; 0x03
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	76 2f       	mov	r23, r22
     c7a:	66 27       	eor	r22, r22
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	68 0f       	add	r22, r24
     c80:	71 1d       	adc	r23, r1
     c82:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <MaxIndex>
     c86:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <MaxIndex+0x1>
     c8a:	68 17       	cp	r22, r24
     c8c:	79 07       	cpc	r23, r25
     c8e:	80 f4       	brcc	.+32     	; 0xcb0 <ReceiveCANFast+0x5c>
     c90:	4d 81       	ldd	r20, Y+5	; 0x05
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	54 2f       	mov	r21, r20
     c96:	44 27       	eor	r20, r20
     c98:	8e 81       	ldd	r24, Y+6	; 0x06
     c9a:	48 0f       	add	r20, r24
     c9c:	51 1d       	adc	r21, r1
     c9e:	85 ec       	ldi	r24, 0xC5	; 197
     ca0:	95 e0       	ldi	r25, 0x05	; 5
     ca2:	9e df       	rcall	.-196    	; 0xbe0 <Send_buffer_put>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <ReceivedData+0x1>
     cac:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ReceivedData>
     cb0:	6f 81       	ldd	r22, Y+7	; 0x07
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	76 2f       	mov	r23, r22
     cb6:	66 27       	eor	r22, r22
     cb8:	88 85       	ldd	r24, Y+8	; 0x08
     cba:	68 0f       	add	r22, r24
     cbc:	71 1d       	adc	r23, r1
     cbe:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <MaxIndex>
     cc2:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <MaxIndex+0x1>
     cc6:	68 17       	cp	r22, r24
     cc8:	79 07       	cpc	r23, r25
     cca:	80 f4       	brcc	.+32     	; 0xcec <ReceiveCANFast+0x98>
     ccc:	49 85       	ldd	r20, Y+9	; 0x09
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	54 2f       	mov	r21, r20
     cd2:	44 27       	eor	r20, r20
     cd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd6:	48 0f       	add	r20, r24
     cd8:	51 1d       	adc	r21, r1
     cda:	85 ec       	ldi	r24, 0xC5	; 197
     cdc:	95 e0       	ldi	r25, 0x05	; 5
     cde:	80 df       	rcall	.-256    	; 0xbe0 <Send_buffer_put>
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <ReceivedData+0x1>
     ce8:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ReceivedData>
     cec:	48 81       	ld	r20, Y
     cee:	59 81       	ldd	r21, Y+1	; 0x01
     cf0:	4f 71       	andi	r20, 0x1F	; 31
     cf2:	55 27       	eor	r21, r21
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	85 ec       	ldi	r24, 0xC5	; 197
     cfa:	95 e0       	ldi	r25, 0x05	; 5
     cfc:	71 df       	rcall	.-286    	; 0xbe0 <Send_buffer_put>
     cfe:	98 c0       	rjmp	.+304    	; 0xe30 <ReceiveCANFast+0x1dc>
     d00:	6b 81       	ldd	r22, Y+3	; 0x03
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	76 2f       	mov	r23, r22
     d06:	66 27       	eor	r22, r22
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	68 0f       	add	r22, r24
     d0c:	71 1d       	adc	r23, r1
     d0e:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <MaxIndex>
     d12:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <MaxIndex+0x1>
     d16:	68 17       	cp	r22, r24
     d18:	79 07       	cpc	r23, r25
     d1a:	80 f4       	brcc	.+32     	; 0xd3c <ReceiveCANFast+0xe8>
     d1c:	4d 81       	ldd	r20, Y+5	; 0x05
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	54 2f       	mov	r21, r20
     d22:	44 27       	eor	r20, r20
     d24:	8e 81       	ldd	r24, Y+6	; 0x06
     d26:	48 0f       	add	r20, r24
     d28:	51 1d       	adc	r21, r1
     d2a:	85 ec       	ldi	r24, 0xC5	; 197
     d2c:	95 e0       	ldi	r25, 0x05	; 5
     d2e:	58 df       	rcall	.-336    	; 0xbe0 <Send_buffer_put>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <ReceivedData+0x1>
     d38:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ReceivedData>
     d3c:	48 81       	ld	r20, Y
     d3e:	59 81       	ldd	r21, Y+1	; 0x01
     d40:	4f 71       	andi	r20, 0x1F	; 31
     d42:	55 27       	eor	r21, r21
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	85 ec       	ldi	r24, 0xC5	; 197
     d4a:	95 e0       	ldi	r25, 0x05	; 5
     d4c:	49 df       	rcall	.-366    	; 0xbe0 <Send_buffer_put>
     d4e:	70 c0       	rjmp	.+224    	; 0xe30 <ReceiveCANFast+0x1dc>
     d50:	68 81       	ld	r22, Y
     d52:	79 81       	ldd	r23, Y+1	; 0x01
     d54:	cb 01       	movw	r24, r22
     d56:	00 24       	eor	r0, r0
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	00 1c       	adc	r0, r0
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	00 1c       	adc	r0, r0
     d64:	89 2f       	mov	r24, r25
     d66:	90 2d       	mov	r25, r0
     d68:	18 2f       	mov	r17, r24
     d6a:	11 70       	andi	r17, 0x01	; 1
     d6c:	6f 71       	andi	r22, 0x1F	; 31
     d6e:	77 27       	eor	r23, r23
     d70:	41 2f       	mov	r20, r17
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	f7 de       	rcall	.-530    	; 0xb66 <setCANFTdata>
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	88 50       	subi	r24, 0x08	; 8
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	d8 f5       	brcc	.+118    	; 0xdf6 <ReceiveCANFast+0x1a2>
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	98 2f       	mov	r25, r24
     d86:	88 27       	eor	r24, r24
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	82 0f       	add	r24, r18
     d8c:	91 1d       	adc	r25, r1
     d8e:	20 91 2f 06 	lds	r18, 0x062F	; 0x80062f <MaxIndex>
     d92:	30 91 30 06 	lds	r19, 0x0630	; 0x800630 <MaxIndex+0x1>
     d96:	82 17       	cp	r24, r18
     d98:	93 07       	cpc	r25, r19
     d9a:	78 f4       	brcc	.+30     	; 0xdba <ReceiveCANFast+0x166>
     d9c:	6d 81       	ldd	r22, Y+5	; 0x05
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	76 2f       	mov	r23, r22
     da2:	66 27       	eor	r22, r22
     da4:	2e 81       	ldd	r18, Y+6	; 0x06
     da6:	62 0f       	add	r22, r18
     da8:	71 1d       	adc	r23, r1
     daa:	41 2f       	mov	r20, r17
     dac:	dc de       	rcall	.-584    	; 0xb66 <setCANFTdata>
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <ReceivedData+0x1>
     db6:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ReceivedData>
     dba:	8f 81       	ldd	r24, Y+7	; 0x07
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	98 2f       	mov	r25, r24
     dc0:	88 27       	eor	r24, r24
     dc2:	28 85       	ldd	r18, Y+8	; 0x08
     dc4:	82 0f       	add	r24, r18
     dc6:	91 1d       	adc	r25, r1
     dc8:	20 91 2f 06 	lds	r18, 0x062F	; 0x80062f <MaxIndex>
     dcc:	30 91 30 06 	lds	r19, 0x0630	; 0x800630 <MaxIndex+0x1>
     dd0:	82 17       	cp	r24, r18
     dd2:	93 07       	cpc	r25, r19
     dd4:	68 f5       	brcc	.+90     	; 0xe30 <ReceiveCANFast+0x1dc>
     dd6:	69 85       	ldd	r22, Y+9	; 0x09
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	76 2f       	mov	r23, r22
     ddc:	66 27       	eor	r22, r22
     dde:	2a 85       	ldd	r18, Y+10	; 0x0a
     de0:	62 0f       	add	r22, r18
     de2:	71 1d       	adc	r23, r1
     de4:	41 2f       	mov	r20, r17
     de6:	bf de       	rcall	.-642    	; 0xb66 <setCANFTdata>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <ReceivedData+0x1>
     df0:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ReceivedData>
     df4:	1d c0       	rjmp	.+58     	; 0xe30 <ReceiveCANFast+0x1dc>
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	98 2f       	mov	r25, r24
     dfc:	88 27       	eor	r24, r24
     dfe:	2c 81       	ldd	r18, Y+4	; 0x04
     e00:	82 0f       	add	r24, r18
     e02:	91 1d       	adc	r25, r1
     e04:	20 91 2f 06 	lds	r18, 0x062F	; 0x80062f <MaxIndex>
     e08:	30 91 30 06 	lds	r19, 0x0630	; 0x800630 <MaxIndex+0x1>
     e0c:	82 17       	cp	r24, r18
     e0e:	93 07       	cpc	r25, r19
     e10:	78 f4       	brcc	.+30     	; 0xe30 <ReceiveCANFast+0x1dc>
     e12:	6d 81       	ldd	r22, Y+5	; 0x05
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	76 2f       	mov	r23, r22
     e18:	66 27       	eor	r22, r22
     e1a:	2e 81       	ldd	r18, Y+6	; 0x06
     e1c:	62 0f       	add	r22, r18
     e1e:	71 1d       	adc	r23, r1
     e20:	41 2f       	mov	r20, r17
     e22:	a1 de       	rcall	.-702    	; 0xb66 <setCANFTdata>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <ReceivedData+0x1>
     e2c:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ReceivedData>
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	08 95       	ret

00000e38 <ToSendCAN>:
     e38:	ab 01       	movw	r20, r22
     e3a:	bc 01       	movw	r22, r24
     e3c:	89 e8       	ldi	r24, 0x89	; 137
     e3e:	94 e0       	ldi	r25, 0x04	; 4
     e40:	cf ce       	rjmp	.-610    	; 0xbe0 <Send_buffer_put>
     e42:	08 95       	ret

00000e44 <Transmit_buffer_put>:
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	fc 01       	movw	r30, r24
     e4e:	e8 54       	subi	r30, 0x48	; 72
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	01 90       	ld	r0, Z+
     e54:	f0 81       	ld	r31, Z
     e56:	e0 2d       	mov	r30, r0
     e58:	e7 35       	cpi	r30, 0x57	; 87
     e5a:	f1 05       	cpc	r31, r1
     e5c:	0c f0       	brlt	.+2      	; 0xe60 <Transmit_buffer_put+0x1c>
     e5e:	55 c0       	rjmp	.+170    	; 0xf0a <Transmit_buffer_put+0xc6>
     e60:	dc 01       	movw	r26, r24
     e62:	ac 54       	subi	r26, 0x4C	; 76
     e64:	bf 4f       	sbci	r27, 0xFF	; 255
     e66:	0d 90       	ld	r0, X+
     e68:	bc 91       	ld	r27, X
     e6a:	a0 2d       	mov	r26, r0
     e6c:	ed 01       	movw	r28, r26
     e6e:	cc 0f       	add	r28, r28
     e70:	dd 1f       	adc	r29, r29
     e72:	c8 0f       	add	r28, r24
     e74:	d9 1f       	adc	r29, r25
     e76:	79 83       	std	Y+1, r23	; 0x01
     e78:	68 83       	st	Y, r22
     e7a:	bd 01       	movw	r22, r26
     e7c:	6f 5f       	subi	r22, 0xFF	; 255
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	6a 35       	cpi	r22, 0x5A	; 90
     e82:	71 05       	cpc	r23, r1
     e84:	88 f5       	brcc	.+98     	; 0xee8 <Transmit_buffer_put+0xa4>
     e86:	ec 01       	movw	r28, r24
     e88:	cc 54       	subi	r28, 0x4C	; 76
     e8a:	df 4f       	sbci	r29, 0xFF	; 255
     e8c:	79 83       	std	Y+1, r23	; 0x01
     e8e:	68 83       	st	Y, r22
     e90:	24 96       	adiw	r28, 0x04	; 4
     e92:	8f 01       	movw	r16, r30
     e94:	0f 5f       	subi	r16, 0xFF	; 255
     e96:	1f 4f       	sbci	r17, 0xFF	; 255
     e98:	19 83       	std	Y+1, r17	; 0x01
     e9a:	08 83       	st	Y, r16
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	ec 01       	movw	r28, r24
     ea2:	c6 0f       	add	r28, r22
     ea4:	d7 1f       	adc	r29, r23
     ea6:	59 83       	std	Y+1, r21	; 0x01
     ea8:	48 83       	st	Y, r20
     eaa:	ad 01       	movw	r20, r26
     eac:	4e 5f       	subi	r20, 0xFE	; 254
     eae:	5f 4f       	sbci	r21, 0xFF	; 255
     eb0:	4a 35       	cpi	r20, 0x5A	; 90
     eb2:	51 05       	cpc	r21, r1
     eb4:	20 f5       	brcc	.+72     	; 0xefe <Transmit_buffer_put+0xba>
     eb6:	44 0f       	add	r20, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	ec 01       	movw	r28, r24
     ebc:	c4 0f       	add	r28, r20
     ebe:	d5 1f       	adc	r29, r21
     ec0:	39 83       	std	Y+1, r19	; 0x01
     ec2:	28 83       	st	Y, r18
     ec4:	13 96       	adiw	r26, 0x03	; 3
     ec6:	aa 35       	cpi	r26, 0x5A	; 90
     ec8:	b1 05       	cpc	r27, r1
     eca:	10 f0       	brcs	.+4      	; 0xed0 <Transmit_buffer_put+0x8c>
     ecc:	a0 e0       	ldi	r26, 0x00	; 0
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ec 01       	movw	r28, r24
     ed2:	cc 54       	subi	r28, 0x4C	; 76
     ed4:	df 4f       	sbci	r29, 0xFF	; 255
     ed6:	b9 83       	std	Y+1, r27	; 0x01
     ed8:	a8 83       	st	Y, r26
     eda:	dc 01       	movw	r26, r24
     edc:	a8 54       	subi	r26, 0x48	; 72
     ede:	bf 4f       	sbci	r27, 0xFF	; 255
     ee0:	33 96       	adiw	r30, 0x03	; 3
     ee2:	ed 93       	st	X+, r30
     ee4:	fc 93       	st	X, r31
     ee6:	11 c0       	rjmp	.+34     	; 0xf0a <Transmit_buffer_put+0xc6>
     ee8:	dc 01       	movw	r26, r24
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	5c 93       	st	X, r21
     eee:	4e 93       	st	-X, r20
     ef0:	13 96       	adiw	r26, 0x03	; 3
     ef2:	3c 93       	st	X, r19
     ef4:	2e 93       	st	-X, r18
     ef6:	12 97       	sbiw	r26, 0x02	; 2
     ef8:	a2 e0       	ldi	r26, 0x02	; 2
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e9 cf       	rjmp	.-46     	; 0xed0 <Transmit_buffer_put+0x8c>
     efe:	dc 01       	movw	r26, r24
     f00:	2d 93       	st	X+, r18
     f02:	3c 93       	st	X, r19
     f04:	a1 e0       	ldi	r26, 0x01	; 1
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e3 cf       	rjmp	.-58     	; 0xed0 <Transmit_buffer_put+0x8c>
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <Send_buffer_get>:
     f14:	fc 01       	movw	r30, r24
     f16:	ec 5a       	subi	r30, 0xAC	; 172
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	40 81       	ld	r20, Z
     f1c:	51 81       	ldd	r21, Z+1	; 0x01
     f1e:	14 16       	cp	r1, r20
     f20:	15 06       	cpc	r1, r21
     f22:	e4 f4       	brge	.+56     	; 0xf5c <Send_buffer_get+0x48>
     f24:	32 97       	sbiw	r30, 0x02	; 2
     f26:	20 81       	ld	r18, Z
     f28:	31 81       	ldd	r19, Z+1	; 0x01
     f2a:	f9 01       	movw	r30, r18
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	e8 0f       	add	r30, r24
     f32:	f9 1f       	adc	r31, r25
     f34:	60 81       	ld	r22, Z
     f36:	71 81       	ldd	r23, Z+1	; 0x01
     f38:	2f 5f       	subi	r18, 0xFF	; 255
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	28 32       	cpi	r18, 0x28	; 40
     f3e:	31 05       	cpc	r19, r1
     f40:	10 f0       	brcs	.+4      	; 0xf46 <Send_buffer_get+0x32>
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	fc 01       	movw	r30, r24
     f48:	ee 5a       	subi	r30, 0xAE	; 174
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	31 83       	std	Z+1, r19	; 0x01
     f4e:	20 83       	st	Z, r18
     f50:	32 96       	adiw	r30, 0x02	; 2
     f52:	41 50       	subi	r20, 0x01	; 1
     f54:	51 09       	sbc	r21, r1
     f56:	51 83       	std	Z+1, r21	; 0x01
     f58:	40 83       	st	Z, r20
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <Send_buffer_get+0x4c>
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	cb 01       	movw	r24, r22
     f62:	08 95       	ret

00000f64 <sendDataCAN>:
     f64:	af 92       	push	r10
     f66:	bf 92       	push	r11
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	6c 01       	movw	r12, r24
     f7a:	a0 90 70 03 	lds	r10, 0x0370	; 0x800370 <TransmitBuffer+0xb8>
     f7e:	b0 90 71 03 	lds	r11, 0x0371	; 0x800371 <TransmitBuffer+0xb9>
     f82:	e0 90 dd 04 	lds	r14, 0x04DD	; 0x8004dd <ring_buffer_CAN+0x54>
     f86:	f0 90 de 04 	lds	r15, 0x04DE	; 0x8004de <ring_buffer_CAN+0x55>
     f8a:	f5 94       	asr	r15
     f8c:	e7 94       	ror	r14
     f8e:	1e 14       	cp	r1, r14
     f90:	1f 04       	cpc	r1, r15
     f92:	9c f4       	brge	.+38     	; 0xfba <sendDataCAN+0x56>
     f94:	c0 e0       	ldi	r28, 0x00	; 0
     f96:	d0 e0       	ldi	r29, 0x00	; 0
     f98:	89 e8       	ldi	r24, 0x89	; 137
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	bb df       	rcall	.-138    	; 0xf14 <Send_buffer_get>
     f9e:	8c 01       	movw	r16, r24
     fa0:	89 e8       	ldi	r24, 0x89	; 137
     fa2:	94 e0       	ldi	r25, 0x04	; 4
     fa4:	b7 df       	rcall	.-146    	; 0xf14 <Send_buffer_get>
     fa6:	9c 01       	movw	r18, r24
     fa8:	a8 01       	movw	r20, r16
     faa:	b6 01       	movw	r22, r12
     fac:	88 eb       	ldi	r24, 0xB8	; 184
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	49 df       	rcall	.-366    	; 0xe44 <Transmit_buffer_put>
     fb2:	21 96       	adiw	r28, 0x01	; 1
     fb4:	ec 16       	cp	r14, r28
     fb6:	fd 06       	cpc	r15, r29
     fb8:	79 f7       	brne	.-34     	; 0xf98 <sendDataCAN+0x34>
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	a8 16       	cp	r10, r24
     fbe:	b1 04       	cpc	r11, r1
     fc0:	10 f4       	brcc	.+4      	; 0xfc6 <sendDataCAN+0x62>
     fc2:	8d e0       	ldi	r24, 0x0D	; 13
     fc4:	6d dc       	rcall	.-1830   	; 0x8a0 <can_tx_kick>
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	bf 90       	pop	r11
     fd8:	af 90       	pop	r10
     fda:	08 95       	ret

00000fdc <Transmit_buffer_get>:
     fdc:	fc 01       	movw	r30, r24
     fde:	e8 54       	subi	r30, 0x48	; 72
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	40 81       	ld	r20, Z
     fe4:	51 81       	ldd	r21, Z+1	; 0x01
     fe6:	14 16       	cp	r1, r20
     fe8:	15 06       	cpc	r1, r21
     fea:	e4 f4       	brge	.+56     	; 0x1024 <Transmit_buffer_get+0x48>
     fec:	32 97       	sbiw	r30, 0x02	; 2
     fee:	20 81       	ld	r18, Z
     ff0:	31 81       	ldd	r19, Z+1	; 0x01
     ff2:	f9 01       	movw	r30, r18
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	2f 5f       	subi	r18, 0xFF	; 255
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	2a 35       	cpi	r18, 0x5A	; 90
    1006:	31 05       	cpc	r19, r1
    1008:	10 f0       	brcs	.+4      	; 0x100e <Transmit_buffer_get+0x32>
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	fc 01       	movw	r30, r24
    1010:	ea 54       	subi	r30, 0x4A	; 74
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	31 83       	std	Z+1, r19	; 0x01
    1016:	20 83       	st	Z, r18
    1018:	32 96       	adiw	r30, 0x02	; 2
    101a:	41 50       	subi	r20, 0x01	; 1
    101c:	51 09       	sbc	r21, r1
    101e:	51 83       	std	Z+1, r21	; 0x01
    1020:	40 83       	st	Z, r20
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <Transmit_buffer_get+0x4c>
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	cb 01       	movw	r24, r22
    102a:	08 95       	ret

0000102c <Transmit_buffer_peek>:
    102c:	fc 01       	movw	r30, r24
    102e:	e8 54       	subi	r30, 0x48	; 72
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	20 81       	ld	r18, Z
    1034:	31 81       	ldd	r19, Z+1	; 0x01
    1036:	12 16       	cp	r1, r18
    1038:	13 06       	cpc	r1, r19
    103a:	5c f4       	brge	.+22     	; 0x1052 <Transmit_buffer_peek+0x26>
    103c:	32 97       	sbiw	r30, 0x02	; 2
    103e:	01 90       	ld	r0, Z+
    1040:	f0 81       	ld	r31, Z
    1042:	e0 2d       	mov	r30, r0
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	e8 0f       	add	r30, r24
    104a:	f9 1f       	adc	r31, r25
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	08 95       	ret
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	08 95       	ret

00001058 <Transmit_buffer_flush>:
	}
}

void Transmit_buffer_flush(struct ringBufTRANSMIT* _this, const int clearBuffer) {
	_this->count = 0;
    1058:	fc 01       	movw	r30, r24
    105a:	e8 54       	subi	r30, 0x48	; 72
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	11 82       	std	Z+1, r1	; 0x01
    1060:	10 82       	st	Z, r1
	_this->head = 0;
    1062:	34 97       	sbiw	r30, 0x04	; 4
    1064:	11 82       	std	Z+1, r1	; 0x01
    1066:	10 82       	st	Z, r1
	_this->tail = 0;
    1068:	32 96       	adiw	r30, 0x02	; 2
    106a:	11 82       	std	Z+1, r1	; 0x01
    106c:	10 82       	st	Z, r1
	if (clearBuffer) {
    106e:	67 2b       	or	r22, r23
    1070:	29 f0       	breq	.+10     	; 0x107c <Transmit_buffer_flush+0x24>
		memset(_this->buf, 0, sizeof (_this->buf));
    1072:	24 eb       	ldi	r18, 0xB4	; 180
    1074:	fc 01       	movw	r30, r24
    1076:	11 92       	st	Z+, r1
    1078:	2a 95       	dec	r18
    107a:	e9 f7       	brne	.-6      	; 0x1076 <Transmit_buffer_flush+0x1e>
    107c:	08 95       	ret

0000107e <beginCANFast>:
	}
}



void beginCANFast(volatile int * ptr, unsigned int maxSize, unsigned char givenAddress) {
    107e:	cf 93       	push	r28
	receiveArrayAddressCAN = ptr;
    1080:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <receiveArrayAddressCAN+0x1>
    1084:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <receiveArrayAddressCAN>
	moduleAddressCAN = givenAddress;
    1088:	40 93 88 04 	sts	0x0488, r20	; 0x800488 <moduleAddressCAN>
	MaxIndex = maxSize;
    108c:	70 93 30 06 	sts	0x0630, r23	; 0x800630 <MaxIndex+0x1>
    1090:	60 93 2f 06 	sts	0x062F, r22	; 0x80062f <MaxIndex>

	bool ret;
	ret=prepare_rx( CANFAST_MOB, moduleAddressCAN<<6, 0b11111100000, ReceiveCANFast); // all 1s forces comparison
    1094:	80 e4       	ldi	r24, 0x40	; 64
    1096:	48 9f       	mul	r20, r24
    1098:	b0 01       	movw	r22, r0
    109a:	11 24       	eor	r1, r1
    109c:	2a e2       	ldi	r18, 0x2A	; 42
    109e:	36 e0       	ldi	r19, 0x06	; 6
    10a0:	40 ee       	ldi	r20, 0xE0	; 224
    10a2:	57 e0       	ldi	r21, 0x07	; 7
    10a4:	85 e0       	ldi	r24, 0x05	; 5
    10a6:	75 dc       	rcall	.-1814   	; 0x992 <prepare_rx>
    10a8:	c8 2f       	mov	r28, r24
	ret+=prepare_rx(CONTROL_MOB,GLOBAL_CAN_ADDRESS<<6, 0b11111100000,ReceiveCANFast); // Initialization the Receiver for the Global Bus
    10aa:	2a e2       	ldi	r18, 0x2A	; 42
    10ac:	36 e0       	ldi	r19, 0x06	; 6
    10ae:	40 ee       	ldi	r20, 0xE0	; 224
    10b0:	57 e0       	ldi	r21, 0x07	; 7
    10b2:	60 ec       	ldi	r22, 0xC0	; 192
    10b4:	77 e0       	ldi	r23, 0x07	; 7
    10b6:	86 e0       	ldi	r24, 0x06	; 6
    10b8:	6c dc       	rcall	.-1832   	; 0x992 <prepare_rx>
	ASSERT( ret==0);
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	8c 0f       	add	r24, r28
    10be:	91 1d       	adc	r25, r1
    10c0:	89 2b       	or	r24, r25
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <beginCANFast+0x48>
    10c4:	98 95       	break

	prepare_tx(TRANSMITMOB, 0b11111111111, 0b11111111111, TransmitCANFast);
    10c6:	29 e8       	ldi	r18, 0x89	; 137
    10c8:	38 e0       	ldi	r19, 0x08	; 8
    10ca:	4f ef       	ldi	r20, 0xFF	; 255
    10cc:	57 e0       	ldi	r21, 0x07	; 7
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	77 e0       	ldi	r23, 0x07	; 7
    10d2:	8d e0       	ldi	r24, 0x0D	; 13
    10d4:	d2 dc       	rcall	.-1628   	; 0xa7a <prepare_tx>
	List_Init(&head);
    10d6:	8f e7       	ldi	r24, 0x7F	; 127
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 bb 11 	call	0x2376	; 0x2376 <List_Init>
void *memset(void *s, int c, size_t n);

//flushes the send buffer to get it ready for new data

void Send_buffer_flush(struct ringBufSCAN* _this, const int clearBuffer) {
	_this->count = 0;
    10de:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <ring_buffer_CAN+0x55>
    10e2:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <ring_buffer_CAN+0x54>
	_this->head = 0;
    10e6:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <ring_buffer_CAN+0x51>
    10ea:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <ring_buffer_CAN+0x50>
	_this->tail = 0;
    10ee:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <ring_buffer_CAN+0x53>
    10f2:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <ring_buffer_CAN+0x52>
	prepare_tx(TRANSMITMOB, 0b11111111111, 0b11111111111, TransmitCANFast);
	List_Init(&head);
	Send_buffer_flush(&ring_buffer_CAN,0);
	//Send_buffer_flush(&ring_buffer_CAN_Control,1);
	//Send_buffer_flush(&ring_buffer_CAN_Beacon,1);
	Transmit_buffer_flush(&TransmitBuffer,0);
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	88 eb       	ldi	r24, 0xB8	; 184
    10fc:	92 e0       	ldi	r25, 0x02	; 2
    10fe:	ac df       	rcall	.-168    	; 0x1058 <Transmit_buffer_flush>
}
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <initCANFastTransfer>:



void initCANFastTransfer(void)
{
	beginCANFast(ReceiveCAN, GLOBAL_DEVICES*GLOBAL_DATA_IDX_PER_DEV/*sizeof(ReceiveCAN)*/, ROUTER_CARD);
    1104:	44 e0       	ldi	r20, 0x04	; 4
    1106:	66 e4       	ldi	r22, 0x46	; 70
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	84 e7       	ldi	r24, 0x74	; 116
    110c:	94 e0       	ldi	r25, 0x04	; 4
    110e:	b7 cf       	rjmp	.-146    	; 0x107e <beginCANFast>
    1110:	08 95       	ret

00001112 <TransmitCANFast>:
//  }
// }
// #endif

void TransmitCANFast( CAN_packet *p, unsigned char mob) // interrupt callback
{
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
	return _this->count;

}

unsigned int Transmit_buffer_GetCount(struct ringBufTRANSMIT* _this) {
	return _this->count;
    111a:	20 91 70 03 	lds	r18, 0x0370	; 0x800370 <TransmitBuffer+0xb8>
    111e:	30 91 71 03 	lds	r19, 0x0371	; 0x800371 <TransmitBuffer+0xb9>
{

	//NEW STATIC METHOD
	//if there is something to send

	if(Transmit_buffer_GetCount(&TransmitBuffer) > 0)
    1122:	21 15       	cp	r18, r1
    1124:	31 05       	cpc	r19, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <TransmitCANFast+0x18>
    1128:	a5 c0       	rjmp	.+330    	; 0x1274 <TransmitCANFast+0x162>
    112a:	ec 01       	movw	r28, r24
	{
//    #ifdef NEW_MAIN
//    toggleLED(LED1);
//    #endif
		//if more than 2 data/index pairs left might be able to send large packet.
		if(Transmit_buffer_GetCount(&TransmitBuffer)>6) {
    112c:	27 30       	cpi	r18, 0x07	; 7
    112e:	31 05       	cpc	r19, r1
    1130:	08 f4       	brcc	.+2      	; 0x1134 <TransmitCANFast+0x22>
    1132:	3c c0       	rjmp	.+120    	; 0x11ac <TransmitCANFast+0x9a>
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    1134:	88 eb       	ldi	r24, 0xB8	; 184
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	51 df       	rcall	.-350    	; 0xfdc <Transmit_buffer_get>
    113a:	8c 01       	movw	r16, r24
			p->id = ( address << 6) + ROUTER_CARD; //not passed through messages will have wrong sender address
    113c:	00 24       	eor	r0, r0
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	07 94       	ror	r0
    1144:	96 95       	lsr	r25
    1146:	87 95       	ror	r24
    1148:	07 94       	ror	r0
    114a:	98 2f       	mov	r25, r24
    114c:	80 2d       	mov	r24, r0
    114e:	04 96       	adiw	r24, 0x04	; 4
    1150:	99 83       	std	Y+1, r25	; 0x01
    1152:	88 83       	st	Y, r24
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1154:	88 eb       	ldi	r24, 0xB8	; 184
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	41 df       	rcall	.-382    	; 0xfdc <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    115a:	9b 83       	std	Y+3, r25	; 0x03
				p->data[2*i + 1] = temp;
    115c:	8c 83       	std	Y+4, r24	; 0x04
		if(Transmit_buffer_GetCount(&TransmitBuffer)>6) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + ROUTER_CARD; //not passed through messages will have wrong sender address
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    115e:	88 eb       	ldi	r24, 0xB8	; 184
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	3c df       	rcall	.-392    	; 0xfdc <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    1164:	9d 83       	std	Y+5, r25	; 0x05
				p->data[2*i + 1] = temp;
			}
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
    1166:	8e 83       	std	Y+6, r24	; 0x06
    1168:	88 eb       	ldi	r24, 0xB8	; 184
    116a:	92 e0       	ldi	r25, 0x02	; 2
    116c:	5f df       	rcall	.-322    	; 0x102c <Transmit_buffer_peek>
    116e:	08 17       	cp	r16, r24
    1170:	19 07       	cpc	r17, r25
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
    1172:	c9 f4       	brne	.+50     	; 0x11a6 <TransmitCANFast+0x94>
    1174:	88 eb       	ldi	r24, 0xB8	; 184
    1176:	92 e0       	ldi	r25, 0x02	; 2
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1178:	31 df       	rcall	.-414    	; 0xfdc <Transmit_buffer_get>
    117a:	88 eb       	ldi	r24, 0xB8	; 184
    117c:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    117e:	2e df       	rcall	.-420    	; 0xfdc <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    1180:	9f 83       	std	Y+7, r25	; 0x07
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1182:	88 87       	std	Y+8, r24	; 0x08
    1184:	88 eb       	ldi	r24, 0xB8	; 184
    1186:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    1188:	29 df       	rcall	.-430    	; 0xfdc <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    118a:	99 87       	std	Y+9, r25	; 0x09
				}
				//need to check if this was the last packet
				if(Transmit_buffer_peek(&TransmitBuffer) == address) {
    118c:	8a 87       	std	Y+10, r24	; 0x0a
    118e:	88 eb       	ldi	r24, 0xB8	; 184
    1190:	92 e0       	ldi	r25, 0x02	; 2
    1192:	4c df       	rcall	.-360    	; 0x102c <Transmit_buffer_peek>
    1194:	08 17       	cp	r16, r24
    1196:	19 07       	cpc	r17, r25
    1198:	19 f4       	brne	.+6      	; 0x11a0 <TransmitCANFast+0x8e>
					//next address is same, so this isn't the last packet, send a length 8.
					p->length = 8;
    119a:	88 e0       	ldi	r24, 0x08	; 8
    119c:	8a 83       	std	Y+2, r24	; 0x02
    119e:	70 c0       	rjmp	.+224    	; 0x1280 <TransmitCANFast+0x16e>
				}
				else {
					//next address is different, and this is the last packet, so send a 9.
					p->length = 9;
    11a0:	89 e0       	ldi	r24, 0x09	; 9
    11a2:	8a 83       	std	Y+2, r24	; 0x02
    11a4:	6d c0       	rjmp	.+218    	; 0x1280 <TransmitCANFast+0x16e>
				}
			}
			else {
				//addresses don't match and we should just send what is currently in the packet.
				p->length = 4;
    11a6:	84 e0       	ldi	r24, 0x04	; 4
    11a8:	8a 83       	std	Y+2, r24	; 0x02
			}
		}
		//if exactly 2 data/index pairs left send with length 9. Receiver
		//will read the "wrong" length correctly, but realize this is the last packet.
		//note: still need to check incase two different destinations.
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==6) {
    11aa:	6a c0       	rjmp	.+212    	; 0x1280 <TransmitCANFast+0x16e>
    11ac:	26 30       	cpi	r18, 0x06	; 6
    11ae:	31 05       	cpc	r19, r1
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    11b0:	99 f5       	brne	.+102    	; 0x1218 <TransmitCANFast+0x106>
    11b2:	88 eb       	ldi	r24, 0xB8	; 184
    11b4:	92 e0       	ldi	r25, 0x02	; 2
    11b6:	12 df       	rcall	.-476    	; 0xfdc <Transmit_buffer_get>
    11b8:	8c 01       	movw	r16, r24
			p->id = ( address << 6) + ROUTER_CARD; //not passed through messages will have wrong sender address
    11ba:	00 24       	eor	r0, r0
    11bc:	96 95       	lsr	r25
    11be:	87 95       	ror	r24
    11c0:	07 94       	ror	r0
    11c2:	96 95       	lsr	r25
    11c4:	87 95       	ror	r24
    11c6:	07 94       	ror	r0
    11c8:	98 2f       	mov	r25, r24
    11ca:	80 2d       	mov	r24, r0
    11cc:	04 96       	adiw	r24, 0x04	; 4
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    11ce:	99 83       	std	Y+1, r25	; 0x01
    11d0:	88 83       	st	Y, r24
    11d2:	88 eb       	ldi	r24, 0xB8	; 184
				p->data[2*i] = (temp >> 8);//this is so dumb
    11d4:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i + 1] = temp;
    11d6:	02 df       	rcall	.-508    	; 0xfdc <Transmit_buffer_get>
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==6) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + ROUTER_CARD; //not passed through messages will have wrong sender address
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    11d8:	9b 83       	std	Y+3, r25	; 0x03
    11da:	8c 83       	std	Y+4, r24	; 0x04
    11dc:	88 eb       	ldi	r24, 0xB8	; 184
				p->data[2*i] = (temp >> 8);//this is so dumb
    11de:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i + 1] = temp;
    11e0:	fd de       	rcall	.-518    	; 0xfdc <Transmit_buffer_get>
			}
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
    11e2:	9d 83       	std	Y+5, r25	; 0x05
    11e4:	8e 83       	std	Y+6, r24	; 0x06
    11e6:	88 eb       	ldi	r24, 0xB8	; 184
    11e8:	92 e0       	ldi	r25, 0x02	; 2
    11ea:	20 df       	rcall	.-448    	; 0x102c <Transmit_buffer_peek>
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
    11ec:	08 17       	cp	r16, r24
    11ee:	19 07       	cpc	r17, r25
    11f0:	81 f4       	brne	.+32     	; 0x1212 <TransmitCANFast+0x100>
    11f2:	88 eb       	ldi	r24, 0xB8	; 184
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    11f4:	92 e0       	ldi	r25, 0x02	; 2
    11f6:	f2 de       	rcall	.-540    	; 0xfdc <Transmit_buffer_get>
    11f8:	88 eb       	ldi	r24, 0xB8	; 184
    11fa:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    11fc:	ef de       	rcall	.-546    	; 0xfdc <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    11fe:	9f 83       	std	Y+7, r25	; 0x07
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1200:	88 87       	std	Y+8, r24	; 0x08
    1202:	88 eb       	ldi	r24, 0xB8	; 184
    1204:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    1206:	ea de       	rcall	.-556    	; 0xfdc <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    1208:	99 87       	std	Y+9, r25	; 0x09
				}
				p->length = 9;
    120a:	8a 87       	std	Y+10, r24	; 0x0a
    120c:	89 e0       	ldi	r24, 0x09	; 9
    120e:	8a 83       	std	Y+2, r24	; 0x02
			}
			else {
				//addresses don't match and we should just send what is currently in the packet.
				p->length = 4;
    1210:	37 c0       	rjmp	.+110    	; 0x1280 <TransmitCANFast+0x16e>
    1212:	84 e0       	ldi	r24, 0x04	; 4
    1214:	8a 83       	std	Y+2, r24	; 0x02
			}

		}
		//if only 1 data/index pair receiver will know it is the last packet.
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==3) {
    1216:	34 c0       	rjmp	.+104    	; 0x1280 <TransmitCANFast+0x16e>
    1218:	23 30       	cpi	r18, 0x03	; 3
    121a:	31 05       	cpc	r19, r1
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    121c:	e1 f4       	brne	.+56     	; 0x1256 <TransmitCANFast+0x144>
    121e:	88 eb       	ldi	r24, 0xB8	; 184
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	dc de       	rcall	.-584    	; 0xfdc <Transmit_buffer_get>
			p->id = ( address << 6) + ROUTER_CARD; //not passed through messages will have wrong sender address
    1224:	00 24       	eor	r0, r0
    1226:	96 95       	lsr	r25
    1228:	87 95       	ror	r24
    122a:	07 94       	ror	r0
    122c:	96 95       	lsr	r25
    122e:	87 95       	ror	r24
    1230:	07 94       	ror	r0
    1232:	98 2f       	mov	r25, r24
    1234:	80 2d       	mov	r24, r0
    1236:	04 96       	adiw	r24, 0x04	; 4
			p->length = 4;
    1238:	99 83       	std	Y+1, r25	; 0x01
    123a:	88 83       	st	Y, r24
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	88 eb       	ldi	r24, 0xB8	; 184
    1242:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i] = (temp >> 8);
    1244:	cb de       	rcall	.-618    	; 0xfdc <Transmit_buffer_get>
				p->data[2*i + 1] = temp;
    1246:	9b 83       	std	Y+3, r25	; 0x03
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==3) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + ROUTER_CARD; //not passed through messages will have wrong sender address
			p->length = 4;
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1248:	8c 83       	std	Y+4, r24	; 0x04
    124a:	88 eb       	ldi	r24, 0xB8	; 184
    124c:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i] = (temp >> 8);
    124e:	c6 de       	rcall	.-628    	; 0xfdc <Transmit_buffer_get>
				p->data[2*i + 1] = temp;
    1250:	9d 83       	std	Y+5, r25	; 0x05
    1252:	8e 83       	std	Y+6, r24	; 0x06
		}

		else
		{
			//error, missing dest/index/value set, previous packets could be very corrupt
			TransmitSetMissMatch++;
    1254:	15 c0       	rjmp	.+42     	; 0x1280 <TransmitCANFast+0x16e>
    1256:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <TransmitSetMissMatch>
    125a:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <TransmitSetMissMatch+0x1>
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <TransmitSetMissMatch+0x1>
    1264:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <TransmitSetMissMatch>
//      #ifdef NEW_MAIN
//        toggleLED(LED9);
//      #endif
			Transmit_buffer_flush(&TransmitBuffer,1);
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	88 eb       	ldi	r24, 0xB8	; 184
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	f3 de       	rcall	.-538    	; 0x1058 <Transmit_buffer_flush>
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <TransmitCANFast+0x16e>
		}
	}
	else {
		p->id = 1;
    1274:	21 e0       	ldi	r18, 0x01	; 1
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	fc 01       	movw	r30, r24
    127a:	31 83       	std	Z+1, r19	; 0x01
    127c:	20 83       	st	Z, r18
		p->length = 0;
    127e:	12 82       	std	Z+2, r1	; 0x02
	}
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	08 95       	ret

0000128a <initCOMs>:
}

bool manualMode(void)
{
	return (macroCommand==0);
}
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	0a e1       	ldi	r16, 0x1A	; 26
    1290:	12 e0       	ldi	r17, 0x02	; 2
    1292:	22 e1       	ldi	r18, 0x12	; 18
    1294:	32 e0       	ldi	r19, 0x02	; 2
    1296:	44 ef       	ldi	r20, 0xF4	; 244
    1298:	51 e0       	ldi	r21, 0x01	; 1
    129a:	64 e0       	ldi	r22, 0x04	; 4
    129c:	8a e2       	ldi	r24, 0x2A	; 42
    129e:	9b e0       	ldi	r25, 0x0B	; 11
    12a0:	63 d2       	rcall	.+1222   	; 0x1768 <FT_Init>
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <System_STOP>:
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	8d e1       	ldi	r24, 0x1D	; 29
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	c3 dd       	rcall	.-1146   	; 0xe38 <ToSendCAN>
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	8e e1       	ldi	r24, 0x1E	; 30
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	be dd       	rcall	.-1156   	; 0xe38 <ToSendCAN>
    12bc:	8f e1       	ldi	r24, 0x1F	; 31
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	51 de       	rcall	.-862    	; 0xf64 <sendDataCAN>
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	b6 dd       	rcall	.-1172   	; 0xe38 <ToSendCAN>
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	83 e0       	ldi	r24, 0x03	; 3
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	b1 dd       	rcall	.-1182   	; 0xe38 <ToSendCAN>
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	84 e0       	ldi	r24, 0x04	; 4
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	ac dd       	rcall	.-1192   	; 0xe38 <ToSendCAN>
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	85 e0       	ldi	r24, 0x05	; 5
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a7 dd       	rcall	.-1202   	; 0xe38 <ToSendCAN>
    12ea:	86 e0       	ldi	r24, 0x06	; 6
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	3a ce       	rjmp	.-908    	; 0xf64 <sendDataCAN>
    12f0:	08 95       	ret

000012f2 <checkE_Stop>:
    12f2:	cf 93       	push	r28
    12f4:	68 e0       	ldi	r22, 0x08	; 8
    12f6:	8a e2       	ldi	r24, 0x2A	; 42
    12f8:	9b e0       	ldi	r25, 0x0B	; 11
    12fa:	65 d2       	rcall	.+1226   	; 0x17c6 <FT_Modified>
    12fc:	c8 2f       	mov	r28, r24
    12fe:	88 23       	and	r24, r24
    1300:	89 f0       	breq	.+34     	; 0x1324 <checkE_Stop+0x32>
    1302:	68 e0       	ldi	r22, 0x08	; 8
    1304:	8a e2       	ldi	r24, 0x2A	; 42
    1306:	9b e0       	ldi	r25, 0x0B	; 11
    1308:	55 d2       	rcall	.+1194   	; 0x17b4 <FT_Read>
    130a:	89 2b       	or	r24, r25
    130c:	51 f4       	brne	.+20     	; 0x1322 <checkE_Stop+0x30>
    130e:	68 e0       	ldi	r22, 0x08	; 8
    1310:	8a e2       	ldi	r24, 0x2A	; 42
    1312:	9b e0       	ldi	r25, 0x0B	; 11
    1314:	5d d2       	rcall	.+1210   	; 0x17d0 <clearFT_flag>
    1316:	c8 df       	rcall	.-112    	; 0x12a8 <System_STOP>
    1318:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <pendingMacroIndex+0x1>
    131c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <pendingMacroIndex>
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <checkE_Stop+0x32>
    1322:	c0 e0       	ldi	r28, 0x00	; 0
    1324:	8c 2f       	mov	r24, r28
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <sendMacroCommand>:
    132a:	68 e0       	ldi	r22, 0x08	; 8
    132c:	8a e2       	ldi	r24, 0x2A	; 42
    132e:	9b e0       	ldi	r25, 0x0B	; 11
    1330:	41 d2       	rcall	.+1154   	; 0x17b4 <FT_Read>
    1332:	bc 01       	movw	r22, r24
    1334:	8d e1       	ldi	r24, 0x1D	; 29
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	7f dd       	rcall	.-1282   	; 0xe38 <ToSendCAN>
    133a:	69 e0       	ldi	r22, 0x09	; 9
    133c:	8a e2       	ldi	r24, 0x2A	; 42
    133e:	9b e0       	ldi	r25, 0x0B	; 11
    1340:	39 d2       	rcall	.+1138   	; 0x17b4 <FT_Read>
    1342:	bc 01       	movw	r22, r24
    1344:	8e e1       	ldi	r24, 0x1E	; 30
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	77 dd       	rcall	.-1298   	; 0xe38 <ToSendCAN>
    134a:	69 e0       	ldi	r22, 0x09	; 9
    134c:	8a e2       	ldi	r24, 0x2A	; 42
    134e:	9b e0       	ldi	r25, 0x0B	; 11
    1350:	31 d2       	rcall	.+1122   	; 0x17b4 <FT_Read>
    1352:	9f 93       	push	r25
    1354:	8f 93       	push	r24
    1356:	8e e0       	ldi	r24, 0x0E	; 14
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	9f 93       	push	r25
    135c:	8f 93       	push	r24
    135e:	0e 94 4a 13 	call	0x2694	; 0x2694 <printf>
    1362:	8f e1       	ldi	r24, 0x1F	; 31
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	fe dd       	rcall	.-1028   	; 0xf64 <sendDataCAN>
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	08 95       	ret

00001372 <sendManualCommand>:
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	8a e2       	ldi	r24, 0x2A	; 42
    1376:	9b e0       	ldi	r25, 0x0B	; 11
    1378:	1d d2       	rcall	.+1082   	; 0x17b4 <FT_Read>
    137a:	bc 01       	movw	r22, r24
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	5b dd       	rcall	.-1354   	; 0xe38 <ToSendCAN>
    1382:	63 e0       	ldi	r22, 0x03	; 3
    1384:	8a e2       	ldi	r24, 0x2A	; 42
    1386:	9b e0       	ldi	r25, 0x0B	; 11
    1388:	15 d2       	rcall	.+1066   	; 0x17b4 <FT_Read>
    138a:	bc 01       	movw	r22, r24
    138c:	83 e0       	ldi	r24, 0x03	; 3
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	53 dd       	rcall	.-1370   	; 0xe38 <ToSendCAN>
    1392:	64 e0       	ldi	r22, 0x04	; 4
    1394:	8a e2       	ldi	r24, 0x2A	; 42
    1396:	9b e0       	ldi	r25, 0x0B	; 11
    1398:	0d d2       	rcall	.+1050   	; 0x17b4 <FT_Read>
    139a:	bc 01       	movw	r22, r24
    139c:	84 e0       	ldi	r24, 0x04	; 4
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	4b dd       	rcall	.-1386   	; 0xe38 <ToSendCAN>
    13a2:	65 e0       	ldi	r22, 0x05	; 5
    13a4:	8a e2       	ldi	r24, 0x2A	; 42
    13a6:	9b e0       	ldi	r25, 0x0B	; 11
    13a8:	05 d2       	rcall	.+1034   	; 0x17b4 <FT_Read>
    13aa:	bc 01       	movw	r22, r24
    13ac:	85 e0       	ldi	r24, 0x05	; 5
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	43 dd       	rcall	.-1402   	; 0xe38 <ToSendCAN>
    13b2:	86 e0       	ldi	r24, 0x06	; 6
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	d6 cd       	rjmp	.-1108   	; 0xf64 <sendDataCAN>
    13b8:	08 95       	ret

000013ba <CommunicationsHandle>:
    13ba:	af 92       	push	r10
    13bc:	bf 92       	push	r11
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	8a e2       	ldi	r24, 0x2A	; 42
    13cc:	9b e0       	ldi	r25, 0x0B	; 11
    13ce:	05 d2       	rcall	.+1034   	; 0x17da <FT_Receive>
    13d0:	89 2b       	or	r24, r25
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <CommunicationsHandle+0x1c>
    13d4:	cd c0       	rjmp	.+410    	; 0x1570 <CommunicationsHandle+0x1b6>
    13d6:	8d df       	rcall	.-230    	; 0x12f2 <checkE_Stop>
    13d8:	81 11       	cpse	r24, r1
    13da:	9c c0       	rjmp	.+312    	; 0x1514 <CommunicationsHandle+0x15a>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	54 d7       	rcall	.+3752   	; 0x228a <isSystemReady>
    13e2:	88 23       	and	r24, r24
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <CommunicationsHandle+0x2e>
    13e6:	81 c0       	rjmp	.+258    	; 0x14ea <CommunicationsHandle+0x130>
    13e8:	91 d7       	rcall	.+3874   	; 0x230c <getCurrentMacro>
    13ea:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <macroCommand+0x1>
    13ee:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <macroCommand>
    13f2:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <pendingMacroIndex>
    13f6:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <pendingMacroIndex+0x1>
    13fa:	21 15       	cp	r18, r1
    13fc:	31 05       	cpc	r19, r1
    13fe:	71 f1       	breq	.+92     	; 0x145c <CommunicationsHandle+0xa2>
    1400:	82 23       	and	r24, r18
    1402:	93 23       	and	r25, r19
    1404:	28 17       	cp	r18, r24
    1406:	39 07       	cpc	r19, r25
    1408:	21 f1       	breq	.+72     	; 0x1452 <CommunicationsHandle+0x98>
    140a:	88 e8       	ldi	r24, 0x88	; 136
    140c:	96 e0       	ldi	r25, 0x06	; 6
    140e:	0e 94 12 12 	call	0x2424	; 0x2424 <timerDone>
    1412:	88 23       	and	r24, r24
    1414:	09 f4       	brne	.+2      	; 0x1418 <CommunicationsHandle+0x5e>
    1416:	77 c0       	rjmp	.+238    	; 0x1506 <CommunicationsHandle+0x14c>
    1418:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <macroSubmitCount>
    141c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <macroSubmitCount+0x1>
    1420:	9c 01       	movw	r18, r24
    1422:	2f 5f       	subi	r18, 0xFF	; 255
    1424:	3f 4f       	sbci	r19, 0xFF	; 255
    1426:	30 93 84 01 	sts	0x0184, r19	; 0x800184 <macroSubmitCount+0x1>
    142a:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <macroSubmitCount>
    142e:	06 97       	sbiw	r24, 0x06	; 6
    1430:	50 f0       	brcs	.+20     	; 0x1446 <CommunicationsHandle+0x8c>
    1432:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <pendingMacroIndex+0x1>
    1436:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <pendingMacroIndex>
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	68 e0       	ldi	r22, 0x08	; 8
    1440:	8a e2       	ldi	r24, 0x2A	; 42
    1442:	9b e0       	ldi	r25, 0x0B	; 11
    1444:	19 d2       	rcall	.+1074   	; 0x1878 <FT_ToSend>
    1446:	71 df       	rcall	.-286    	; 0x132a <sendMacroCommand>
    1448:	89 e1       	ldi	r24, 0x19	; 25
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <puts>
    1450:	5a c0       	rjmp	.+180    	; 0x1506 <CommunicationsHandle+0x14c>
    1452:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <pendingMacroIndex+0x1>
    1456:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <pendingMacroIndex>
    145a:	55 c0       	rjmp	.+170    	; 0x1506 <CommunicationsHandle+0x14c>
    145c:	68 e0       	ldi	r22, 0x08	; 8
    145e:	8a e2       	ldi	r24, 0x2A	; 42
    1460:	9b e0       	ldi	r25, 0x0B	; 11
    1462:	b1 d1       	rcall	.+866    	; 0x17c6 <FT_Modified>
    1464:	88 23       	and	r24, r24
    1466:	51 f1       	breq	.+84     	; 0x14bc <CommunicationsHandle+0x102>
    1468:	68 e0       	ldi	r22, 0x08	; 8
    146a:	8a e2       	ldi	r24, 0x2A	; 42
    146c:	9b e0       	ldi	r25, 0x0B	; 11
    146e:	a2 d1       	rcall	.+836    	; 0x17b4 <FT_Read>
    1470:	9f 93       	push	r25
    1472:	8f 93       	push	r24
    1474:	8c e2       	ldi	r24, 0x2C	; 44
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	9f 93       	push	r25
    147a:	8f 93       	push	r24
    147c:	0e 94 4a 13 	call	0x2694	; 0x2694 <printf>
    1480:	68 e0       	ldi	r22, 0x08	; 8
    1482:	8a e2       	ldi	r24, 0x2A	; 42
    1484:	9b e0       	ldi	r25, 0x0B	; 11
    1486:	a4 d1       	rcall	.+840    	; 0x17d0 <clearFT_flag>
    1488:	68 e0       	ldi	r22, 0x08	; 8
    148a:	8a e2       	ldi	r24, 0x2A	; 42
    148c:	9b e0       	ldi	r25, 0x0B	; 11
    148e:	92 d1       	rcall	.+804    	; 0x17b4 <FT_Read>
    1490:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <macroCommand>
    1494:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <macroCommand+0x1>
    1498:	82 2b       	or	r24, r18
    149a:	93 2b       	or	r25, r19
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	28 17       	cp	r18, r24
    14a6:	39 07       	cpc	r19, r25
    14a8:	71 f1       	breq	.+92     	; 0x1506 <CommunicationsHandle+0x14c>
    14aa:	68 e0       	ldi	r22, 0x08	; 8
    14ac:	8a e2       	ldi	r24, 0x2A	; 42
    14ae:	9b e0       	ldi	r25, 0x0B	; 11
    14b0:	81 d1       	rcall	.+770    	; 0x17b4 <FT_Read>
    14b2:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <pendingMacroIndex+0x1>
    14b6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <pendingMacroIndex>
    14ba:	25 c0       	rjmp	.+74     	; 0x1506 <CommunicationsHandle+0x14c>
    14bc:	68 e0       	ldi	r22, 0x08	; 8
    14be:	8a e2       	ldi	r24, 0x2A	; 42
    14c0:	9b e0       	ldi	r25, 0x0B	; 11
    14c2:	81 d1       	rcall	.+770    	; 0x17c6 <FT_Modified>
    14c4:	81 11       	cpse	r24, r1
    14c6:	1f c0       	rjmp	.+62     	; 0x1506 <CommunicationsHandle+0x14c>
    14c8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <macroCommand>
    14cc:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <macroCommand+0x1>
    14d0:	89 2b       	or	r24, r25
    14d2:	c9 f4       	brne	.+50     	; 0x1506 <CommunicationsHandle+0x14c>
    14d4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <macroSubmitCount+0x1>
    14d8:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <macroSubmitCount>
    14dc:	84 e1       	ldi	r24, 0x14	; 20
    14de:	9b e0       	ldi	r25, 0x0B	; 11
    14e0:	a1 d7       	rcall	.+3906   	; 0x2424 <timerDone>
    14e2:	88 23       	and	r24, r24
    14e4:	81 f0       	breq	.+32     	; 0x1506 <CommunicationsHandle+0x14c>
    14e6:	45 df       	rcall	.-374    	; 0x1372 <sendManualCommand>
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <CommunicationsHandle+0x14c>
    14ea:	80 e4       	ldi	r24, 0x40	; 64
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	0e 94 5d 13 	call	0x26ba	; 0x26ba <puts>
    14f2:	68 e0       	ldi	r22, 0x08	; 8
    14f4:	8a e2       	ldi	r24, 0x2A	; 42
    14f6:	9b e0       	ldi	r25, 0x0B	; 11
    14f8:	6b d1       	rcall	.+726    	; 0x17d0 <clearFT_flag>
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	68 e0       	ldi	r22, 0x08	; 8
    1500:	8a e2       	ldi	r24, 0x2A	; 42
    1502:	9b e0       	ldi	r25, 0x0B	; 11
    1504:	b9 d1       	rcall	.+882    	; 0x1878 <FT_ToSend>
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	6f e0       	ldi	r22, 0x0F	; 15
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	15 d5       	rcall	.+2602   	; 0x1f3e <SetNeoPixRGB>
    1514:	fb d6       	rcall	.+3574   	; 0x230c <getCurrentMacro>
    1516:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <macroCommand+0x1>
    151a:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <macroCommand>
    151e:	81 ef       	ldi	r24, 0xF1	; 241
    1520:	9b e0       	ldi	r25, 0x0B	; 11
    1522:	55 d7       	rcall	.+3754   	; 0x23ce <getTimeElapsed>
    1524:	0f 2e       	mov	r0, r31
    1526:	f8 ee       	ldi	r31, 0xE8	; 232
    1528:	af 2e       	mov	r10, r31
    152a:	f0 2d       	mov	r31, r0
    152c:	0f 2e       	mov	r0, r31
    152e:	f3 e0       	ldi	r31, 0x03	; 3
    1530:	bf 2e       	mov	r11, r31
    1532:	f0 2d       	mov	r31, r0
    1534:	c1 2c       	mov	r12, r1
    1536:	d1 2c       	mov	r13, r1
    1538:	e1 2c       	mov	r14, r1
    153a:	f1 2c       	mov	r15, r1
    153c:	00 e0       	ldi	r16, 0x00	; 0
    153e:	10 e0       	ldi	r17, 0x00	; 0
    1540:	0e 94 be 12 	call	0x257c	; 0x257c <__udivdi3>
    1544:	42 2f       	mov	r20, r18
    1546:	53 2f       	mov	r21, r19
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	8a e2       	ldi	r24, 0x2A	; 42
    154c:	9b e0       	ldi	r25, 0x0B	; 11
    154e:	94 d1       	rcall	.+808    	; 0x1878 <FT_ToSend>
    1550:	40 91 87 01 	lds	r20, 0x0187	; 0x800187 <macroCommand>
    1554:	50 91 88 01 	lds	r21, 0x0188	; 0x800188 <macroCommand+0x1>
    1558:	68 e0       	ldi	r22, 0x08	; 8
    155a:	8a e2       	ldi	r24, 0x2A	; 42
    155c:	9b e0       	ldi	r25, 0x0B	; 11
    155e:	8c d1       	rcall	.+792    	; 0x1878 <FT_ToSend>
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	8a e2       	ldi	r24, 0x2A	; 42
    1564:	9b e0       	ldi	r25, 0x0B	; 11
    1566:	9e d1       	rcall	.+828    	; 0x18a4 <FT_Send>
    1568:	8d e7       	ldi	r24, 0x7D	; 125
    156a:	9a e0       	ldi	r25, 0x0A	; 10
    156c:	16 d7       	rcall	.+3628   	; 0x239a <resetTimer>
    156e:	d1 d6       	rcall	.+3490   	; 0x2312 <getSystemLocData>
    1570:	8d e7       	ldi	r24, 0x7D	; 125
    1572:	9a e0       	ldi	r25, 0x0A	; 10
    1574:	57 d7       	rcall	.+3758   	; 0x2424 <timerDone>
    1576:	88 23       	and	r24, r24
    1578:	99 f0       	breq	.+38     	; 0x15a0 <CommunicationsHandle+0x1e6>
    157a:	8f e4       	ldi	r24, 0x4F	; 79
    157c:	91 e0       	ldi	r25, 0x01	; 1
    157e:	9f 93       	push	r25
    1580:	8f 93       	push	r24
    1582:	0e 94 4a 13 	call	0x2694	; 0x2694 <printf>
    1586:	81 ef       	ldi	r24, 0xF1	; 241
    1588:	9b e0       	ldi	r25, 0x0B	; 11
    158a:	07 d7       	rcall	.+3598   	; 0x239a <resetTimer>
    158c:	8d de       	rcall	.-742    	; 0x12a8 <System_STOP>
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	42 e3       	ldi	r20, 0x32	; 50
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	72 e3       	ldi	r23, 0x32	; 50
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	12 d5       	rcall	.+2596   	; 0x1fc0 <flashLedColors>
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	bf 90       	pop	r11
    15ae:	af 90       	pop	r10
    15b0:	08 95       	ret

000015b2 <setupCommsTimers>:

void setupCommsTimers(void)
{
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
	setTimerInterval(&macroResubmitTimer,500);
    15b6:	04 ef       	ldi	r16, 0xF4	; 244
    15b8:	11 e0       	ldi	r17, 0x01	; 1
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	88 e8       	ldi	r24, 0x88	; 136
    15c8:	96 e0       	ldi	r25, 0x06	; 6
    15ca:	d9 d6       	rcall	.+3506   	; 0x237e <setTimerInterval>
	setTimerInterval(&pingTimer,500);
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	88 e7       	ldi	r24, 0x78	; 120
    15da:	96 e0       	ldi	r25, 0x06	; 6
    15dc:	d0 d6       	rcall	.+3488   	; 0x237e <setTimerInterval>
	setTimerInterval(&commsTimer,5);
    15de:	05 e0       	ldi	r16, 0x05	; 5
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	88 e9       	ldi	r24, 0x98	; 152
    15f0:	96 e0       	ldi	r25, 0x06	; 6
    15f2:	c5 d6       	rcall	.+3466   	; 0x237e <setTimerInterval>
	setTimerInterval(&commsTimerBeacon,5);
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	89 ed       	ldi	r24, 0xD9	; 217
    1602:	99 e0       	ldi	r25, 0x09	; 9
    1604:	bc d6       	rcall	.+3448   	; 0x237e <setTimerInterval>
	setTimerInterval(&safetyTimer,2000);
    1606:	00 ed       	ldi	r16, 0xD0	; 208
    1608:	17 e0       	ldi	r17, 0x07	; 7
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	8d e7       	ldi	r24, 0x7D	; 125
    1618:	9a e0       	ldi	r25, 0x0A	; 10
    161a:	b1 d6       	rcall	.+3426   	; 0x237e <setTimerInterval>
	setTimerInterval(&checkCANTimer,50);
    161c:	02 e3       	ldi	r16, 0x32	; 50
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	8d ed       	ldi	r24, 0xDD	; 221
    162e:	9b e0       	ldi	r25, 0x0B	; 11
    1630:	a6 d6       	rcall	.+3404   	; 0x237e <setTimerInterval>
	setTimerInterval(&TransmitManual, 50);
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	50 e0       	ldi	r21, 0x00	; 0
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	84 e1       	ldi	r24, 0x14	; 20
    1640:	9b e0       	ldi	r25, 0x0B	; 11
    1642:	9d d6       	rcall	.+3386   	; 0x237e <setTimerInterval>
}
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	08 95       	ret

0000164a <Buffer_init>:
}

uint8_t * Buffer_get_array (Buffer_t * buffer)
{
	return buffer->data;
}
    164a:	fc 01       	movw	r30, r24
    164c:	15 ae       	std	Z+61, r1	; 0x3d
    164e:	14 ae       	std	Z+60, r1	; 0x3c
    1650:	17 ae       	std	Z+63, r1	; 0x3f
    1652:	16 ae       	std	Z+62, r1	; 0x3e
    1654:	e0 5c       	subi	r30, 0xC0	; 192
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	11 82       	std	Z+1, r1	; 0x01
    165a:	10 82       	st	Z, r1
    165c:	08 95       	ret

0000165e <Buffer_size>:
    165e:	fc 01       	movw	r30, r24
    1660:	84 ad       	ldd	r24, Z+60	; 0x3c
    1662:	95 ad       	ldd	r25, Z+61	; 0x3d
    1664:	08 95       	ret

00001666 <Buffer_full>:
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	fc 01       	movw	r30, r24
    166a:	84 ad       	ldd	r24, Z+60	; 0x3c
    166c:	95 ad       	ldd	r25, Z+61	; 0x3d
    166e:	cc 97       	sbiw	r24, 0x3c	; 60
    1670:	09 f0       	breq	.+2      	; 0x1674 <Buffer_full+0xe>
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	82 2f       	mov	r24, r18
    1676:	08 95       	ret

00001678 <Buffer_empty>:
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	fc 01       	movw	r30, r24
    167c:	84 ad       	ldd	r24, Z+60	; 0x3c
    167e:	95 ad       	ldd	r25, Z+61	; 0x3d
    1680:	89 2b       	or	r24, r25
    1682:	09 f0       	breq	.+2      	; 0x1686 <Buffer_empty+0xe>
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	82 2f       	mov	r24, r18
    1688:	08 95       	ret

0000168a <Buffer_push>:
    168a:	dc 01       	movw	r26, r24
    168c:	dc 96       	adiw	r26, 0x3c	; 60
    168e:	2d 91       	ld	r18, X+
    1690:	3c 91       	ld	r19, X
    1692:	dd 97       	sbiw	r26, 0x3d	; 61
    1694:	2c 33       	cpi	r18, 0x3C	; 60
    1696:	31 05       	cpc	r19, r1
    1698:	d9 f0       	breq	.+54     	; 0x16d0 <Buffer_push+0x46>
    169a:	a0 5c       	subi	r26, 0xC0	; 192
    169c:	bf 4f       	sbci	r27, 0xFF	; 255
    169e:	4d 91       	ld	r20, X+
    16a0:	5c 91       	ld	r21, X
    16a2:	11 97       	sbiw	r26, 0x01	; 1
    16a4:	fa 01       	movw	r30, r20
    16a6:	31 96       	adiw	r30, 0x01	; 1
    16a8:	ed 93       	st	X+, r30
    16aa:	fc 93       	st	X, r31
    16ac:	dc 01       	movw	r26, r24
    16ae:	a4 0f       	add	r26, r20
    16b0:	b5 1f       	adc	r27, r21
    16b2:	6c 93       	st	X, r22
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	dc 01       	movw	r26, r24
    16ba:	dd 96       	adiw	r26, 0x3d	; 61
    16bc:	3c 93       	st	X, r19
    16be:	2e 93       	st	-X, r18
    16c0:	dc 97       	sbiw	r26, 0x3c	; 60
    16c2:	fc 97       	sbiw	r30, 0x3c	; 60
    16c4:	29 f4       	brne	.+10     	; 0x16d0 <Buffer_push+0x46>
    16c6:	fc 01       	movw	r30, r24
    16c8:	e0 5c       	subi	r30, 0xC0	; 192
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	11 82       	std	Z+1, r1	; 0x01
    16ce:	10 82       	st	Z, r1
    16d0:	08 95       	ret

000016d2 <Buffer_pop>:
    16d2:	fc 01       	movw	r30, r24
    16d4:	84 ad       	ldd	r24, Z+60	; 0x3c
    16d6:	95 ad       	ldd	r25, Z+61	; 0x3d
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	95 af       	std	Z+61, r25	; 0x3d
    16dc:	84 af       	std	Z+60, r24	; 0x3c
    16de:	26 ad       	ldd	r18, Z+62	; 0x3e
    16e0:	37 ad       	ldd	r19, Z+63	; 0x3f
    16e2:	df 01       	movw	r26, r30
    16e4:	a2 0f       	add	r26, r18
    16e6:	b3 1f       	adc	r27, r19
    16e8:	8c 91       	ld	r24, X
    16ea:	2f 5f       	subi	r18, 0xFF	; 255
    16ec:	3f 4f       	sbci	r19, 0xFF	; 255
    16ee:	2c 33       	cpi	r18, 0x3C	; 60
    16f0:	31 05       	cpc	r19, r1
    16f2:	19 f0       	breq	.+6      	; 0x16fa <Buffer_pop+0x28>
    16f4:	37 af       	std	Z+63, r19	; 0x3f
    16f6:	26 af       	std	Z+62, r18	; 0x3e
    16f8:	08 95       	ret
    16fa:	17 ae       	std	Z+63, r1	; 0x3f
    16fc:	16 ae       	std	Z+62, r1	; 0x3e
    16fe:	08 95       	ret

00001700 <Buffer_get>:
    1700:	fc 01       	movw	r30, r24
    1702:	26 ad       	ldd	r18, Z+62	; 0x3e
    1704:	37 ad       	ldd	r19, Z+63	; 0x3f
    1706:	62 0f       	add	r22, r18
    1708:	73 1f       	adc	r23, r19
    170a:	6c 33       	cpi	r22, 0x3C	; 60
    170c:	71 05       	cpc	r23, r1
    170e:	10 f0       	brcs	.+4      	; 0x1714 <Buffer_get+0x14>
    1710:	6c 53       	subi	r22, 0x3C	; 60
    1712:	71 09       	sbc	r23, r1
    1714:	fc 01       	movw	r30, r24
    1716:	e6 0f       	add	r30, r22
    1718:	f7 1f       	adc	r31, r23
    171a:	80 81       	ld	r24, Z
    171c:	08 95       	ret

0000171e <Buffer_clear>:

void Buffer_clear(Buffer_t *buf)
{
	buf->size = 0;
    171e:	fc 01       	movw	r30, r24
    1720:	15 ae       	std	Z+61, r1	; 0x3d
    1722:	14 ae       	std	Z+60, r1	; 0x3c
	buf->head = 0;
    1724:	17 ae       	std	Z+63, r1	; 0x3f
    1726:	16 ae       	std	Z+62, r1	; 0x3e
	buf->tail = 0;
    1728:	e0 5c       	subi	r30, 0xC0	; 192
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	11 82       	std	Z+1, r1	; 0x01
    172e:	10 82       	st	Z, r1
    1730:	08 95       	ret

00001732 <crc>:
uint8_t crc (uint8_t const *arr, uint8_t size) {

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	uint8_t i;
	for (i = 0; i < size; ++i) {
    1732:	66 23       	and	r22, r22
    1734:	b9 f0       	breq	.+46     	; 0x1764 <crc+0x32>
    1736:	fc 01       	movw	r30, r24
    1738:	61 50       	subi	r22, 0x01	; 1
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	6f 5f       	subi	r22, 0xFF	; 255
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	68 0f       	add	r22, r24
    1742:	79 1f       	adc	r23, r25
    1744:	80 e0       	ldi	r24, 0x00	; 0

		for (j = 0; j < 8; ++j) {
			uint8_t sum = (value ^ data) & (uint8_t)0x01;
			value >>= 1;
			if (sum)
				value ^= POLYNOMIAL;
    1746:	4c e8       	ldi	r20, 0x8C	; 140

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	uint8_t i;
	for (i = 0; i < size; ++i) {
		uint8_t data = arr[i];
    1748:	21 91       	ld	r18, Z+
    174a:	98 e0       	ldi	r25, 0x08	; 8
		uint8_t j;

		for (j = 0; j < 8; ++j) {
			uint8_t sum = (value ^ data) & (uint8_t)0x01;
    174c:	38 2f       	mov	r19, r24
    174e:	32 27       	eor	r19, r18
			value >>= 1;
    1750:	86 95       	lsr	r24
			if (sum)
    1752:	30 fd       	sbrc	r19, 0
				value ^= POLYNOMIAL;
    1754:	84 27       	eor	r24, r20
			data >>= 1;
    1756:	26 95       	lsr	r18
    1758:	91 50       	subi	r25, 0x01	; 1
	uint8_t i;
	for (i = 0; i < size; ++i) {
		uint8_t data = arr[i];
		uint8_t j;

		for (j = 0; j < 8; ++j) {
    175a:	c1 f7       	brne	.-16     	; 0x174c <crc+0x1a>
uint8_t crc (uint8_t const *arr, uint8_t size) {

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	uint8_t i;
	for (i = 0; i < size; ++i) {
    175c:	e6 17       	cp	r30, r22
    175e:	f7 07       	cpc	r31, r23
    1760:	99 f7       	brne	.-26     	; 0x1748 <crc+0x16>
    1762:	08 95       	ret
 * @return  Returns the CRC code for the given packet.
 */
uint8_t crc (uint8_t const *arr, uint8_t size) {

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
    1764:	80 e0       	ldi	r24, 0x00	; 0
		}

	}

	return value;
}
    1766:	08 95       	ret

00001768 <FT_Init>:
 */

void FT_Init (FT_t * handle,
							uint8_t address,
							void(*put)(uint8_t), uint8_t(*get)(), bool(*empty)())
{
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	ec 01       	movw	r28, r24
	// initialize local data:
	handle->address = address;
    1772:	fc 01       	movw	r30, r24
    1774:	61 93       	st	Z+, r22
    1776:	49 96       	adiw	r24, 0x19	; 25
    1778:	dc 01       	movw	r26, r24

	int i;
	for (i = 0; i < ARRAY_SZ; ++i) {
		handle->array[i] = 0;
    177a:	11 92       	st	Z+, r1
    177c:	11 92       	st	Z+, r1
		handle->flags[i] = false;
    177e:	1d 92       	st	X+, r1
{
	// initialize local data:
	handle->address = address;

	int i;
	for (i = 0; i < ARRAY_SZ; ++i) {
    1780:	e8 17       	cp	r30, r24
    1782:	f9 07       	cpc	r31, r25
    1784:	d1 f7       	brne	.-12     	; 0x177a <FT_Init+0x12>
		handle->array[i] = 0;
		handle->flags[i] = false;
	}

	// initialize callback function members:
	handle->put = put;
    1786:	fe 01       	movw	r30, r28
    1788:	e7 55       	subi	r30, 0x57	; 87
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	51 83       	std	Z+1, r21	; 0x01
    178e:	40 83       	st	Z, r20
	handle->get = get;
    1790:	32 96       	adiw	r30, 0x02	; 2
    1792:	31 83       	std	Z+1, r19	; 0x01
    1794:	20 83       	st	Z, r18
	handle->empty = empty;
    1796:	32 96       	adiw	r30, 0x02	; 2
    1798:	11 83       	std	Z+1, r17	; 0x01
    179a:	00 83       	st	Z, r16

	// initialize receive/transmit buffers:
	Buffer_init(&handle->receive_buf);
    179c:	ce 01       	movw	r24, r28
    179e:	85 96       	adiw	r24, 0x25	; 37
    17a0:	54 df       	rcall	.-344    	; 0x164a <Buffer_init>
	Buffer_init(&handle->transmit_buf);
    17a2:	ce 01       	movw	r24, r28
    17a4:	89 59       	subi	r24, 0x99	; 153
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	50 df       	rcall	.-352    	; 0x164a <Buffer_init>
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <FT_Read>:

int16_t FT_Read (FT_t * handle, uint8_t index)
{
	//handle->flags[index] = false;
	return (int16_t)(handle->array[index]);
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	66 0f       	add	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	86 0f       	add	r24, r22
    17bc:	97 1f       	adc	r25, r23
}
    17be:	fc 01       	movw	r30, r24
    17c0:	81 81       	ldd	r24, Z+1	; 0x01
    17c2:	92 81       	ldd	r25, Z+2	; 0x02
    17c4:	08 95       	ret

000017c6 <FT_Modified>:

bool FT_Modified (FT_t * handle, uint8_t index)
{
	bool temp = handle->flags[index];
    17c6:	86 0f       	add	r24, r22
    17c8:	91 1d       	adc	r25, r1
	//handle->flags[index] = false;
	return temp;
}
    17ca:	fc 01       	movw	r30, r24
    17cc:	81 8d       	ldd	r24, Z+25	; 0x19
    17ce:	08 95       	ret

000017d0 <clearFT_flag>:
void clearFT_flag(FT_t * handle, uint8_t index)
{
	handle->flags[index] = false;
    17d0:	86 0f       	add	r24, r22
    17d2:	91 1d       	adc	r25, r1
    17d4:	fc 01       	movw	r30, r24
    17d6:	11 8e       	std	Z+25, r1	; 0x19
    17d8:	08 95       	ret

000017da <FT_Receive>:
}
unsigned char val;
unsigned char tmpVal;
unsigned int FT_Receive (FT_t * handle)
{
    17da:	cf 92       	push	r12
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	7c 01       	movw	r14, r24
	//PORTA ^= (1 << 5);
	// transfer bytes from serial buffer into local buffer

	while (!isUART1_ReceiveEmpty() && !Buffer_full(&handle->receive_buf)) {
		val = USART1_get_C();
		handle->receive_buf.data[(unsigned int)(handle->receive_buf.tail)] = (unsigned char)val;
    17ec:	ec 01       	movw	r28, r24
    17ee:	cb 59       	subi	r28, 0x9B	; 155
    17f0:	df 4f       	sbci	r29, 0xFF	; 255
		handle->receive_buf.tail = handle->receive_buf.tail + 1;
		if (handle->receive_buf.tail == MAX_PCKT_SZ)
			handle->receive_buf.tail = 0;
		if(handle->receive_buf.size <= MAX_PCKT_SZ)
    17f2:	6c 01       	movw	r12, r24
    17f4:	81 e6       	ldi	r24, 0x61	; 97
    17f6:	c8 0e       	add	r12, r24
    17f8:	d1 1c       	adc	r13, r1
{
	//printUART1 ();
	//PORTA ^= (1 << 5);
	// transfer bytes from serial buffer into local buffer

	while (!isUART1_ReceiveEmpty() && !Buffer_full(&handle->receive_buf)) {
    17fa:	87 01       	movw	r16, r14
    17fc:	0b 5d       	subi	r16, 0xDB	; 219
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	1d c0       	rjmp	.+58     	; 0x183c <FT_Receive+0x62>
		val = USART1_get_C();
    1802:	0e 94 12 02 	call	0x424	; 0x424 <USART1_get_C>
    1806:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <val>
		handle->receive_buf.data[(unsigned int)(handle->receive_buf.tail)] = (unsigned char)val;
    180a:	28 81       	ld	r18, Y
    180c:	39 81       	ldd	r19, Y+1	; 0x01
    180e:	f7 01       	movw	r30, r14
    1810:	e2 0f       	add	r30, r18
    1812:	f3 1f       	adc	r31, r19
    1814:	85 a3       	std	Z+37, r24	; 0x25
		handle->receive_buf.tail = handle->receive_buf.tail + 1;
    1816:	2f 5f       	subi	r18, 0xFF	; 255
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
		if (handle->receive_buf.tail == MAX_PCKT_SZ)
    181a:	2c 33       	cpi	r18, 0x3C	; 60
    181c:	31 05       	cpc	r19, r1
    181e:	19 f0       	breq	.+6      	; 0x1826 <FT_Receive+0x4c>
	// transfer bytes from serial buffer into local buffer

	while (!isUART1_ReceiveEmpty() && !Buffer_full(&handle->receive_buf)) {
		val = USART1_get_C();
		handle->receive_buf.data[(unsigned int)(handle->receive_buf.tail)] = (unsigned char)val;
		handle->receive_buf.tail = handle->receive_buf.tail + 1;
    1820:	39 83       	std	Y+1, r19	; 0x01
    1822:	28 83       	st	Y, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <FT_Receive+0x50>
		if (handle->receive_buf.tail == MAX_PCKT_SZ)
			handle->receive_buf.tail = 0;
    1826:	19 82       	std	Y+1, r1	; 0x01
    1828:	18 82       	st	Y, r1
		if(handle->receive_buf.size <= MAX_PCKT_SZ)
    182a:	f6 01       	movw	r30, r12
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	8d 33       	cpi	r24, 0x3D	; 61
    1832:	91 05       	cpc	r25, r1
    1834:	18 f4       	brcc	.+6      	; 0x183c <FT_Receive+0x62>
			handle->receive_buf.size = handle->receive_buf.size + 1;
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	80 83       	st	Z, r24
{
	//printUART1 ();
	//PORTA ^= (1 << 5);
	// transfer bytes from serial buffer into local buffer

	while (!isUART1_ReceiveEmpty() && !Buffer_full(&handle->receive_buf)) {
    183c:	0e 94 1a 02 	call	0x434	; 0x434 <isUART1_ReceiveEmpty>
    1840:	81 11       	cpse	r24, r1
    1842:	04 c0       	rjmp	.+8      	; 0x184c <FT_Receive+0x72>
    1844:	c8 01       	movw	r24, r16
    1846:	0f df       	rcall	.-482    	; 0x1666 <Buffer_full>
    1848:	88 23       	and	r24, r24
    184a:	d9 f2       	breq	.-74     	; 0x1802 <FT_Receive+0x28>
			handle->receive_buf.tail = 0;
		if(handle->receive_buf.size <= MAX_PCKT_SZ)
			handle->receive_buf.size = handle->receive_buf.size + 1;
	}
	// parse/extract messages from local buffer and update local array
	int val = parse(&handle->receive_buf, handle->array, handle->flags, ARRAY_SZ, handle->address);
    184c:	a7 01       	movw	r20, r14
    184e:	47 5e       	subi	r20, 0xE7	; 231
    1850:	5f 4f       	sbci	r21, 0xFF	; 255
    1852:	b7 01       	movw	r22, r14
    1854:	6f 5f       	subi	r22, 0xFF	; 255
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	f7 01       	movw	r30, r14
    185a:	00 81       	ld	r16, Z
    185c:	2c e0       	ldi	r18, 0x0C	; 12
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	c7 01       	movw	r24, r14
    1862:	85 96       	adiw	r24, 0x25	; 37
    1864:	c5 d2       	rcall	.+1418   	; 0x1df0 <parse>

	return val;
}
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	08 95       	ret

00001878 <FT_ToSend>:


void FT_ToSend (FT_t * handle, uint8_t index, int16_t data)
{
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	04 2f       	mov	r16, r20
    1882:	15 2f       	mov	r17, r21
	uint16_t combined = (uint16_t)data;
	uint8_t msb = (combined >> 8);
	uint8_t lsb = combined & 0x00FF;
	Buffer_push(&handle->transmit_buf, index);
    1884:	ec 01       	movw	r28, r24
    1886:	c9 59       	subi	r28, 0x99	; 153
    1888:	df 4f       	sbci	r29, 0xFF	; 255
    188a:	ce 01       	movw	r24, r28
    188c:	fe de       	rcall	.-516    	; 0x168a <Buffer_push>
	Buffer_push(&handle->transmit_buf, lsb);
    188e:	60 2f       	mov	r22, r16
    1890:	ce 01       	movw	r24, r28
    1892:	fb de       	rcall	.-522    	; 0x168a <Buffer_push>
	Buffer_push(&handle->transmit_buf, msb);
    1894:	61 2f       	mov	r22, r17
    1896:	ce 01       	movw	r24, r28
    1898:	f8 de       	rcall	.-528    	; 0x168a <Buffer_push>

}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	08 95       	ret

000018a4 <FT_Send>:

void FT_Send (FT_t * handle, uint8_t address)
{
    18a4:	6f 92       	push	r6
    18a6:	7f 92       	push	r7
    18a8:	8f 92       	push	r8
    18aa:	9f 92       	push	r9
    18ac:	af 92       	push	r10
    18ae:	bf 92       	push	r11
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	ec 97       	sbiw	r28, 0x3c	; 60
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	4c 01       	movw	r8, r24
    18d2:	d6 2e       	mov	r13, r22
	size_t payload_sz = Buffer_size(&handle->transmit_buf);
    18d4:	7c 01       	movw	r14, r24
    18d6:	87 e6       	ldi	r24, 0x67	; 103
    18d8:	e8 0e       	add	r14, r24
    18da:	f1 1c       	adc	r15, r1
    18dc:	c7 01       	movw	r24, r14
    18de:	bf de       	rcall	.-642    	; 0x165e <Buffer_size>
    18e0:	3c 01       	movw	r6, r24

	// abandon send if there is no payload
	if (payload_sz == 0)
    18e2:	89 2b       	or	r24, r25
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <FT_Send+0x44>
    18e6:	3e c0       	rjmp	.+124    	; 0x1964 <FT_Send+0xc0>
		return;

	// populate header
	handle->put(0x06);
    18e8:	84 01       	movw	r16, r8
    18ea:	07 55       	subi	r16, 0x57	; 87
    18ec:	1f 4f       	sbci	r17, 0xFF	; 255
    18ee:	d8 01       	movw	r26, r16
    18f0:	ed 91       	ld	r30, X+
    18f2:	fc 91       	ld	r31, X
    18f4:	86 e0       	ldi	r24, 0x06	; 6
    18f6:	09 95       	icall
	handle->put(0x85);
    18f8:	d8 01       	movw	r26, r16
    18fa:	ed 91       	ld	r30, X+
    18fc:	fc 91       	ld	r31, X
    18fe:	85 e8       	ldi	r24, 0x85	; 133
    1900:	09 95       	icall
	handle->put(address);
    1902:	d8 01       	movw	r26, r16
    1904:	ed 91       	ld	r30, X+
    1906:	fc 91       	ld	r31, X
    1908:	8d 2d       	mov	r24, r13
    190a:	09 95       	icall
	handle->put(handle->address);
    190c:	d8 01       	movw	r26, r16
    190e:	ed 91       	ld	r30, X+
    1910:	fc 91       	ld	r31, X
    1912:	d4 01       	movw	r26, r8
    1914:	8c 91       	ld	r24, X
    1916:	09 95       	icall
	handle->put(payload_sz);
    1918:	d8 01       	movw	r26, r16
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	86 2d       	mov	r24, r6
    1920:	09 95       	icall
    1922:	8e 01       	movw	r16, r28
    1924:	0f 5f       	subi	r16, 0xFF	; 255
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	58 01       	movw	r10, r16
    192a:	a6 0c       	add	r10, r6
    192c:	b7 1c       	adc	r11, r7
	unsigned int i;
	for (i = 0; i < payload_sz; ++i)
	{
		uint8_t next_byte = Buffer_pop(&handle->transmit_buf);
		payload[i] = next_byte;
		handle->put(next_byte);
    192e:	64 01       	movw	r12, r8
    1930:	b9 ea       	ldi	r27, 0xA9	; 169
    1932:	cb 0e       	add	r12, r27
    1934:	d1 1c       	adc	r13, r1
	// add the payload
	uint8_t payload [MAX_PCKT_SZ];
	unsigned int i;
	for (i = 0; i < payload_sz; ++i)
	{
		uint8_t next_byte = Buffer_pop(&handle->transmit_buf);
    1936:	c7 01       	movw	r24, r14
    1938:	cc de       	rcall	.-616    	; 0x16d2 <Buffer_pop>
		payload[i] = next_byte;
    193a:	f8 01       	movw	r30, r16
    193c:	81 93       	st	Z+, r24
    193e:	8f 01       	movw	r16, r30
		handle->put(next_byte);
    1940:	d6 01       	movw	r26, r12
    1942:	ed 91       	ld	r30, X+
    1944:	fc 91       	ld	r31, X
    1946:	09 95       	icall
	handle->put(payload_sz);

	// add the payload
	uint8_t payload [MAX_PCKT_SZ];
	unsigned int i;
	for (i = 0; i < payload_sz; ++i)
    1948:	0a 15       	cp	r16, r10
    194a:	1b 05       	cpc	r17, r11
    194c:	a1 f7       	brne	.-24     	; 0x1936 <FT_Send+0x92>
		payload[i] = next_byte;
		handle->put(next_byte);
	}

	// add the CRC code
	handle->put(crc(payload, payload_sz));
    194e:	f4 01       	movw	r30, r8
    1950:	e7 55       	subi	r30, 0x57	; 87
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	00 81       	ld	r16, Z
    1956:	11 81       	ldd	r17, Z+1	; 0x01
    1958:	66 2d       	mov	r22, r6
    195a:	ce 01       	movw	r24, r28
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	e9 de       	rcall	.-558    	; 0x1732 <crc>
    1960:	f8 01       	movw	r30, r16
    1962:	09 95       	icall

}
    1964:	ec 96       	adiw	r28, 0x3c	; 60
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	ef 90       	pop	r14
    197c:	df 90       	pop	r13
    197e:	cf 90       	pop	r12
    1980:	bf 90       	pop	r11
    1982:	af 90       	pop	r10
    1984:	9f 90       	pop	r9
    1986:	8f 90       	pop	r8
    1988:	7f 90       	pop	r7
    198a:	6f 90       	pop	r6
    198c:	08 95       	ret

0000198e <Parser_init>:
}

int Parser_status ()
{
	return m_status;
}
    198e:	0f 93       	push	r16
    1990:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <m_buf+0x1>
    1994:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <m_buf>
    1998:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <m_arr+0x1>
    199c:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <m_arr>
    19a0:	50 93 94 01 	sts	0x0194, r21	; 0x800194 <m_flags+0x1>
    19a4:	40 93 93 01 	sts	0x0193, r20	; 0x800193 <m_flags>
    19a8:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <m_arr_size+0x1>
    19ac:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <m_arr_size>
    19b0:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <m_address>
    19b4:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <m_length>
    19b8:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <m_lookahead+0x1>
    19bc:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <m_lookahead>
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    19c8:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <Parser_first_byte>:
    19d0:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    19d4:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    19d8:	42 de       	rcall	.-892    	; 0x165e <Buffer_size>
    19da:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <m_lookahead>
    19de:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <m_lookahead+0x1>
    19e2:	68 17       	cp	r22, r24
    19e4:	79 07       	cpc	r23, r25
    19e6:	38 f0       	brcs	.+14     	; 0x19f6 <Parser_first_byte+0x26>
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    19f0:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    19f4:	08 95       	ret
    19f6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    19fa:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    19fe:	80 de       	rcall	.-768    	; 0x1700 <Buffer_get>
    1a00:	86 30       	cpi	r24, 0x06	; 6
    1a02:	39 f0       	breq	.+14     	; 0x1a12 <Parser_first_byte+0x42>
    1a04:	83 e0       	ldi	r24, 0x03	; 3
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1a0c:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1a10:	08 95       	ret
    1a12:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <m_lookahead>
    1a16:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <m_lookahead+0x1>
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <m_lookahead+0x1>
    1a20:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <m_lookahead>
    1a24:	08 95       	ret

00001a26 <Parser_second_byte>:
    1a26:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1a2a:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1a2e:	17 de       	rcall	.-978    	; 0x165e <Buffer_size>
    1a30:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <m_lookahead>
    1a34:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <m_lookahead+0x1>
    1a38:	68 17       	cp	r22, r24
    1a3a:	79 07       	cpc	r23, r25
    1a3c:	38 f0       	brcs	.+14     	; 0x1a4c <Parser_second_byte+0x26>
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1a46:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1a4a:	08 95       	ret
    1a4c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1a50:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1a54:	55 de       	rcall	.-854    	; 0x1700 <Buffer_get>
    1a56:	85 38       	cpi	r24, 0x85	; 133
    1a58:	39 f0       	breq	.+14     	; 0x1a68 <Parser_second_byte+0x42>
    1a5a:	84 e0       	ldi	r24, 0x04	; 4
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1a62:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1a66:	08 95       	ret
    1a68:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <m_lookahead>
    1a6c:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <m_lookahead+0x1>
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <m_lookahead+0x1>
    1a76:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <m_lookahead>
    1a7a:	08 95       	ret

00001a7c <Parser_sender>:
    1a7c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1a80:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1a84:	ec dd       	rcall	.-1064   	; 0x165e <Buffer_size>
    1a86:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <m_lookahead>
    1a8a:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <m_lookahead+0x1>
    1a8e:	68 17       	cp	r22, r24
    1a90:	79 07       	cpc	r23, r25
    1a92:	38 f0       	brcs	.+14     	; 0x1aa2 <Parser_sender+0x26>
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1a9c:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1aa0:	08 95       	ret
    1aa2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1aa6:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1aaa:	2a de       	rcall	.-940    	; 0x1700 <Buffer_get>
    1aac:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <m_lookahead>
    1ab0:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <m_lookahead+0x1>
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <m_lookahead+0x1>
    1aba:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <m_lookahead>
    1abe:	08 95       	ret

00001ac0 <Parser_receiver>:
    1ac0:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1ac4:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1ac8:	ca dd       	rcall	.-1132   	; 0x165e <Buffer_size>
    1aca:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <m_lookahead>
    1ace:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <m_lookahead+0x1>
    1ad2:	68 17       	cp	r22, r24
    1ad4:	79 07       	cpc	r23, r25
    1ad6:	38 f0       	brcs	.+14     	; 0x1ae6 <Parser_receiver+0x26>
    1ad8:	82 e0       	ldi	r24, 0x02	; 2
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1ae0:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1ae4:	08 95       	ret
    1ae6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1aea:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1aee:	08 de       	rcall	.-1008   	; 0x1700 <Buffer_get>
    1af0:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <m_address>
    1af4:	89 17       	cp	r24, r25
    1af6:	39 f0       	breq	.+14     	; 0x1b06 <Parser_receiver+0x46>
    1af8:	85 e0       	ldi	r24, 0x05	; 5
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1b00:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1b04:	08 95       	ret
    1b06:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <m_lookahead>
    1b0a:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <m_lookahead+0x1>
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <m_lookahead+0x1>
    1b14:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <m_lookahead>
    1b18:	08 95       	ret

00001b1a <Parser_message_length>:
    1b1a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1b1e:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1b22:	9d dd       	rcall	.-1222   	; 0x165e <Buffer_size>
    1b24:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <m_lookahead>
    1b28:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <m_lookahead+0x1>
    1b2c:	68 17       	cp	r22, r24
    1b2e:	79 07       	cpc	r23, r25
    1b30:	38 f0       	brcs	.+14     	; 0x1b40 <Parser_message_length+0x26>
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1b3a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1b3e:	08 95       	ret
    1b40:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1b44:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1b48:	db dd       	rcall	.-1098   	; 0x1700 <Buffer_get>
    1b4a:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <m_length>
    1b4e:	8d 33       	cpi	r24, 0x3D	; 61
    1b50:	50 f4       	brcc	.+20     	; 0x1b66 <Parser_message_length+0x4c>
    1b52:	9b ea       	ldi	r25, 0xAB	; 171
    1b54:	89 9f       	mul	r24, r25
    1b56:	91 2d       	mov	r25, r1
    1b58:	11 24       	eor	r1, r1
    1b5a:	96 95       	lsr	r25
    1b5c:	29 2f       	mov	r18, r25
    1b5e:	22 0f       	add	r18, r18
    1b60:	92 0f       	add	r25, r18
    1b62:	89 17       	cp	r24, r25
    1b64:	39 f0       	breq	.+14     	; 0x1b74 <Parser_message_length+0x5a>
    1b66:	86 e0       	ldi	r24, 0x06	; 6
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1b6e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1b72:	08 95       	ret
    1b74:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <m_lookahead>
    1b78:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <m_lookahead+0x1>
    1b7c:	01 96       	adiw	r24, 0x01	; 1
    1b7e:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <m_lookahead+0x1>
    1b82:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <m_lookahead>
    1b86:	08 95       	ret

00001b88 <Parser_message_content>:
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	c0 91 8d 01 	lds	r28, 0x018D	; 0x80018d <m_lookahead>
    1b90:	d0 91 8e 01 	lds	r29, 0x018E	; 0x80018e <m_lookahead+0x1>
    1b94:	21 97       	sbiw	r28, 0x01	; 1
    1b96:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <m_length>
    1b9a:	c8 0f       	add	r28, r24
    1b9c:	d1 1d       	adc	r29, r1
    1b9e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1ba2:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1ba6:	5b dd       	rcall	.-1354   	; 0x165e <Buffer_size>
    1ba8:	c8 17       	cp	r28, r24
    1baa:	d9 07       	cpc	r29, r25
    1bac:	38 f0       	brcs	.+14     	; 0x1bbc <Parser_message_content+0x34>
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1bb6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1bba:	0c c0       	rjmp	.+24     	; 0x1bd4 <Parser_message_content+0x4c>
    1bbc:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <m_length>
    1bc0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <m_lookahead>
    1bc4:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <m_lookahead+0x1>
    1bc8:	82 0f       	add	r24, r18
    1bca:	91 1d       	adc	r25, r1
    1bcc:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <m_lookahead+0x1>
    1bd0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <m_lookahead>
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <Parser_crc>:
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	ec 97       	sbiw	r28, 0x3c	; 60
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1bfa:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1bfe:	2f dd       	rcall	.-1442   	; 0x165e <Buffer_size>
    1c00:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <m_lookahead>
    1c04:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <m_lookahead+0x1>
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	28 f4       	brcc	.+10     	; 0x1c18 <Parser_crc+0x3e>
    1c0e:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <m_length>
    1c12:	61 11       	cpse	r22, r1
    1c14:	08 c0       	rjmp	.+16     	; 0x1c26 <Parser_crc+0x4c>
    1c16:	20 c0       	rjmp	.+64     	; 0x1c58 <Parser_crc+0x7e>
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1c20:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1c24:	38 c0       	rjmp	.+112    	; 0x1c96 <Parser_crc+0xbc>
    1c26:	ce 01       	movw	r24, r28
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	7c 01       	movw	r14, r24
    1c2c:	00 e0       	ldi	r16, 0x00	; 0
    1c2e:	10 e0       	ldi	r17, 0x00	; 0
    1c30:	b8 01       	movw	r22, r16
    1c32:	6b 5f       	subi	r22, 0xFB	; 251
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1c3a:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1c3e:	60 dd       	rcall	.-1344   	; 0x1700 <Buffer_get>
    1c40:	f7 01       	movw	r30, r14
    1c42:	81 93       	st	Z+, r24
    1c44:	7f 01       	movw	r14, r30
    1c46:	0f 5f       	subi	r16, 0xFF	; 255
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <m_length>
    1c4e:	86 2f       	mov	r24, r22
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	08 17       	cp	r16, r24
    1c54:	19 07       	cpc	r17, r25
    1c56:	64 f3       	brlt	.-40     	; 0x1c30 <Parser_crc+0x56>
    1c58:	ce 01       	movw	r24, r28
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	6a dd       	rcall	.-1324   	; 0x1732 <crc>
    1c5e:	18 2f       	mov	r17, r24
    1c60:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <m_lookahead>
    1c64:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <m_lookahead+0x1>
    1c68:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1c6c:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1c70:	47 dd       	rcall	.-1394   	; 0x1700 <Buffer_get>
    1c72:	18 17       	cp	r17, r24
    1c74:	39 f0       	breq	.+14     	; 0x1c84 <Parser_crc+0xaa>
    1c76:	87 e0       	ldi	r24, 0x07	; 7
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <m_status+0x1>
    1c7e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <m_status>
    1c82:	09 c0       	rjmp	.+18     	; 0x1c96 <Parser_crc+0xbc>
    1c84:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <m_lookahead>
    1c88:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <m_lookahead+0x1>
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <m_lookahead+0x1>
    1c92:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <m_lookahead>
    1c96:	ec 96       	adiw	r28, 0x3c	; 60
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	08 95       	ret

00001cb0 <Parser_trash_bytes>:

void Parser_trash_bytes (int num_bytes)
{
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
	while (num_bytes-- > 0)
    1cb4:	ec 01       	movw	r28, r24
    1cb6:	21 97       	sbiw	r28, 0x01	; 1
    1cb8:	18 16       	cp	r1, r24
    1cba:	19 06       	cpc	r1, r25
    1cbc:	3c f4       	brge	.+14     	; 0x1ccc <Parser_trash_bytes+0x1c>
		Buffer_pop(m_buf);
    1cbe:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1cc2:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1cc6:	05 dd       	rcall	.-1526   	; 0x16d2 <Buffer_pop>
	return m_status;
}

void Parser_trash_bytes (int num_bytes)
{
	while (num_bytes-- > 0)
    1cc8:	21 97       	sbiw	r28, 0x01	; 1
    1cca:	c8 f7       	brcc	.-14     	; 0x1cbe <Parser_trash_bytes+0xe>
		Buffer_pop(m_buf);
}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <Parser_message>:

void Parser_message ()
{
	Parser_first_byte();
    1cd2:	7e de       	rcall	.-772    	; 0x19d0 <Parser_first_byte>
	if (m_status != PARSE_STATUS_GOOD) return;
    1cd4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <m_status>
    1cd8:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <m_status+0x1>
    1cdc:	01 97       	sbiw	r24, 0x01	; 1

	Parser_second_byte();
    1cde:	21 f5       	brne	.+72     	; 0x1d28 <Parser_message+0x56>
    1ce0:	a2 de       	rcall	.-700    	; 0x1a26 <Parser_second_byte>
	if (m_status != PARSE_STATUS_GOOD) return;
    1ce2:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <m_status>
    1ce6:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <m_status+0x1>
    1cea:	01 97       	sbiw	r24, 0x01	; 1

	Parser_receiver();
    1cec:	e9 f4       	brne	.+58     	; 0x1d28 <Parser_message+0x56>
    1cee:	e8 de       	rcall	.-560    	; 0x1ac0 <Parser_receiver>
	if (m_status != PARSE_STATUS_GOOD) return;
    1cf0:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <m_status>
    1cf4:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <m_status+0x1>
    1cf8:	01 97       	sbiw	r24, 0x01	; 1

	Parser_sender();
    1cfa:	b1 f4       	brne	.+44     	; 0x1d28 <Parser_message+0x56>
    1cfc:	bf de       	rcall	.-642    	; 0x1a7c <Parser_sender>
	if (m_status != PARSE_STATUS_GOOD) return;
    1cfe:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <m_status>
    1d02:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <m_status+0x1>
    1d06:	01 97       	sbiw	r24, 0x01	; 1

	Parser_message_length();
    1d08:	79 f4       	brne	.+30     	; 0x1d28 <Parser_message+0x56>
    1d0a:	07 df       	rcall	.-498    	; 0x1b1a <Parser_message_length>
	if (m_status != PARSE_STATUS_GOOD) return;
    1d0c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <m_status>
    1d10:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <m_status+0x1>
    1d14:	01 97       	sbiw	r24, 0x01	; 1

	Parser_message_content();
    1d16:	41 f4       	brne	.+16     	; 0x1d28 <Parser_message+0x56>
    1d18:	37 df       	rcall	.-402    	; 0x1b88 <Parser_message_content>
	if (m_status != PARSE_STATUS_GOOD) return;
    1d1a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <m_status>
    1d1e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <m_status+0x1>
    1d22:	01 97       	sbiw	r24, 0x01	; 1

	Parser_crc();
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <Parser_message+0x56>
    1d26:	59 cf       	rjmp	.-334    	; 0x1bda <Parser_crc>
    1d28:	08 95       	ret

00001d2a <Parser_write_message_data>:
}

void Parser_write_message_data ()
{
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
	// Write the message into the array
	const int MSG_BEGIN = 5;
	const int MSG_END = MSG_BEGIN + m_length;
    1d38:	00 91 8f 01 	lds	r16, 0x018F	; 0x80018f <m_length>
    1d3c:	10 e0       	ldi	r17, 0x00	; 0
    1d3e:	0b 5f       	subi	r16, 0xFB	; 251
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for (i = MSG_BEGIN; i < MSG_END; i += 3)
    1d42:	06 30       	cpi	r16, 0x06	; 6
    1d44:	11 05       	cpc	r17, r1
    1d46:	0c f4       	brge	.+2      	; 0x1d4a <Parser_write_message_data+0x20>
    1d48:	40 c0       	rjmp	.+128    	; 0x1dca <Parser_write_message_data+0xa0>
    1d4a:	c5 e0       	ldi	r28, 0x05	; 5
    1d4c:	d0 e0       	ldi	r29, 0x00	; 0
		uint16_t msb = Buffer_get(m_buf, i + 2);
		uint16_t data = (msb << 8) | lsb;

		if (index < m_arr_size) {
			m_arr[index] = data;
			m_flags[index] = true;
    1d4e:	dd 24       	eor	r13, r13
    1d50:	d3 94       	inc	r13
	const int MSG_BEGIN = 5;
	const int MSG_END = MSG_BEGIN + m_length;
	int i;
	for (i = MSG_BEGIN; i < MSG_END; i += 3)
	{
		uint8_t index = Buffer_get(m_buf, i);
    1d52:	be 01       	movw	r22, r28
    1d54:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1d58:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1d5c:	d1 dc       	rcall	.-1630   	; 0x1700 <Buffer_get>
    1d5e:	f8 2e       	mov	r15, r24
		uint16_t lsb = Buffer_get(m_buf, i + 1);
    1d60:	be 01       	movw	r22, r28
    1d62:	6f 5f       	subi	r22, 0xFF	; 255
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1d6a:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1d6e:	c8 dc       	rcall	.-1648   	; 0x1700 <Buffer_get>
    1d70:	e8 2e       	mov	r14, r24
		uint16_t msb = Buffer_get(m_buf, i + 2);
    1d72:	be 01       	movw	r22, r28
    1d74:	6e 5f       	subi	r22, 0xFE	; 254
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1d7c:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1d80:	bf dc       	rcall	.-1666   	; 0x1700 <Buffer_get>
		uint16_t data = (msb << 8) | lsb;

		if (index < m_arr_size) {
    1d82:	4f 2d       	mov	r20, r15
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <m_arr_size>
    1d8a:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <m_arr_size+0x1>
    1d8e:	42 17       	cp	r20, r18
    1d90:	53 07       	cpc	r21, r19
    1d92:	bc f4       	brge	.+46     	; 0x1dc2 <Parser_write_message_data+0x98>
			m_arr[index] = data;
    1d94:	9a 01       	movw	r18, r20
    1d96:	44 0f       	add	r20, r20
    1d98:	55 1f       	adc	r21, r21
    1d9a:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <m_arr>
    1d9e:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <m_arr+0x1>
    1da2:	e4 0f       	add	r30, r20
    1da4:	f5 1f       	adc	r31, r21
    1da6:	4e 2d       	mov	r20, r14
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	ba 01       	movw	r22, r20
    1dac:	78 2b       	or	r23, r24
    1dae:	71 83       	std	Z+1, r23	; 0x01
    1db0:	60 83       	st	Z, r22
			m_flags[index] = true;
    1db2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <m_flags>
    1db6:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <m_flags+0x1>
    1dba:	fc 01       	movw	r30, r24
    1dbc:	e2 0f       	add	r30, r18
    1dbe:	f3 1f       	adc	r31, r19
    1dc0:	d0 82       	st	Z, r13
{
	// Write the message into the array
	const int MSG_BEGIN = 5;
	const int MSG_END = MSG_BEGIN + m_length;
	int i;
	for (i = MSG_BEGIN; i < MSG_END; i += 3)
    1dc2:	23 96       	adiw	r28, 0x03	; 3
    1dc4:	c0 17       	cp	r28, r16
    1dc6:	d1 07       	cpc	r29, r17
    1dc8:	24 f2       	brlt	.-120    	; 0x1d52 <Parser_write_message_data+0x28>

		}
	}

	// Pop the bytes from the buffer
	int n = m_length + 6;
    1dca:	c0 91 8f 01 	lds	r28, 0x018F	; 0x80018f <m_length>
    1dce:	d0 e0       	ldi	r29, 0x00	; 0
	while (n-- > 0)
    1dd0:	25 96       	adiw	r28, 0x05	; 5
		Buffer_pop(m_buf);
    1dd2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1dd6:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1dda:	7b dc       	rcall	.-1802   	; 0x16d2 <Buffer_pop>
		}
	}

	// Pop the bytes from the buffer
	int n = m_length + 6;
	while (n-- > 0)
    1ddc:	21 97       	sbiw	r28, 0x01	; 1
    1dde:	c8 f7       	brcc	.-14     	; 0x1dd2 <Parser_write_message_data+0xa8>
		Buffer_pop(m_buf);
}
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	df 90       	pop	r13
    1dee:	08 95       	ret

00001df0 <parse>:
/*
 * API Function
 */
int byteWriteCount = 0;
unsigned int parse (Buffer_t * buf, uint16_t * arr, bool * flags, int arr_size, uint8_t address)
{
    1df0:	8f 92       	push	r8
    1df2:	9f 92       	push	r9
    1df4:	af 92       	push	r10
    1df6:	bf 92       	push	r11
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	cf 93       	push	r28
    1e04:	4c 01       	movw	r8, r24
    1e06:	5b 01       	movw	r10, r22
    1e08:	6a 01       	movw	r12, r20
    1e0a:	79 01       	movw	r14, r18
    1e0c:	c0 2f       	mov	r28, r16
	byteWriteCount = 0;
    1e0e:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <byteWriteCount+0x1>
    1e12:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <byteWriteCount>
	while (1)
	{
		// reset the parsing module
		Parser_init(buf, arr, flags, arr_size, address);
    1e16:	0c 2f       	mov	r16, r28
    1e18:	97 01       	movw	r18, r14
    1e1a:	a6 01       	movw	r20, r12
    1e1c:	b5 01       	movw	r22, r10
    1e1e:	c4 01       	movw	r24, r8
    1e20:	b6 dd       	rcall	.-1172   	; 0x198e <Parser_init>

		if (Buffer_empty(m_buf)) {
    1e22:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1e26:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1e2a:	26 dc       	rcall	.-1972   	; 0x1678 <Buffer_empty>
    1e2c:	88 23       	and	r24, r24
    1e2e:	29 f0       	breq	.+10     	; 0x1e3a <parse+0x4a>

			// exit because no more data in buffer

			return byteWriteCount;
    1e30:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <byteWriteCount>
    1e34:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <byteWriteCount+0x1>
		}

		Parser_message();
    1e38:	31 c0       	rjmp	.+98     	; 0x1e9c <parse+0xac>
    1e3a:	4b df       	rcall	.-362    	; 0x1cd2 <Parser_message>
		int status = Parser_status();

		switch (status)
    1e3c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <m_status>
    1e40:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <m_status+0x1>
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	91 05       	cpc	r25, r1
    1e48:	19 f0       	breq	.+6      	; 0x1e50 <parse+0x60>
    1e4a:	02 97       	sbiw	r24, 0x02	; 2
    1e4c:	71 f0       	breq	.+28     	; 0x1e6a <parse+0x7a>
		{
		case PARSE_STATUS_GOOD:


			Parser_write_message_data();
    1e4e:	20 c0       	rjmp	.+64     	; 0x1e90 <parse+0xa0>
    1e50:	6c df       	rcall	.-296    	; 0x1d2a <Parser_write_message_data>
			toggleLED(8);
    1e52:	88 e0       	ldi	r24, 0x08	; 8
    1e54:	4a d1       	rcall	.+660    	; 0x20ea <toggleLED>
    1e56:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <byteWriteCount>
			byteWriteCount++;
    1e5a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <byteWriteCount+0x1>
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <byteWriteCount+0x1>
    1e64:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <byteWriteCount>
    1e68:	d6 cf       	rjmp	.-84     	; 0x1e16 <parse+0x26>
			break;

		case PARSE_STATUS_NOT_ENOUGH_DATA:
			if(Buffer_full(m_buf))
    1e6a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1e6e:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1e72:	f9 db       	rcall	.-2062   	; 0x1666 <Buffer_full>
    1e74:	88 23       	and	r24, r24
    1e76:	29 f0       	breq	.+10     	; 0x1e82 <parse+0x92>
			{
				Buffer_clear(m_buf);
    1e78:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <m_buf>
    1e7c:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <m_buf+0x1>
    1e80:	4e dc       	rcall	.-1892   	; 0x171e <Buffer_clear>
			}
			// exit because there is not enough data in the buffer
			// to finish the message
			toggleLED(9);
    1e82:	89 e0       	ldi	r24, 0x09	; 9
    1e84:	32 d1       	rcall	.+612    	; 0x20ea <toggleLED>
			return byteWriteCount;
    1e86:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <byteWriteCount>
    1e8a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <byteWriteCount+0x1>
		case PARSE_STATUS_BAD_ADDRESS:
		case PARSE_STATUS_BAD_MSG_LENGTH:
		case PARSE_STATUS_BAD_CRC_CODE:
		default:

			Parser_trash_bytes(1);
    1e8e:	06 c0       	rjmp	.+12     	; 0x1e9c <parse+0xac>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0d df       	rcall	.-486    	; 0x1cb0 <Parser_trash_bytes>
			//if(status != PARSE_STATUS_BAD_FIRST_BYTE)
			//printf(": %d ",status);
			toggleLED(10);
    1e96:	8a e0       	ldi	r24, 0x0A	; 10
    1e98:	28 d1       	rcall	.+592    	; 0x20ea <toggleLED>
    1e9a:	bd cf       	rjmp	.-134    	; 0x1e16 <parse+0x26>
			break;
    1e9c:	cf 91       	pop	r28
		}
	}
}
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	bf 90       	pop	r11
    1eaa:	af 90       	pop	r10
    1eac:	9f 90       	pop	r9
    1eae:	8f 90       	pop	r8
    1eb0:	08 95       	ret

00001eb2 <initialize>:
extern timer_t ledTimer,  checkCANTimer;

//#define WATCHDOG_RESET

void initialize(void)
{
    1eb2:	cf 93       	push	r28
#ifdef WATCHDOG_RESET
	WDTCR= (1<<3)| (0b00000111);    //Enable watchdog with prescaler 111
#endif
	//stdout = &mystdout;
	//Startup the USARTs
	USART1_Init(115200); //control box
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	72 ec       	ldi	r23, 0xC2	; 194
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <USART1_Init>
	USART0_Init(115200); //beacon
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	72 ec       	ldi	r23, 0xC2	; 194
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART0_Init>
//Initialize the timer0 and timer systems
	initTimer0();
    1ecc:	07 d3       	rcall	.+1550   	; 0x24dc <initTimer0>

	setupCommsTimers();
    1ece:	71 db       	rcall	.-2334   	; 0x15b2 <setupCommsTimers>
    1ed0:	8f e7       	ldi	r24, 0x7F	; 127


	//Setup the I/O ports
	PORTA = 0b01111111;
    1ed2:	82 b9       	out	0x02, r24	; 2
    1ed4:	88 ef       	ldi	r24, 0xF8	; 248
	PORTF = 0b11111000;
    1ed6:	81 bb       	out	0x11, r24	; 17
    1ed8:	9f ef       	ldi	r25, 0xFF	; 255
	DDRA  = 0b11111111; //0-6 are outputs, 7 is an input (jumper for competition mode) //(Currently an output for debug)
    1eda:	91 b9       	out	0x01, r25	; 1
	DDRF  = 0b11111000; //3-7 are outputs
    1edc:	80 bb       	out	0x10, r24	; 16
#ifdef WATCHDOG_RESET
	//Clear watchdog
	WDTCR = 0b00011000;
	WDTCR = 0b00010000;
#endif
	initLED();
    1ede:	59 d0       	rcall	.+178    	; 0x1f92 <initLED>
    1ee0:	78 94       	sei
	sei();
    1ee2:	c1 e0       	ldi	r28, 0x01	; 1

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
	{
		setLED(i,ON);
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	8c 2f       	mov	r24, r28
    1ee8:	9b d0       	rcall	.+310    	; 0x2020 <setLED>
    1eea:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1eec:	80 e7       	ldi	r24, 0x70	; 112
    1eee:	92 e0       	ldi	r25, 0x02	; 2
    1ef0:	21 50       	subi	r18, 0x01	; 1
    1ef2:	80 40       	sbci	r24, 0x00	; 0
    1ef4:	90 40       	sbci	r25, 0x00	; 0
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <initialize+0x3e>
    1ef8:	00 c0       	rjmp	.+0      	; 0x1efa <initialize+0x48>
    1efa:	00 00       	nop
    1efc:	cf 5f       	subi	r28, 0xFF	; 255
    1efe:	cd 30       	cpi	r28, 0x0D	; 13
	WDTCR = 0b00010000;
#endif
	initLED();
	sei();

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
    1f00:	89 f7       	brne	.-30     	; 0x1ee4 <initialize+0x32>
    1f02:	2f ef       	ldi	r18, 0xFF	; 255
    1f04:	83 ed       	ldi	r24, 0xD3	; 211
    1f06:	90 e3       	ldi	r25, 0x30	; 48
    1f08:	21 50       	subi	r18, 0x01	; 1
    1f0a:	80 40       	sbci	r24, 0x00	; 0
    1f0c:	90 40       	sbci	r25, 0x00	; 0
    1f0e:	e1 f7       	brne	.-8      	; 0x1f08 <initialize+0x56>
    1f10:	00 c0       	rjmp	.+0      	; 0x1f12 <initialize+0x60>
    1f12:	00 00       	nop
    1f14:	c1 e0       	ldi	r28, 0x01	; 1

	_delay_ms(1000);

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
	{
		setLED(i,OFF);
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	8c 2f       	mov	r24, r28
    1f1a:	82 d0       	rcall	.+260    	; 0x2020 <setLED>
    1f1c:	2f ef       	ldi	r18, 0xFF	; 255
    1f1e:	80 e7       	ldi	r24, 0x70	; 112
    1f20:	92 e0       	ldi	r25, 0x02	; 2
    1f22:	21 50       	subi	r18, 0x01	; 1
    1f24:	80 40       	sbci	r24, 0x00	; 0
    1f26:	90 40       	sbci	r25, 0x00	; 0
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <initialize+0x70>
    1f2a:	00 c0       	rjmp	.+0      	; 0x1f2c <initialize+0x7a>
    1f2c:	00 00       	nop
    1f2e:	cf 5f       	subi	r28, 0xFF	; 255
		_delay_ms(50);
	}

	_delay_ms(1000);

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
    1f30:	cd 30       	cpi	r28, 0x0D	; 13
    1f32:	89 f7       	brne	.-30     	; 0x1f16 <initialize+0x64>
	}
#ifdef WATCHDOG_RESET
	WDTCR= (1<<3)| (0b00000111);    //Enable watchdog with prescaler 111
#endif
	//Init the CAN here
	can_init();
    1f34:	0e 94 8d 05 	call	0xb1a	; 0xb1a <can_init>

	//Start communciations handlers
	initCANFastTransfer();
    1f38:	e5 d8       	rcall	.-3638   	; 0x1104 <initCANFastTransfer>
    1f3a:	cf 91       	pop	r28

#ifdef WATCHDOG_RESET
	WDTCR = 0b00011000;
	WDTCR = 0b00010000;
#endif
    1f3c:	08 95       	ret

00001f3e <SetNeoPixRGB>:
    1f3e:	cf 93       	push	r28

			SetNeoPixRGB(rgbColour.r, rgbColour.g, rgbColour.b);
			_delay_us(100);
		}
	}
}
    1f40:	df 93       	push	r29
    1f42:	eb e2       	ldi	r30, 0x2B	; 43
    1f44:	fc e0       	ldi	r31, 0x0C	; 12
    1f46:	81 83       	std	Z+1, r24	; 0x01
    1f48:	60 83       	st	Z, r22
    1f4a:	42 83       	std	Z+2, r20	; 0x02
    1f4c:	c0 e0       	ldi	r28, 0x00	; 0
    1f4e:	d0 e0       	ldi	r29, 0x00	; 0
    1f50:	45 e0       	ldi	r20, 0x05	; 5
    1f52:	be 01       	movw	r22, r28
    1f54:	8b e2       	ldi	r24, 0x2B	; 43
    1f56:	9c e0       	ldi	r25, 0x0C	; 12
    1f58:	fa d0       	rcall	.+500    	; 0x214e <ws2812_setleds>
    1f5a:	46 e0       	ldi	r20, 0x06	; 6
    1f5c:	be 01       	movw	r22, r28
    1f5e:	8b e2       	ldi	r24, 0x2B	; 43
    1f60:	9c e0       	ldi	r25, 0x0C	; 12
    1f62:	f5 d0       	rcall	.+490    	; 0x214e <ws2812_setleds>
    1f64:	21 96       	adiw	r28, 0x01	; 1
    1f66:	c9 30       	cpi	r28, 0x09	; 9
    1f68:	d1 05       	cpc	r29, r1
    1f6a:	91 f7       	brne	.-28     	; 0x1f50 <SetNeoPixRGB+0x12>
    1f6c:	c1 e0       	ldi	r28, 0x01	; 1
    1f6e:	d0 e0       	ldi	r29, 0x00	; 0
    1f70:	43 e0       	ldi	r20, 0x03	; 3
    1f72:	be 01       	movw	r22, r28
    1f74:	8b e2       	ldi	r24, 0x2B	; 43
    1f76:	9c e0       	ldi	r25, 0x0C	; 12
    1f78:	ea d0       	rcall	.+468    	; 0x214e <ws2812_setleds>
    1f7a:	44 e0       	ldi	r20, 0x04	; 4
    1f7c:	be 01       	movw	r22, r28
    1f7e:	8b e2       	ldi	r24, 0x2B	; 43
    1f80:	9c e0       	ldi	r25, 0x0C	; 12
    1f82:	e5 d0       	rcall	.+458    	; 0x214e <ws2812_setleds>
    1f84:	21 96       	adiw	r28, 0x01	; 1
    1f86:	c9 31       	cpi	r28, 0x19	; 25
    1f88:	d1 05       	cpc	r29, r1
    1f8a:	91 f7       	brne	.-28     	; 0x1f70 <SetNeoPixRGB+0x32>
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret

00001f92 <initLED>:
void initLED()
{
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
	setTimerInterval(&LED_Flash, 1000);
    1f96:	08 ee       	ldi	r16, 0xE8	; 232
    1f98:	13 e0       	ldi	r17, 0x03	; 3
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	83 e0       	ldi	r24, 0x03	; 3
    1fa8:	9c e0       	ldi	r25, 0x0C	; 12
    1faa:	e9 d1       	rcall	.+978    	; 0x237e <setTimerInterval>
	SetNeoPixRGB(0, 0, 0);
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	c2 df       	rcall	.-124    	; 0x1f3e <SetNeoPixRGB>
}
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	08 95       	ret

00001fc0 <flashLedColors>:
		//_delay_ms(100);
	}
}

void flashLedColors(cRGB_t cRGB_1,cRGB_t cRGB_2)
{
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	16 2f       	mov	r17, r22
    1fce:	e7 2e       	mov	r14, r23
    1fd0:	08 2f       	mov	r16, r24
    1fd2:	c2 2f       	mov	r28, r18
    1fd4:	f3 2e       	mov	r15, r19
    1fd6:	d4 2f       	mov	r29, r20
	if(timerDone(&LED_Flash)) {
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	9c e0       	ldi	r25, 0x0C	; 12
    1fdc:	23 d2       	rcall	.+1094   	; 0x2424 <timerDone>
    1fde:	88 23       	and	r24, r24
    1fe0:	c1 f0       	breq	.+48     	; 0x2012 <flashLedColors+0x52>
		if(ToggleVal) {
    1fe2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <ToggleVal>
    1fe6:	88 23       	and	r24, r24
    1fe8:	51 f0       	breq	.+20     	; 0x1ffe <flashLedColors+0x3e>
			SetNeoPixRGB(cRGB_1.r, cRGB_1.g, cRGB_1.b);
    1fea:	40 2f       	mov	r20, r16
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	61 2f       	mov	r22, r17
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	8e 2d       	mov	r24, r14
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	a3 df       	rcall	.-186    	; 0x1f3e <SetNeoPixRGB>
			ToggleVal = false;
    1ff8:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <ToggleVal>
    1ffc:	0a c0       	rjmp	.+20     	; 0x2012 <flashLedColors+0x52>
		} else {
			SetNeoPixRGB(cRGB_2.r, cRGB_2.g, cRGB_2.b);
    1ffe:	4d 2f       	mov	r20, r29
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	6c 2f       	mov	r22, r28
    2004:	70 e0       	ldi	r23, 0x00	; 0
    2006:	8f 2d       	mov	r24, r15
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	99 df       	rcall	.-206    	; 0x1f3e <SetNeoPixRGB>
			ToggleVal = true;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <ToggleVal>
		}
	}

}
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	08 95       	ret

00002020 <setLED>:
void setLED(LEDs_ENUMED_t ledNumber, bool state)
{
    2020:	96 2f       	mov	r25, r22
	int ledToSwitch = 0;
	//HIGH SETS
	if(!state)
    2022:	61 11       	cpse	r22, r1
    2024:	1a c0       	rjmp	.+52     	; 0x205a <setLED+0x3a>
	{
		switch(ledNumber)
    2026:	48 2f       	mov	r20, r24
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	fa 01       	movw	r30, r20
    202c:	31 97       	sbiw	r30, 0x01	; 1
    202e:	ec 30       	cpi	r30, 0x0C	; 12
    2030:	f1 05       	cpc	r31, r1
    2032:	88 f5       	brcc	.+98     	; 0x2096 <setLED+0x76>
    2034:	e6 5b       	subi	r30, 0xB6	; 182
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	96 c2       	rjmp	.+1324   	; 0x2566 <__tablejump2__>
			break;
		case LED7:
			ledToSwitch=LED7_P_HIGH;
			break;
		case LED8:
			ledToSwitch=LED8_P_HIGH;
    203a:	88 e0       	ldi	r24, 0x08	; 8
    203c:	40 c0       	rjmp	.+128    	; 0x20be <setLED+0x9e>
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_HIGH;
			break;
		case LED2:
			ledToSwitch=LED2_P_HIGH;
    203e:	80 e4       	ldi	r24, 0x40	; 64
    2040:	34 c0       	rjmp	.+104    	; 0x20aa <setLED+0x8a>
			ledToSwitch=LED9_P_HIGH;
			break;

		//LEDs on PORTA
		case LED3:
			ledToSwitch=LED3_P_HIGH;
    2042:	81 e0       	ldi	r24, 0x01	; 1
			break;
    2044:	3c c0       	rjmp	.+120    	; 0x20be <setLED+0x9e>
		case LED4:
			ledToSwitch=LED4_P_HIGH;
    2046:	84 e0       	ldi	r24, 0x04	; 4
			break;
    2048:	3a c0       	rjmp	.+116    	; 0x20be <setLED+0x9e>
		case LED5:
			ledToSwitch=LED5_P_HIGH;
    204a:	80 e1       	ldi	r24, 0x10	; 16
			break;
    204c:	38 c0       	rjmp	.+112    	; 0x20be <setLED+0x9e>
		case LED6:
			ledToSwitch=LED6_P_HIGH;
    204e:	80 e4       	ldi	r24, 0x40	; 64
			break;
    2050:	36 c0       	rjmp	.+108    	; 0x20be <setLED+0x9e>
		case LED10:
			ledToSwitch=LED10_P_HIGH;
			break;
		case LED11:
			ledToSwitch=LED11_P_HIGH;
    2052:	80 e2       	ldi	r24, 0x20	; 32
			break;
    2054:	2a c0       	rjmp	.+84     	; 0x20aa <setLED+0x8a>
		case LED12:
			ledToSwitch=LED12_P_HIGH;
    2056:	88 e0       	ldi	r24, 0x08	; 8
			break;
    2058:	28 c0       	rjmp	.+80     	; 0x20aa <setLED+0x8a>
#endif
		}
	}
	else
	{
		switch(ledNumber)
    205a:	48 2f       	mov	r20, r24
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	fa 01       	movw	r30, r20
    2060:	31 97       	sbiw	r30, 0x01	; 1
    2062:	ec 30       	cpi	r30, 0x0C	; 12
    2064:	f1 05       	cpc	r31, r1
    2066:	b8 f4       	brcc	.+46     	; 0x2096 <setLED+0x76>
    2068:	ea 5a       	subi	r30, 0xAA	; 170
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	7c c2       	rjmp	.+1272   	; 0x2566 <__tablejump2__>
			break;
		case LED7:
			ledToSwitch=LED7_P_LOW;
			break;
		case LED8:
			ledToSwitch=LED8_P_LOW;
    206e:	87 ef       	ldi	r24, 0xF7	; 247
    2070:	26 c0       	rjmp	.+76     	; 0x20be <setLED+0x9e>
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_LOW;
			break;
		case LED2:
			ledToSwitch=LED2_P_LOW;
    2072:	8f eb       	ldi	r24, 0xBF	; 191
    2074:	1a c0       	rjmp	.+52     	; 0x20aa <setLED+0x8a>
			break;
		case LED8:
			ledToSwitch=LED8_P_LOW;
			break;
		case LED9:
			ledToSwitch=LED9_P_LOW;
    2076:	8d ef       	ldi	r24, 0xFD	; 253
			break;
    2078:	22 c0       	rjmp	.+68     	; 0x20be <setLED+0x9e>

		//LEDs on PORTA
		case LED3:
			ledToSwitch=LED3_P_LOW;
    207a:	8e ef       	ldi	r24, 0xFE	; 254
			break;
    207c:	20 c0       	rjmp	.+64     	; 0x20be <setLED+0x9e>
		case LED4:
			ledToSwitch=LED4_P_LOW;
    207e:	8b ef       	ldi	r24, 0xFB	; 251
			break;
    2080:	1e c0       	rjmp	.+60     	; 0x20be <setLED+0x9e>
		case LED5:
			ledToSwitch=LED5_P_LOW;
    2082:	8f ee       	ldi	r24, 0xEF	; 239
			break;
    2084:	1c c0       	rjmp	.+56     	; 0x20be <setLED+0x9e>
		case LED6:
			ledToSwitch=LED6_P_LOW;
    2086:	8f eb       	ldi	r24, 0xBF	; 191
			break;
    2088:	1a c0       	rjmp	.+52     	; 0x20be <setLED+0x9e>
		case LED10:
			ledToSwitch=LED10_P_LOW;
    208a:	8f e7       	ldi	r24, 0x7F	; 127
			break;
    208c:	0e c0       	rjmp	.+28     	; 0x20aa <setLED+0x8a>
		case LED11:
			ledToSwitch=LED11_P_LOW;
    208e:	8f ed       	ldi	r24, 0xDF	; 223
			break;
    2090:	0c c0       	rjmp	.+24     	; 0x20aa <setLED+0x8a>
		case LED12:
			ledToSwitch=LED12_P_LOW;
    2092:	87 ef       	ldi	r24, 0xF7	; 247
			break;
    2094:	0a c0       	rjmp	.+20     	; 0x20aa <setLED+0x8a>


	}
#ifdef NEW_MAIN
	unsigned int portRead;
	switch(ledNumber)
    2096:	8a 30       	cpi	r24, 0x0A	; 10
    2098:	28 f4       	brcc	.+10     	; 0x20a4 <setLED+0x84>
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	78 f4       	brcc	.+30     	; 0x20bc <setLED+0x9c>
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	18 f1       	brcs	.+70     	; 0x20e8 <setLED+0xc8>
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <setLED+0x88>
    20a4:	8d 30       	cpi	r24, 0x0D	; 13
    20a6:	00 f5       	brcc	.+64     	; 0x20e8 <setLED+0xc8>
    20a8:	80 e0       	ldi	r24, 0x00	; 0
	case LED2:
	case LED10:
	case LED11:
	case LED12:

		portRead= PINF;
    20aa:	2f b1       	in	r18, 0x0f	; 15
		//if you want the LED off
		if(!state)
    20ac:	91 11       	cpse	r25, r1
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <setLED+0x96>
		{
			//Turn it high (OFF)
			PORTF = portRead | (ledToSwitch);
    20b0:	82 2b       	or	r24, r18
    20b2:	81 bb       	out	0x11, r24	; 17
    20b4:	08 95       	ret
		}
		else
		{
			//Turn it low (ON)
			PORTF = portRead & (ledToSwitch);
    20b6:	82 23       	and	r24, r18
    20b8:	81 bb       	out	0x11, r24	; 17
    20ba:	08 95       	ret


	}
#ifdef NEW_MAIN
	unsigned int portRead;
	switch(ledNumber)
    20bc:	80 e0       	ldi	r24, 0x00	; 0
	case LED5:
	case LED6:
	case LED7:
	case LED8:
	case LED9:
		portRead= PINA;
    20be:	20 b1       	in	r18, 0x00	; 0
		//If you want the LED off
		if(!state)
    20c0:	91 11       	cpse	r25, r1
    20c2:	03 c0       	rjmp	.+6      	; 0x20ca <setLED+0xaa>
		{
			//Turn the port high (OFF)
			PORTA = portRead | (ledToSwitch);
    20c4:	82 2b       	or	r24, r18
    20c6:	82 b9       	out	0x02, r24	; 2
    20c8:	08 95       	ret
		}
		else
		{
			//Turn the port low (ON)
			PORTA = portRead & (ledToSwitch);
    20ca:	82 23       	and	r24, r18
    20cc:	82 b9       	out	0x02, r24	; 2
	{
		PORTA= PINA & (ledToSwitch);
	}
#endif

}
    20ce:	08 95       	ret
		switch(ledNumber)
		{
#ifdef NEW_MAIN
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_HIGH;
    20d0:	80 e1       	ldi	r24, 0x10	; 16
    20d2:	eb cf       	rjmp	.-42     	; 0x20aa <setLED+0x8a>
			break;
		case LED6:
			ledToSwitch=LED6_P_HIGH;
			break;
		case LED10:
			ledToSwitch=LED10_P_HIGH;
    20d4:	80 e8       	ldi	r24, 0x80	; 128
    20d6:	e9 cf       	rjmp	.-46     	; 0x20aa <setLED+0x8a>
		switch(ledNumber)
		{
#ifdef NEW_MAIN
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_LOW;
    20d8:	8f ee       	ldi	r24, 0xEF	; 239
    20da:	e7 cf       	rjmp	.-50     	; 0x20aa <setLED+0x8a>
			break;
		case LED2:
			ledToSwitch=LED2_P_HIGH;
			break;
		case LED7:
			ledToSwitch=LED7_P_HIGH;
    20dc:	80 e2       	ldi	r24, 0x20	; 32
    20de:	ef cf       	rjmp	.-34     	; 0x20be <setLED+0x9e>
			break;
		case LED8:
			ledToSwitch=LED8_P_HIGH;
			break;
		case LED9:
			ledToSwitch=LED9_P_HIGH;
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	ed cf       	rjmp	.-38     	; 0x20be <setLED+0x9e>
			break;
		case LED2:
			ledToSwitch=LED2_P_LOW;
			break;
		case LED7:
			ledToSwitch=LED7_P_LOW;
    20e4:	8f ed       	ldi	r24, 0xDF	; 223
    20e6:	eb cf       	rjmp	.-42     	; 0x20be <setLED+0x9e>
    20e8:	08 95       	ret

000020ea <toggleLED>:
}

void toggleLED(LEDs_ENUMED_t ledNumber)
{
	int ledToSwitch=0;
	switch(ledNumber)
    20ea:	48 2f       	mov	r20, r24
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	fa 01       	movw	r30, r20
    20f0:	31 97       	sbiw	r30, 0x01	; 1
    20f2:	ec 30       	cpi	r30, 0x0C	; 12
    20f4:	f1 05       	cpc	r31, r1
    20f6:	98 f4       	brcc	.+38     	; 0x211e <toggleLED+0x34>
    20f8:	ee 59       	subi	r30, 0x9E	; 158
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	34 c2       	rjmp	.+1128   	; 0x2566 <__tablejump2__>
		break;
	case LED7:
		ledToSwitch=LED7_P_HIGH;
		break;
	case LED8:
		ledToSwitch=LED8_P_HIGH;
    20fe:	88 e0       	ldi	r24, 0x08	; 8
    2100:	1b c0       	rjmp	.+54     	; 0x2138 <toggleLED+0x4e>
	//LEDs on PORTF
	case LED1:
		ledToSwitch=LED1_P_HIGH;
		break;
	case LED2:
		ledToSwitch=LED2_P_HIGH;
    2102:	80 e4       	ldi	r24, 0x40	; 64
    2104:	16 c0       	rjmp	.+44     	; 0x2132 <toggleLED+0x48>
		ledToSwitch=LED9_P_HIGH;
		break;

	//LEDs on PORTA
	case LED3:
		ledToSwitch=LED3_P_HIGH;
    2106:	81 e0       	ldi	r24, 0x01	; 1
		break;
    2108:	17 c0       	rjmp	.+46     	; 0x2138 <toggleLED+0x4e>
	case LED4:
		ledToSwitch=LED4_P_HIGH;
    210a:	84 e0       	ldi	r24, 0x04	; 4
		break;
    210c:	15 c0       	rjmp	.+42     	; 0x2138 <toggleLED+0x4e>
	case LED5:
		ledToSwitch=LED5_P_HIGH;
    210e:	80 e1       	ldi	r24, 0x10	; 16
		break;
    2110:	13 c0       	rjmp	.+38     	; 0x2138 <toggleLED+0x4e>
	case LED6:
		ledToSwitch=LED6_P_HIGH;
    2112:	80 e4       	ldi	r24, 0x40	; 64
		break;
    2114:	11 c0       	rjmp	.+34     	; 0x2138 <toggleLED+0x4e>
	case LED10:
		ledToSwitch=LED10_P_HIGH;
		break;
	case LED11:
		ledToSwitch=LED11_P_HIGH;
    2116:	80 e2       	ldi	r24, 0x20	; 32
		break;
    2118:	0c c0       	rjmp	.+24     	; 0x2132 <toggleLED+0x48>
	case LED12:
		ledToSwitch=LED12_P_HIGH;
    211a:	88 e0       	ldi	r24, 0x08	; 8
		break;
    211c:	0a c0       	rjmp	.+20     	; 0x2132 <toggleLED+0x48>
		ledToSwitch=ERROR2_P_HIGH;
		break;
#endif
	}
#ifdef NEW_MAIN
	switch(ledNumber)
    211e:	8a 30       	cpi	r24, 0x0A	; 10
    2120:	28 f4       	brcc	.+10     	; 0x212c <toggleLED+0x42>
    2122:	83 30       	cpi	r24, 0x03	; 3
    2124:	40 f4       	brcc	.+16     	; 0x2136 <toggleLED+0x4c>
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	88 f0       	brcs	.+34     	; 0x214c <toggleLED+0x62>
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <toggleLED+0x46>
    212c:	8d 30       	cpi	r24, 0x0D	; 13
    212e:	70 f4       	brcc	.+28     	; 0x214c <toggleLED+0x62>

}

void toggleLED(LEDs_ENUMED_t ledNumber)
{
	int ledToSwitch=0;
    2130:	80 e0       	ldi	r24, 0x00	; 0
	case LED2:
	case LED10:
	case LED11:
	case LED12:
		//Toggle pin State
		PINF = (ledToSwitch);
    2132:	8f b9       	out	0x0f, r24	; 15
		break;
    2134:	08 95       	ret

}

void toggleLED(LEDs_ENUMED_t ledNumber)
{
	int ledToSwitch=0;
    2136:	80 e0       	ldi	r24, 0x00	; 0
	case LED6:
	case LED7:
	case LED8:
	case LED9:
		//Toggle pin State
		PINA= (ledToSwitch);
    2138:	80 b9       	out	0x00, r24	; 0
		break;
	}
#else
	PINA = ledToSwitch;
#endif
    213a:	08 95       	ret
	switch(ledNumber)
	{
#ifdef NEW_MAIN
	//LEDs on PORTF
	case LED1:
		ledToSwitch=LED1_P_HIGH;
    213c:	80 e1       	ldi	r24, 0x10	; 16
    213e:	f9 cf       	rjmp	.-14     	; 0x2132 <toggleLED+0x48>
		break;
	case LED6:
		ledToSwitch=LED6_P_HIGH;
		break;
	case LED10:
		ledToSwitch=LED10_P_HIGH;
    2140:	80 e8       	ldi	r24, 0x80	; 128
    2142:	f7 cf       	rjmp	.-18     	; 0x2132 <toggleLED+0x48>
		break;
	case LED2:
		ledToSwitch=LED2_P_HIGH;
		break;
	case LED7:
		ledToSwitch=LED7_P_HIGH;
    2144:	80 e2       	ldi	r24, 0x20	; 32
    2146:	f8 cf       	rjmp	.-16     	; 0x2138 <toggleLED+0x4e>
		break;
	case LED8:
		ledToSwitch=LED8_P_HIGH;
		break;
	case LED9:
		ledToSwitch=LED9_P_HIGH;
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	f6 cf       	rjmp	.-20     	; 0x2138 <toggleLED+0x4e>
    214c:	08 95       	ret

0000214e <ws2812_setleds>:



// Setleds for standard RGB
void ws2812_setleds( cRGB_t *ledarray, uint16_t leds, uint8_t pin)
{
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
	ws2812_setleds_pin(ledarray,leds, _BV(pin));
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	02 c0       	rjmp	.+4      	; 0x215e <ws2812_setleds+0x10>
    215a:	22 0f       	add	r18, r18
    215c:	33 1f       	adc	r19, r19
    215e:	4a 95       	dec	r20
    2160:	e2 f7       	brpl	.-8      	; 0x215a <ws2812_setleds+0xc>

}

void inline ws2812_setleds_pin(cRGB_t *ledarray, uint16_t leds, uint8_t pinmask)
{
	ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
    2162:	fb 01       	movw	r30, r22
    2164:	ee 0f       	add	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	e6 0f       	add	r30, r22
    216a:	f7 1f       	adc	r31, r23
uint8_t *homeptr;
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
	uint8_t curbyte,ctr,masklo;
	uint8_t sreg_prev;
	tmpData = (data+3);
    216c:	ac 01       	movw	r20, r24
    216e:	4d 5f       	subi	r20, 0xFD	; 253
    2170:	5f 4f       	sbci	r21, 0xFF	; 255
    2172:	50 93 31 0c 	sts	0x0C31, r21	; 0x800c31 <tmpData+0x1>
    2176:	40 93 30 0c 	sts	0x0C30, r20	; 0x800c30 <tmpData>
	homeptr = data;
    217a:	90 93 33 0c 	sts	0x0C33, r25	; 0x800c33 <homeptr+0x1>
    217e:	80 93 32 0c 	sts	0x0C32, r24	; 0x800c32 <homeptr>
	ws2812_DDRREG |= maskhi; // Enable output
    2182:	37 b1       	in	r19, 0x07	; 7
    2184:	32 2b       	or	r19, r18
    2186:	37 b9       	out	0x07, r19	; 7

	masklo  =~maskhi&ws2812_PORTREG;
    2188:	38 b1       	in	r19, 0x08	; 8
    218a:	72 2f       	mov	r23, r18
    218c:	70 95       	com	r23
    218e:	73 23       	and	r23, r19
	maskhi |=        ws2812_PORTREG;
    2190:	58 b1       	in	r21, 0x08	; 8
    2192:	52 2b       	or	r21, r18

	sreg_prev=SREG;
    2194:	1f b7       	in	r17, 0x3f	; 63
	cli();
    2196:	f8 94       	cli

	while (datlen--) {
    2198:	9f 01       	movw	r18, r30
    219a:	21 50       	subi	r18, 0x01	; 1
    219c:	31 09       	sbc	r19, r1
    219e:	ef 2b       	or	r30, r31
    21a0:	21 f1       	breq	.+72     	; 0x21ea <loop98+0x22>
		if(data == tmpData)
    21a2:	a0 91 30 0c 	lds	r26, 0x0C30	; 0x800c30 <tmpData>
    21a6:	b0 91 31 0c 	lds	r27, 0x0C31	; 0x800c31 <tmpData+0x1>
			data = homeptr;
    21aa:	d0 91 32 0c 	lds	r29, 0x0C32	; 0x800c32 <homeptr>
    21ae:	c0 91 33 0c 	lds	r28, 0x0C33	; 0x800c33 <homeptr+0x1>

	sreg_prev=SREG;
	cli();

	while (datlen--) {
		if(data == tmpData)
    21b2:	a8 17       	cp	r26, r24
    21b4:	b9 07       	cpc	r27, r25
    21b6:	19 f4       	brne	.+6      	; 0x21be <ws2812_setleds+0x70>
			data = homeptr;
    21b8:	ed 2f       	mov	r30, r29
    21ba:	fc 2f       	mov	r31, r28
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <ws2812_setleds+0x72>

	sreg_prev=SREG;
	cli();

	while (datlen--) {
		if(data == tmpData)
    21be:	fc 01       	movw	r30, r24
			data = homeptr;
		curbyte=*data++;
    21c0:	cf 01       	movw	r24, r30
    21c2:	01 96       	adiw	r24, 0x01	; 1

		asm volatile(
    21c4:	40 81       	ld	r20, Z
    21c6:	68 e0       	ldi	r22, 0x08	; 8

000021c8 <loop98>:
    21c8:	58 b9       	out	0x08, r21	; 8
    21ca:	00 00       	nop
    21cc:	00 c0       	rjmp	.+0      	; 0x21ce <loop98+0x6>
    21ce:	47 ff       	sbrs	r20, 7
    21d0:	78 b9       	out	0x08, r23	; 8
    21d2:	44 0f       	add	r20, r20
    21d4:	00 00       	nop
    21d6:	00 c0       	rjmp	.+0      	; 0x21d8 <loop98+0x10>
    21d8:	00 c0       	rjmp	.+0      	; 0x21da <loop98+0x12>
    21da:	00 c0       	rjmp	.+0      	; 0x21dc <loop98+0x14>
    21dc:	78 b9       	out	0x08, r23	; 8
    21de:	00 c0       	rjmp	.+0      	; 0x21e0 <loop98+0x18>
    21e0:	6a 95       	dec	r22
    21e2:	91 f7       	brne	.-28     	; 0x21c8 <loop98>
	maskhi |=        ws2812_PORTREG;

	sreg_prev=SREG;
	cli();

	while (datlen--) {
    21e4:	21 50       	subi	r18, 0x01	; 1
    21e6:	31 09       	sbc	r19, r1
    21e8:	20 f7       	brcc	.-56     	; 0x21b2 <ws2812_setleds+0x64>
			: "=&d" (ctr)
			: "r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
		);
	}

	SREG=sreg_prev;
    21ea:	1f bf       	out	0x3f, r17	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21ec:	8f ea       	ldi	r24, 0xAF	; 175
    21ee:	94 e0       	ldi	r25, 0x04	; 4
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <loop98+0x28>
    21f4:	00 c0       	rjmp	.+0      	; 0x21f6 <loop98+0x2e>
    21f6:	00 00       	nop
// Setleds for standard RGB
void ws2812_setleds( cRGB_t *ledarray, uint16_t leds, uint8_t pin)
{
	ws2812_setleds_pin(ledarray,leds, _BV(pin));

}
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	1f 91       	pop	r17
    21fe:	08 95       	ret

00002200 <main>:
bool flipFlop= true;

int main(void)
{

	initialize();
    2200:	58 de       	rcall	.-848    	; 0x1eb2 <initialize>

	initCOMs();
    2202:	43 d8       	rcall	.-3962   	; 0x128a <initCOMs>
    2204:	04 e6       	ldi	r16, 0x64	; 100



	setTimerInterval(&checkCANTimer,100);
    2206:	10 e0       	ldi	r17, 0x00	; 0
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	8d ed       	ldi	r24, 0xDD	; 221
    2216:	9b e0       	ldi	r25, 0x0B	; 11
    2218:	b2 d0       	rcall	.+356    	; 0x237e <setTimerInterval>
    221a:	40 e0       	ldi	r20, 0x00	; 0

	SetNeoPixRGB(100,0,0);
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	84 e6       	ldi	r24, 0x64	; 100
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	8b de       	rcall	.-746    	; 0x1f3e <SetNeoPixRGB>

	while(1)
	{

		//updateComs2();
		CommunicationsHandle();
    2228:	c8 d8       	rcall	.-3696   	; 0x13ba <CommunicationsHandle>
    222a:	fe cf       	rjmp	.-4      	; 0x2228 <main+0x28>

0000222c <getSystemStatus>:
    222c:	ef 92       	push	r14
	/* Return true if the required statuses are valid */
	return ((status & _mask) == _mask);
}

uint16_t getSystemStatus()
{
    222e:	ff 92       	push	r15
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	07 e0       	ldi	r16, 0x07	; 7
    223a:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	uint16_t isReady = 0x00;
    223c:	e1 2c       	mov	r14, r1
    223e:	f1 2c       	mov	r15, r1
	/* Looping through all the devices on the CAN bus */
	for(i = 1; i<= GLOBAL_DEVICES+1; i++)
    2240:	c1 e0       	ldi	r28, 0x01	; 1
    2242:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(getGBL_CANFTFlag(getGBL_DEVICE_STATUS(i)))
    2244:	b8 01       	movw	r22, r16
    2246:	81 e3       	ldi	r24, 0x31	; 49
    2248:	96 e0       	ldi	r25, 0x06	; 6
    224a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <getCANFT_Flag>
    224e:	88 23       	and	r24, r24
    2250:	71 f0       	breq	.+28     	; 0x226e <getSystemStatus+0x42>
		{
			/* if there is any device that has a '0' in the first
			   bit of  their status word isReady will become false*/
			isReady |= (getGBL_CANFTdata(getGBL_DEVICE_STATUS(i)) & 0x01) << (i);
    2252:	61 e0       	ldi	r22, 0x01	; 1
    2254:	c8 01       	movw	r24, r16
    2256:	0e 94 d4 05 	call	0xba8	; 0xba8 <getCANFTdatas>
    225a:	81 70       	andi	r24, 0x01	; 1
    225c:	99 27       	eor	r25, r25
    225e:	0c 2e       	mov	r0, r28
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <getSystemStatus+0x3a>
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	0a 94       	dec	r0
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <getSystemStatus+0x36>
    226a:	e8 2a       	or	r14, r24
    226c:	f9 2a       	or	r15, r25
uint16_t getSystemStatus()
{
	int i;
	uint16_t isReady = 0x00;
	/* Looping through all the devices on the CAN bus */
	for(i = 1; i<= GLOBAL_DEVICES+1; i++)
    226e:	21 96       	adiw	r28, 0x01	; 1
    2270:	09 5f       	subi	r16, 0xF9	; 249
    2272:	1f 4f       	sbci	r17, 0xFF	; 255
    2274:	cc 30       	cpi	r28, 0x0C	; 12
    2276:	d1 05       	cpc	r29, r1
    2278:	29 f7       	brne	.-54     	; 0x2244 <getSystemStatus+0x18>
			isReady |= (getGBL_CANFTdata(getGBL_DEVICE_STATUS(i)) & 0x01) << (i);

		}
	}
	return isReady;
}
    227a:	c7 01       	movw	r24, r14
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	1f 91       	pop	r17
    2282:	0f 91       	pop	r16
    2284:	ff 90       	pop	r15
    2286:	ef 90       	pop	r14
    2288:	08 95       	ret

0000228a <isSystemReady>:

uint16_t currentMacro = 0;
uint16_t previousMacro = 0;

bool isSystemReady(uint16_t _mask)
{
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
	/* Make sure the mask only is looking for devices that are actually on the bus */
	_mask &= ((0xFFFF >> 16) - GLOBAL_DEVICES);
    228e:	ec 01       	movw	r28, r24
    2290:	c6 7f       	andi	r28, 0xF6	; 246
	/* Getting the status of all the devices that have sent in a status */
	uint16_t status = getSystemStatus() & ((0xFFFF >> 16) - GLOBAL_DEVICES);
    2292:	cc df       	rcall	.-104    	; 0x222c <getSystemStatus>
	//printf("status: %d\nmask: %d\nResult: %d\n",status,_mask,(status & _mask) == _mask);
	/* Return true if the required statuses are valid */
	return ((status & _mask) == _mask);
    2294:	9e 01       	movw	r18, r28
    2296:	28 23       	and	r18, r24
    2298:	39 23       	and	r19, r25
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	2c 17       	cp	r18, r28
    229e:	3d 07       	cpc	r19, r29
    22a0:	09 f0       	breq	.+2      	; 0x22a4 <isSystemReady+0x1a>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
}
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	08 95       	ret

000022aa <updateMacroCommand>:
	return isReady;
}
// Looks at all the devise on the Global bus and grabs what Macro they are running
// Returns a 16 bit value with '1's in the position that represents the macro number
uint16_t updateMacroCommand()
{
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	c8 e0       	ldi	r28, 0x08	; 8
    22b4:	d0 e0       	ldi	r29, 0x00	; 0
	int rx_macro = 0x0000;
    22b6:	00 e0       	ldi	r16, 0x00	; 0
    22b8:	10 e0       	ldi	r17, 0x00	; 0
	int x;
	// Set the corresponding macro bit to 1 if active for all devices on the GBL bus
	int i;
	for(i = 1; i<= GLOBAL_DEVICES+1; i++)
	{
		if(getGBL_CANFTdata(getGBL_MACRO_INDEX(i))) {
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	ce 01       	movw	r24, r28
    22be:	0e 94 d4 05 	call	0xba8	; 0xba8 <getCANFTdatas>
    22c2:	89 2b       	or	r24, r25
    22c4:	31 f0       	breq	.+12     	; 0x22d2 <updateMacroCommand+0x28>
			rx_macro |= getGBL_CANFTdata(getGBL_MACRO_INDEX(i));
    22c6:	61 e0       	ldi	r22, 0x01	; 1
    22c8:	ce 01       	movw	r24, r28
    22ca:	0e 94 d4 05 	call	0xba8	; 0xba8 <getCANFTdatas>
    22ce:	08 2b       	or	r16, r24
    22d0:	19 2b       	or	r17, r25
    22d2:	27 96       	adiw	r28, 0x07	; 7
{
	int rx_macro = 0x0000;
	int x;
	// Set the corresponding macro bit to 1 if active for all devices on the GBL bus
	int i;
	for(i = 1; i<= GLOBAL_DEVICES+1; i++)
    22d4:	c5 35       	cpi	r28, 0x55	; 85
    22d6:	d1 05       	cpc	r29, r1
    22d8:	81 f7       	brne	.-32     	; 0x22ba <updateMacroCommand+0x10>
	{
		if(getGBL_CANFTdata(getGBL_MACRO_INDEX(i))) {
			rx_macro |= getGBL_CANFTdata(getGBL_MACRO_INDEX(i));
		}
	}
	if(rx_macro != previousMacro)
    22da:	c8 01       	movw	r24, r16
    22dc:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <previousMacro>
    22e0:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <previousMacro+0x1>
    22e4:	02 17       	cp	r16, r18
    22e6:	13 07       	cpc	r17, r19
    22e8:	61 f0       	breq	.+24     	; 0x2302 <updateMacroCommand+0x58>
	{
		previousMacro = currentMacro;
    22ea:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <currentMacro>
    22ee:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <currentMacro+0x1>
    22f2:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <previousMacro+0x1>
    22f6:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <previousMacro>
		currentMacro = rx_macro;
    22fa:	10 93 9d 01 	sts	0x019D, r17	; 0x80019d <currentMacro+0x1>
    22fe:	00 93 9c 01 	sts	0x019C, r16	; 0x80019c <currentMacro>

	}
	return rx_macro;
}
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	08 95       	ret

0000230c <getCurrentMacro>:
uint16_t getCurrentMacro()
{
	updateMacroCommand();
    230c:	ce df       	rcall	.-100    	; 0x22aa <updateMacroCommand>
	return updateMacroCommand();;
    230e:	cd cf       	rjmp	.-102    	; 0x22aa <updateMacroCommand>
    2310:	08 95       	ret

00002312 <getSystemLocData>:
}
    2312:	ef 92       	push	r14
void getSystemLocData()
{
    2314:	ff 92       	push	r15
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
	int x = getGBL_CANFTdata(getGBL_INDEX(MASTER_CONTROLLER,DATA_0));
    231e:	61 e0       	ldi	r22, 0x01	; 1
    2320:	85 e2       	ldi	r24, 0x25	; 37
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 d4 05 	call	0xba8	; 0xba8 <getCANFTdatas>
    2328:	7c 01       	movw	r14, r24
	int y = getGBL_CANFTdata(getGBL_INDEX(MASTER_CONTROLLER,DATA_1));
    232a:	61 e0       	ldi	r22, 0x01	; 1
    232c:	86 e2       	ldi	r24, 0x26	; 38
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 d4 05 	call	0xba8	; 0xba8 <getCANFTdatas>
    2334:	8c 01       	movw	r16, r24
	int h = getGBL_CANFTdata(getGBL_INDEX(MASTER_CONTROLLER,DATA_3));
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	88 e2       	ldi	r24, 0x28	; 40
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 d4 05 	call	0xba8	; 0xba8 <getCANFTdatas>
    2340:	ec 01       	movw	r28, r24
	FT_ToSend(&Control_ft_handle, 10, x);
    2342:	a7 01       	movw	r20, r14
    2344:	6a e0       	ldi	r22, 0x0A	; 10
    2346:	8a e2       	ldi	r24, 0x2A	; 42
    2348:	9b e0       	ldi	r25, 0x0B	; 11
    234a:	96 da       	rcall	.-2772   	; 0x1878 <FT_ToSend>
	FT_ToSend(&Control_ft_handle, 11, y);
    234c:	a8 01       	movw	r20, r16
    234e:	6b e0       	ldi	r22, 0x0B	; 11
    2350:	8a e2       	ldi	r24, 0x2A	; 42
    2352:	9b e0       	ldi	r25, 0x0B	; 11
    2354:	91 da       	rcall	.-2782   	; 0x1878 <FT_ToSend>
	FT_ToSend(&Control_ft_handle, 12, h);
    2356:	ae 01       	movw	r20, r28
    2358:	6c e0       	ldi	r22, 0x0C	; 12
    235a:	8a e2       	ldi	r24, 0x2A	; 42
    235c:	9b e0       	ldi	r25, 0x0B	; 11
    235e:	8c da       	rcall	.-2792   	; 0x1878 <FT_ToSend>
	FT_Send(&Control_ft_handle, CONTROLBOX);
    2360:	61 e0       	ldi	r22, 0x01	; 1
    2362:	8a e2       	ldi	r24, 0x2A	; 42
    2364:	9b e0       	ldi	r25, 0x0B	; 11
    2366:	9e da       	rcall	.-2756   	; 0x18a4 <FT_Send>

    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	08 95       	ret

00002376 <List_Init>:
	

 
	//point head to null
	void List_Init(struct Node** head) {
		*head = NULL;
    2376:	fc 01       	movw	r30, r24
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	10 82       	st	Z, r1
    237c:	08 95       	ret

0000237e <setTimerInterval>:
	}
	else
	{
		return false;
	}
}
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	fc 01       	movw	r30, r24
    2384:	00 83       	st	Z, r16
    2386:	11 83       	std	Z+1, r17	; 0x01
    2388:	22 83       	std	Z+2, r18	; 0x02
    238a:	33 83       	std	Z+3, r19	; 0x03
    238c:	44 83       	std	Z+4, r20	; 0x04
    238e:	55 83       	std	Z+5, r21	; 0x05
    2390:	66 83       	std	Z+6, r22	; 0x06
    2392:	77 83       	std	Z+7, r23	; 0x07
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	08 95       	ret

0000239a <resetTimer>:
    239a:	fc 01       	movw	r30, r24
    239c:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <globalTime>
    23a0:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <globalTime+0x1>
    23a4:	50 91 a0 01 	lds	r21, 0x01A0	; 0x8001a0 <globalTime+0x2>
    23a8:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <globalTime+0x3>
    23ac:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <globalTime+0x4>
    23b0:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <globalTime+0x5>
    23b4:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <globalTime+0x6>
    23b8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <globalTime+0x7>
    23bc:	70 87       	std	Z+8, r23	; 0x08
    23be:	61 87       	std	Z+9, r22	; 0x09
    23c0:	52 87       	std	Z+10, r21	; 0x0a
    23c2:	43 87       	std	Z+11, r20	; 0x0b
    23c4:	34 87       	std	Z+12, r19	; 0x0c
    23c6:	25 87       	std	Z+13, r18	; 0x0d
    23c8:	96 87       	std	Z+14, r25	; 0x0e
    23ca:	87 87       	std	Z+15, r24	; 0x0f
    23cc:	08 95       	ret

000023ce <getTimeElapsed>:
    23ce:	af 92       	push	r10
    23d0:	bf 92       	push	r11
    23d2:	cf 92       	push	r12
    23d4:	df 92       	push	r13
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	fc 01       	movw	r30, r24
    23e0:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <globalTime>
    23e4:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <globalTime+0x1>
    23e8:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <globalTime+0x2>
    23ec:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <globalTime+0x3>
    23f0:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <globalTime+0x4>
    23f4:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <globalTime+0x5>
    23f8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <globalTime+0x6>
    23fc:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <globalTime+0x7>
    2400:	a0 84       	ldd	r10, Z+8	; 0x08
    2402:	b1 84       	ldd	r11, Z+9	; 0x09
    2404:	c2 84       	ldd	r12, Z+10	; 0x0a
    2406:	d3 84       	ldd	r13, Z+11	; 0x0b
    2408:	e4 84       	ldd	r14, Z+12	; 0x0c
    240a:	f5 84       	ldd	r15, Z+13	; 0x0d
    240c:	06 85       	ldd	r16, Z+14	; 0x0e
    240e:	17 85       	ldd	r17, Z+15	; 0x0f
    2410:	26 d1       	rcall	.+588    	; 0x265e <__subdi3>
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	08 95       	ret

00002424 <timerDone>:
    2424:	6f 92       	push	r6
    2426:	7f 92       	push	r7
    2428:	8f 92       	push	r8
    242a:	9f 92       	push	r9
    242c:	af 92       	push	r10
    242e:	bf 92       	push	r11
    2430:	cf 92       	push	r12
    2432:	df 92       	push	r13
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	fc 01       	movw	r30, r24
    2442:	60 90 9e 01 	lds	r6, 0x019E	; 0x80019e <globalTime>
    2446:	70 90 9f 01 	lds	r7, 0x019F	; 0x80019f <globalTime+0x1>
    244a:	80 90 a0 01 	lds	r8, 0x01A0	; 0x8001a0 <globalTime+0x2>
    244e:	90 90 a1 01 	lds	r9, 0x01A1	; 0x8001a1 <globalTime+0x3>
    2452:	d0 91 a2 01 	lds	r29, 0x01A2	; 0x8001a2 <globalTime+0x4>
    2456:	c0 91 a3 01 	lds	r28, 0x01A3	; 0x8001a3 <globalTime+0x5>
    245a:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <globalTime+0x6>
    245e:	a0 91 a5 01 	lds	r26, 0x01A5	; 0x8001a5 <globalTime+0x7>
    2462:	20 85       	ldd	r18, Z+8	; 0x08
    2464:	31 85       	ldd	r19, Z+9	; 0x09
    2466:	42 85       	ldd	r20, Z+10	; 0x0a
    2468:	53 85       	ldd	r21, Z+11	; 0x0b
    246a:	64 85       	ldd	r22, Z+12	; 0x0c
    246c:	75 85       	ldd	r23, Z+13	; 0x0d
    246e:	86 85       	ldd	r24, Z+14	; 0x0e
    2470:	97 85       	ldd	r25, Z+15	; 0x0f
    2472:	a0 80       	ld	r10, Z
    2474:	b1 80       	ldd	r11, Z+1	; 0x01
    2476:	c2 80       	ldd	r12, Z+2	; 0x02
    2478:	d3 80       	ldd	r13, Z+3	; 0x03
    247a:	e4 80       	ldd	r14, Z+4	; 0x04
    247c:	f5 80       	ldd	r15, Z+5	; 0x05
    247e:	06 81       	ldd	r16, Z+6	; 0x06
    2480:	17 81       	ldd	r17, Z+7	; 0x07
    2482:	d8 d0       	rcall	.+432    	; 0x2634 <__adddi3>
    2484:	a2 2e       	mov	r10, r18
    2486:	b3 2e       	mov	r11, r19
    2488:	c4 2e       	mov	r12, r20
    248a:	d5 2e       	mov	r13, r21
    248c:	e6 2e       	mov	r14, r22
    248e:	f7 2e       	mov	r15, r23
    2490:	08 2f       	mov	r16, r24
    2492:	19 2f       	mov	r17, r25
    2494:	26 2d       	mov	r18, r6
    2496:	37 2d       	mov	r19, r7
    2498:	48 2d       	mov	r20, r8
    249a:	59 2d       	mov	r21, r9
    249c:	6d 2f       	mov	r22, r29
    249e:	7c 2f       	mov	r23, r28
    24a0:	8b 2f       	mov	r24, r27
    24a2:	9a 2f       	mov	r25, r26
    24a4:	e5 d0       	rcall	.+458    	; 0x2670 <__cmpdi2>
    24a6:	50 f0       	brcs	.+20     	; 0x24bc <timerDone+0x98>
    24a8:	60 86       	std	Z+8, r6	; 0x08
    24aa:	71 86       	std	Z+9, r7	; 0x09
    24ac:	82 86       	std	Z+10, r8	; 0x0a
    24ae:	93 86       	std	Z+11, r9	; 0x0b
    24b0:	d4 87       	std	Z+12, r29	; 0x0c
    24b2:	c5 87       	std	Z+13, r28	; 0x0d
    24b4:	b6 87       	std	Z+14, r27	; 0x0e
    24b6:	a7 87       	std	Z+15, r26	; 0x0f
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	01 c0       	rjmp	.+2      	; 0x24be <timerDone+0x9a>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	df 90       	pop	r13
    24cc:	cf 90       	pop	r12
    24ce:	bf 90       	pop	r11
    24d0:	af 90       	pop	r10
    24d2:	9f 90       	pop	r9
    24d4:	8f 90       	pop	r8
    24d6:	7f 90       	pop	r7
    24d8:	6f 90       	pop	r6
    24da:	08 95       	ret

000024dc <initTimer0>:
void initTimer0(void)
{
	TCCR0A = PRESCALER;   //Set the prescaler
    24dc:	85 e0       	ldi	r24, 0x05	; 5
    24de:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1<<TOIE0);    //ENABLE Timer Overflow interrupt
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    24e6:	08 95       	ret

000024e8 <__vector_17>:
}

ISR(TIMER0_OVF_vect)
{
    24e8:	1f 92       	push	r1
    24ea:	0f 92       	push	r0
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	0f 92       	push	r0
    24f0:	11 24       	eor	r1, r1
    24f2:	2f 93       	push	r18
    24f4:	3f 93       	push	r19
    24f6:	4f 93       	push	r20
    24f8:	5f 93       	push	r21
    24fa:	6f 93       	push	r22
    24fc:	7f 93       	push	r23
    24fe:	8f 93       	push	r24
    2500:	9f 93       	push	r25
    2502:	af 93       	push	r26
#ifdef PRESCALER1024
	globalTime+=16;
    2504:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <globalTime>
    2508:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <globalTime+0x1>
    250c:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <globalTime+0x2>
    2510:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <globalTime+0x3>
    2514:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <globalTime+0x4>
    2518:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <globalTime+0x5>
    251c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <globalTime+0x6>
    2520:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <globalTime+0x7>
    2524:	a0 e1       	ldi	r26, 0x10	; 16
    2526:	8f d0       	rcall	.+286    	; 0x2646 <__adddi3_s8>
    2528:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <globalTime>
    252c:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <globalTime+0x1>
    2530:	40 93 a0 01 	sts	0x01A0, r20	; 0x8001a0 <globalTime+0x2>
    2534:	50 93 a1 01 	sts	0x01A1, r21	; 0x8001a1 <globalTime+0x3>
    2538:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <globalTime+0x4>
    253c:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <globalTime+0x5>
    2540:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <globalTime+0x6>
    2544:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <globalTime+0x7>
	globalTime+=4;
#elif PRESCALER64
	globalTime++;
#endif

	TIFR0 = (0<<TOV0);  //Reset timer0 overflow interrupt flag
    2548:	15 ba       	out	0x15, r1	; 21
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	7f 91       	pop	r23
    2552:	6f 91       	pop	r22
    2554:	5f 91       	pop	r21
    2556:	4f 91       	pop	r20
    2558:	3f 91       	pop	r19
    255a:	2f 91       	pop	r18
    255c:	0f 90       	pop	r0
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	0f 90       	pop	r0
    2562:	1f 90       	pop	r1
    2564:	18 95       	reti

00002566 <__tablejump2__>:
    2566:	ee 0f       	add	r30, r30
    2568:	ff 1f       	adc	r31, r31
    256a:	00 24       	eor	r0, r0
    256c:	00 1c       	adc	r0, r0
    256e:	0b be       	out	0x3b, r0	; 59
    2570:	07 90       	elpm	r0, Z+
    2572:	f6 91       	elpm	r31, Z
    2574:	e0 2d       	mov	r30, r0
    2576:	09 94       	ijmp

00002578 <__umoddi3>:
    2578:	68 94       	set
    257a:	01 c0       	rjmp	.+2      	; 0x257e <__udivdi3_umoddi3>

0000257c <__udivdi3>:
    257c:	e8 94       	clt

0000257e <__udivdi3_umoddi3>:
    257e:	8f 92       	push	r8
    2580:	9f 92       	push	r9
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	05 d0       	rcall	.+10     	; 0x2592 <__udivmod64>
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	9f 90       	pop	r9
    258e:	8f 90       	pop	r8
    2590:	08 95       	ret

00002592 <__udivmod64>:
    2592:	88 24       	eor	r8, r8
    2594:	99 24       	eor	r9, r9
    2596:	f4 01       	movw	r30, r8
    2598:	e4 01       	movw	r28, r8
    259a:	b0 e4       	ldi	r27, 0x40	; 64
    259c:	9f 93       	push	r25
    259e:	aa 27       	eor	r26, r26
    25a0:	9a 15       	cp	r25, r10
    25a2:	8b 04       	cpc	r8, r11
    25a4:	9c 04       	cpc	r9, r12
    25a6:	ed 05       	cpc	r30, r13
    25a8:	fe 05       	cpc	r31, r14
    25aa:	cf 05       	cpc	r28, r15
    25ac:	d0 07       	cpc	r29, r16
    25ae:	a1 07       	cpc	r26, r17
    25b0:	98 f4       	brcc	.+38     	; 0x25d8 <__udivmod64+0x46>
    25b2:	ad 2f       	mov	r26, r29
    25b4:	dc 2f       	mov	r29, r28
    25b6:	cf 2f       	mov	r28, r31
    25b8:	fe 2f       	mov	r31, r30
    25ba:	e9 2d       	mov	r30, r9
    25bc:	98 2c       	mov	r9, r8
    25be:	89 2e       	mov	r8, r25
    25c0:	98 2f       	mov	r25, r24
    25c2:	87 2f       	mov	r24, r23
    25c4:	76 2f       	mov	r23, r22
    25c6:	65 2f       	mov	r22, r21
    25c8:	54 2f       	mov	r21, r20
    25ca:	43 2f       	mov	r20, r19
    25cc:	32 2f       	mov	r19, r18
    25ce:	22 27       	eor	r18, r18
    25d0:	b8 50       	subi	r27, 0x08	; 8
    25d2:	31 f7       	brne	.-52     	; 0x25a0 <__udivmod64+0xe>
    25d4:	bf 91       	pop	r27
    25d6:	27 c0       	rjmp	.+78     	; 0x2626 <__udivmod64+0x94>
    25d8:	1b 2e       	mov	r1, r27
    25da:	bf 91       	pop	r27
    25dc:	bb 27       	eor	r27, r27
    25de:	22 0f       	add	r18, r18
    25e0:	33 1f       	adc	r19, r19
    25e2:	44 1f       	adc	r20, r20
    25e4:	55 1f       	adc	r21, r21
    25e6:	66 1f       	adc	r22, r22
    25e8:	77 1f       	adc	r23, r23
    25ea:	88 1f       	adc	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	88 1c       	adc	r8, r8
    25f0:	99 1c       	adc	r9, r9
    25f2:	ee 1f       	adc	r30, r30
    25f4:	ff 1f       	adc	r31, r31
    25f6:	cc 1f       	adc	r28, r28
    25f8:	dd 1f       	adc	r29, r29
    25fa:	aa 1f       	adc	r26, r26
    25fc:	bb 1f       	adc	r27, r27
    25fe:	8a 14       	cp	r8, r10
    2600:	9b 04       	cpc	r9, r11
    2602:	ec 05       	cpc	r30, r12
    2604:	fd 05       	cpc	r31, r13
    2606:	ce 05       	cpc	r28, r14
    2608:	df 05       	cpc	r29, r15
    260a:	a0 07       	cpc	r26, r16
    260c:	b1 07       	cpc	r27, r17
    260e:	48 f0       	brcs	.+18     	; 0x2622 <__udivmod64+0x90>
    2610:	8a 18       	sub	r8, r10
    2612:	9b 08       	sbc	r9, r11
    2614:	ec 09       	sbc	r30, r12
    2616:	fd 09       	sbc	r31, r13
    2618:	ce 09       	sbc	r28, r14
    261a:	df 09       	sbc	r29, r15
    261c:	a0 0b       	sbc	r26, r16
    261e:	b1 0b       	sbc	r27, r17
    2620:	21 60       	ori	r18, 0x01	; 1
    2622:	1a 94       	dec	r1
    2624:	e1 f6       	brne	.-72     	; 0x25de <__udivmod64+0x4c>
    2626:	2e f4       	brtc	.+10     	; 0x2632 <__udivmod64+0xa0>
    2628:	94 01       	movw	r18, r8
    262a:	af 01       	movw	r20, r30
    262c:	be 01       	movw	r22, r28
    262e:	cd 01       	movw	r24, r26
    2630:	00 0c       	add	r0, r0
    2632:	08 95       	ret

00002634 <__adddi3>:
    2634:	2a 0d       	add	r18, r10
    2636:	3b 1d       	adc	r19, r11
    2638:	4c 1d       	adc	r20, r12
    263a:	5d 1d       	adc	r21, r13
    263c:	6e 1d       	adc	r22, r14
    263e:	7f 1d       	adc	r23, r15
    2640:	80 1f       	adc	r24, r16
    2642:	91 1f       	adc	r25, r17
    2644:	08 95       	ret

00002646 <__adddi3_s8>:
    2646:	00 24       	eor	r0, r0
    2648:	a7 fd       	sbrc	r26, 7
    264a:	00 94       	com	r0
    264c:	2a 0f       	add	r18, r26
    264e:	30 1d       	adc	r19, r0
    2650:	40 1d       	adc	r20, r0
    2652:	50 1d       	adc	r21, r0
    2654:	60 1d       	adc	r22, r0
    2656:	70 1d       	adc	r23, r0
    2658:	80 1d       	adc	r24, r0
    265a:	90 1d       	adc	r25, r0
    265c:	08 95       	ret

0000265e <__subdi3>:
    265e:	2a 19       	sub	r18, r10
    2660:	3b 09       	sbc	r19, r11
    2662:	4c 09       	sbc	r20, r12
    2664:	5d 09       	sbc	r21, r13
    2666:	6e 09       	sbc	r22, r14
    2668:	7f 09       	sbc	r23, r15
    266a:	80 0b       	sbc	r24, r16
    266c:	91 0b       	sbc	r25, r17
    266e:	08 95       	ret

00002670 <__cmpdi2>:
    2670:	2a 15       	cp	r18, r10
    2672:	3b 05       	cpc	r19, r11
    2674:	4c 05       	cpc	r20, r12
    2676:	5d 05       	cpc	r21, r13
    2678:	6e 05       	cpc	r22, r14
    267a:	7f 05       	cpc	r23, r15
    267c:	80 07       	cpc	r24, r16
    267e:	91 07       	cpc	r25, r17
    2680:	08 95       	ret

00002682 <memcpy>:
    2682:	fb 01       	movw	r30, r22
    2684:	dc 01       	movw	r26, r24
    2686:	02 c0       	rjmp	.+4      	; 0x268c <memcpy+0xa>
    2688:	01 90       	ld	r0, Z+
    268a:	0d 92       	st	X+, r0
    268c:	41 50       	subi	r20, 0x01	; 1
    268e:	50 40       	sbci	r21, 0x00	; 0
    2690:	d8 f7       	brcc	.-10     	; 0x2688 <memcpy+0x6>
    2692:	08 95       	ret

00002694 <printf>:
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	ae 01       	movw	r20, r28
    269e:	4b 5f       	subi	r20, 0xFB	; 251
    26a0:	5f 4f       	sbci	r21, 0xFF	; 255
    26a2:	fa 01       	movw	r30, r20
    26a4:	61 91       	ld	r22, Z+
    26a6:	71 91       	ld	r23, Z+
    26a8:	af 01       	movw	r20, r30
    26aa:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <__iob+0x2>
    26ae:	90 91 37 0c 	lds	r25, 0x0C37	; 0x800c37 <__iob+0x3>
    26b2:	33 d0       	rcall	.+102    	; 0x271a <vfprintf>
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	08 95       	ret

000026ba <puts>:
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
    26c2:	e0 91 36 0c 	lds	r30, 0x0C36	; 0x800c36 <__iob+0x2>
    26c6:	f0 91 37 0c 	lds	r31, 0x0C37	; 0x800c37 <__iob+0x3>
    26ca:	23 81       	ldd	r18, Z+3	; 0x03
    26cc:	21 ff       	sbrs	r18, 1
    26ce:	1b c0       	rjmp	.+54     	; 0x2706 <puts+0x4c>
    26d0:	8c 01       	movw	r16, r24
    26d2:	d0 e0       	ldi	r29, 0x00	; 0
    26d4:	c0 e0       	ldi	r28, 0x00	; 0
    26d6:	f8 01       	movw	r30, r16
    26d8:	81 91       	ld	r24, Z+
    26da:	8f 01       	movw	r16, r30
    26dc:	60 91 36 0c 	lds	r22, 0x0C36	; 0x800c36 <__iob+0x2>
    26e0:	70 91 37 0c 	lds	r23, 0x0C37	; 0x800c37 <__iob+0x3>
    26e4:	db 01       	movw	r26, r22
    26e6:	18 96       	adiw	r26, 0x08	; 8
    26e8:	ed 91       	ld	r30, X+
    26ea:	fc 91       	ld	r31, X
    26ec:	19 97       	sbiw	r26, 0x09	; 9
    26ee:	88 23       	and	r24, r24
    26f0:	31 f0       	breq	.+12     	; 0x26fe <puts+0x44>
    26f2:	09 95       	icall
    26f4:	89 2b       	or	r24, r25
    26f6:	79 f3       	breq	.-34     	; 0x26d6 <puts+0x1c>
    26f8:	df ef       	ldi	r29, 0xFF	; 255
    26fa:	cf ef       	ldi	r28, 0xFF	; 255
    26fc:	ec cf       	rjmp	.-40     	; 0x26d6 <puts+0x1c>
    26fe:	8a e0       	ldi	r24, 0x0A	; 10
    2700:	09 95       	icall
    2702:	89 2b       	or	r24, r25
    2704:	19 f0       	breq	.+6      	; 0x270c <puts+0x52>
    2706:	8f ef       	ldi	r24, 0xFF	; 255
    2708:	9f ef       	ldi	r25, 0xFF	; 255
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <puts+0x56>
    270c:	8d 2f       	mov	r24, r29
    270e:	9c 2f       	mov	r25, r28
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	08 95       	ret

0000271a <vfprintf>:
    271a:	2f 92       	push	r2
    271c:	3f 92       	push	r3
    271e:	4f 92       	push	r4
    2720:	5f 92       	push	r5
    2722:	6f 92       	push	r6
    2724:	7f 92       	push	r7
    2726:	8f 92       	push	r8
    2728:	9f 92       	push	r9
    272a:	af 92       	push	r10
    272c:	bf 92       	push	r11
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	2b 97       	sbiw	r28, 0x0b	; 11
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	6c 01       	movw	r12, r24
    2750:	7b 01       	movw	r14, r22
    2752:	8a 01       	movw	r16, r20
    2754:	fc 01       	movw	r30, r24
    2756:	17 82       	std	Z+7, r1	; 0x07
    2758:	16 82       	std	Z+6, r1	; 0x06
    275a:	83 81       	ldd	r24, Z+3	; 0x03
    275c:	81 ff       	sbrs	r24, 1
    275e:	bf c1       	rjmp	.+894    	; 0x2ade <vfprintf+0x3c4>
    2760:	ce 01       	movw	r24, r28
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	3c 01       	movw	r6, r24
    2766:	f6 01       	movw	r30, r12
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	f7 01       	movw	r30, r14
    276c:	93 fd       	sbrc	r25, 3
    276e:	85 91       	lpm	r24, Z+
    2770:	93 ff       	sbrs	r25, 3
    2772:	81 91       	ld	r24, Z+
    2774:	7f 01       	movw	r14, r30
    2776:	88 23       	and	r24, r24
    2778:	09 f4       	brne	.+2      	; 0x277c <vfprintf+0x62>
    277a:	ad c1       	rjmp	.+858    	; 0x2ad6 <vfprintf+0x3bc>
    277c:	85 32       	cpi	r24, 0x25	; 37
    277e:	39 f4       	brne	.+14     	; 0x278e <vfprintf+0x74>
    2780:	93 fd       	sbrc	r25, 3
    2782:	85 91       	lpm	r24, Z+
    2784:	93 ff       	sbrs	r25, 3
    2786:	81 91       	ld	r24, Z+
    2788:	7f 01       	movw	r14, r30
    278a:	85 32       	cpi	r24, 0x25	; 37
    278c:	21 f4       	brne	.+8      	; 0x2796 <vfprintf+0x7c>
    278e:	b6 01       	movw	r22, r12
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	d6 d1       	rcall	.+940    	; 0x2b40 <fputc>
    2794:	e8 cf       	rjmp	.-48     	; 0x2766 <vfprintf+0x4c>
    2796:	91 2c       	mov	r9, r1
    2798:	21 2c       	mov	r2, r1
    279a:	31 2c       	mov	r3, r1
    279c:	ff e1       	ldi	r31, 0x1F	; 31
    279e:	f3 15       	cp	r31, r3
    27a0:	d8 f0       	brcs	.+54     	; 0x27d8 <vfprintf+0xbe>
    27a2:	8b 32       	cpi	r24, 0x2B	; 43
    27a4:	79 f0       	breq	.+30     	; 0x27c4 <vfprintf+0xaa>
    27a6:	38 f4       	brcc	.+14     	; 0x27b6 <vfprintf+0x9c>
    27a8:	80 32       	cpi	r24, 0x20	; 32
    27aa:	79 f0       	breq	.+30     	; 0x27ca <vfprintf+0xb0>
    27ac:	83 32       	cpi	r24, 0x23	; 35
    27ae:	a1 f4       	brne	.+40     	; 0x27d8 <vfprintf+0xbe>
    27b0:	23 2d       	mov	r18, r3
    27b2:	20 61       	ori	r18, 0x10	; 16
    27b4:	1d c0       	rjmp	.+58     	; 0x27f0 <vfprintf+0xd6>
    27b6:	8d 32       	cpi	r24, 0x2D	; 45
    27b8:	61 f0       	breq	.+24     	; 0x27d2 <vfprintf+0xb8>
    27ba:	80 33       	cpi	r24, 0x30	; 48
    27bc:	69 f4       	brne	.+26     	; 0x27d8 <vfprintf+0xbe>
    27be:	23 2d       	mov	r18, r3
    27c0:	21 60       	ori	r18, 0x01	; 1
    27c2:	16 c0       	rjmp	.+44     	; 0x27f0 <vfprintf+0xd6>
    27c4:	83 2d       	mov	r24, r3
    27c6:	82 60       	ori	r24, 0x02	; 2
    27c8:	38 2e       	mov	r3, r24
    27ca:	e3 2d       	mov	r30, r3
    27cc:	e4 60       	ori	r30, 0x04	; 4
    27ce:	3e 2e       	mov	r3, r30
    27d0:	2a c0       	rjmp	.+84     	; 0x2826 <vfprintf+0x10c>
    27d2:	f3 2d       	mov	r31, r3
    27d4:	f8 60       	ori	r31, 0x08	; 8
    27d6:	1d c0       	rjmp	.+58     	; 0x2812 <vfprintf+0xf8>
    27d8:	37 fc       	sbrc	r3, 7
    27da:	2d c0       	rjmp	.+90     	; 0x2836 <vfprintf+0x11c>
    27dc:	20 ed       	ldi	r18, 0xD0	; 208
    27de:	28 0f       	add	r18, r24
    27e0:	2a 30       	cpi	r18, 0x0A	; 10
    27e2:	40 f0       	brcs	.+16     	; 0x27f4 <vfprintf+0xda>
    27e4:	8e 32       	cpi	r24, 0x2E	; 46
    27e6:	b9 f4       	brne	.+46     	; 0x2816 <vfprintf+0xfc>
    27e8:	36 fc       	sbrc	r3, 6
    27ea:	75 c1       	rjmp	.+746    	; 0x2ad6 <vfprintf+0x3bc>
    27ec:	23 2d       	mov	r18, r3
    27ee:	20 64       	ori	r18, 0x40	; 64
    27f0:	32 2e       	mov	r3, r18
    27f2:	19 c0       	rjmp	.+50     	; 0x2826 <vfprintf+0x10c>
    27f4:	36 fe       	sbrs	r3, 6
    27f6:	06 c0       	rjmp	.+12     	; 0x2804 <vfprintf+0xea>
    27f8:	8a e0       	ldi	r24, 0x0A	; 10
    27fa:	98 9e       	mul	r9, r24
    27fc:	20 0d       	add	r18, r0
    27fe:	11 24       	eor	r1, r1
    2800:	92 2e       	mov	r9, r18
    2802:	11 c0       	rjmp	.+34     	; 0x2826 <vfprintf+0x10c>
    2804:	ea e0       	ldi	r30, 0x0A	; 10
    2806:	2e 9e       	mul	r2, r30
    2808:	20 0d       	add	r18, r0
    280a:	11 24       	eor	r1, r1
    280c:	22 2e       	mov	r2, r18
    280e:	f3 2d       	mov	r31, r3
    2810:	f0 62       	ori	r31, 0x20	; 32
    2812:	3f 2e       	mov	r3, r31
    2814:	08 c0       	rjmp	.+16     	; 0x2826 <vfprintf+0x10c>
    2816:	8c 36       	cpi	r24, 0x6C	; 108
    2818:	21 f4       	brne	.+8      	; 0x2822 <vfprintf+0x108>
    281a:	83 2d       	mov	r24, r3
    281c:	80 68       	ori	r24, 0x80	; 128
    281e:	38 2e       	mov	r3, r24
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <vfprintf+0x10c>
    2822:	88 36       	cpi	r24, 0x68	; 104
    2824:	41 f4       	brne	.+16     	; 0x2836 <vfprintf+0x11c>
    2826:	f7 01       	movw	r30, r14
    2828:	93 fd       	sbrc	r25, 3
    282a:	85 91       	lpm	r24, Z+
    282c:	93 ff       	sbrs	r25, 3
    282e:	81 91       	ld	r24, Z+
    2830:	7f 01       	movw	r14, r30
    2832:	81 11       	cpse	r24, r1
    2834:	b3 cf       	rjmp	.-154    	; 0x279c <vfprintf+0x82>
    2836:	98 2f       	mov	r25, r24
    2838:	9f 7d       	andi	r25, 0xDF	; 223
    283a:	95 54       	subi	r25, 0x45	; 69
    283c:	93 30       	cpi	r25, 0x03	; 3
    283e:	28 f4       	brcc	.+10     	; 0x284a <vfprintf+0x130>
    2840:	0c 5f       	subi	r16, 0xFC	; 252
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	9f e3       	ldi	r25, 0x3F	; 63
    2846:	99 83       	std	Y+1, r25	; 0x01
    2848:	0d c0       	rjmp	.+26     	; 0x2864 <vfprintf+0x14a>
    284a:	83 36       	cpi	r24, 0x63	; 99
    284c:	31 f0       	breq	.+12     	; 0x285a <vfprintf+0x140>
    284e:	83 37       	cpi	r24, 0x73	; 115
    2850:	71 f0       	breq	.+28     	; 0x286e <vfprintf+0x154>
    2852:	83 35       	cpi	r24, 0x53	; 83
    2854:	09 f0       	breq	.+2      	; 0x2858 <vfprintf+0x13e>
    2856:	55 c0       	rjmp	.+170    	; 0x2902 <vfprintf+0x1e8>
    2858:	20 c0       	rjmp	.+64     	; 0x289a <vfprintf+0x180>
    285a:	f8 01       	movw	r30, r16
    285c:	80 81       	ld	r24, Z
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	0e 5f       	subi	r16, 0xFE	; 254
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	88 24       	eor	r8, r8
    2866:	83 94       	inc	r8
    2868:	91 2c       	mov	r9, r1
    286a:	53 01       	movw	r10, r6
    286c:	12 c0       	rjmp	.+36     	; 0x2892 <vfprintf+0x178>
    286e:	28 01       	movw	r4, r16
    2870:	f2 e0       	ldi	r31, 0x02	; 2
    2872:	4f 0e       	add	r4, r31
    2874:	51 1c       	adc	r5, r1
    2876:	f8 01       	movw	r30, r16
    2878:	a0 80       	ld	r10, Z
    287a:	b1 80       	ldd	r11, Z+1	; 0x01
    287c:	36 fe       	sbrs	r3, 6
    287e:	03 c0       	rjmp	.+6      	; 0x2886 <vfprintf+0x16c>
    2880:	69 2d       	mov	r22, r9
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	02 c0       	rjmp	.+4      	; 0x288a <vfprintf+0x170>
    2886:	6f ef       	ldi	r22, 0xFF	; 255
    2888:	7f ef       	ldi	r23, 0xFF	; 255
    288a:	c5 01       	movw	r24, r10
    288c:	4e d1       	rcall	.+668    	; 0x2b2a <strnlen>
    288e:	4c 01       	movw	r8, r24
    2890:	82 01       	movw	r16, r4
    2892:	f3 2d       	mov	r31, r3
    2894:	ff 77       	andi	r31, 0x7F	; 127
    2896:	3f 2e       	mov	r3, r31
    2898:	15 c0       	rjmp	.+42     	; 0x28c4 <vfprintf+0x1aa>
    289a:	28 01       	movw	r4, r16
    289c:	22 e0       	ldi	r18, 0x02	; 2
    289e:	42 0e       	add	r4, r18
    28a0:	51 1c       	adc	r5, r1
    28a2:	f8 01       	movw	r30, r16
    28a4:	a0 80       	ld	r10, Z
    28a6:	b1 80       	ldd	r11, Z+1	; 0x01
    28a8:	36 fe       	sbrs	r3, 6
    28aa:	03 c0       	rjmp	.+6      	; 0x28b2 <vfprintf+0x198>
    28ac:	69 2d       	mov	r22, r9
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <vfprintf+0x19c>
    28b2:	6f ef       	ldi	r22, 0xFF	; 255
    28b4:	7f ef       	ldi	r23, 0xFF	; 255
    28b6:	c5 01       	movw	r24, r10
    28b8:	2d d1       	rcall	.+602    	; 0x2b14 <strnlen_P>
    28ba:	4c 01       	movw	r8, r24
    28bc:	f3 2d       	mov	r31, r3
    28be:	f0 68       	ori	r31, 0x80	; 128
    28c0:	3f 2e       	mov	r3, r31
    28c2:	82 01       	movw	r16, r4
    28c4:	33 fc       	sbrc	r3, 3
    28c6:	19 c0       	rjmp	.+50     	; 0x28fa <vfprintf+0x1e0>
    28c8:	82 2d       	mov	r24, r2
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	88 16       	cp	r8, r24
    28ce:	99 06       	cpc	r9, r25
    28d0:	a0 f4       	brcc	.+40     	; 0x28fa <vfprintf+0x1e0>
    28d2:	b6 01       	movw	r22, r12
    28d4:	80 e2       	ldi	r24, 0x20	; 32
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	33 d1       	rcall	.+614    	; 0x2b40 <fputc>
    28da:	2a 94       	dec	r2
    28dc:	f5 cf       	rjmp	.-22     	; 0x28c8 <vfprintf+0x1ae>
    28de:	f5 01       	movw	r30, r10
    28e0:	37 fc       	sbrc	r3, 7
    28e2:	85 91       	lpm	r24, Z+
    28e4:	37 fe       	sbrs	r3, 7
    28e6:	81 91       	ld	r24, Z+
    28e8:	5f 01       	movw	r10, r30
    28ea:	b6 01       	movw	r22, r12
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	28 d1       	rcall	.+592    	; 0x2b40 <fputc>
    28f0:	21 10       	cpse	r2, r1
    28f2:	2a 94       	dec	r2
    28f4:	21 e0       	ldi	r18, 0x01	; 1
    28f6:	82 1a       	sub	r8, r18
    28f8:	91 08       	sbc	r9, r1
    28fa:	81 14       	cp	r8, r1
    28fc:	91 04       	cpc	r9, r1
    28fe:	79 f7       	brne	.-34     	; 0x28de <vfprintf+0x1c4>
    2900:	e1 c0       	rjmp	.+450    	; 0x2ac4 <vfprintf+0x3aa>
    2902:	84 36       	cpi	r24, 0x64	; 100
    2904:	11 f0       	breq	.+4      	; 0x290a <vfprintf+0x1f0>
    2906:	89 36       	cpi	r24, 0x69	; 105
    2908:	39 f5       	brne	.+78     	; 0x2958 <vfprintf+0x23e>
    290a:	f8 01       	movw	r30, r16
    290c:	37 fe       	sbrs	r3, 7
    290e:	07 c0       	rjmp	.+14     	; 0x291e <vfprintf+0x204>
    2910:	60 81       	ld	r22, Z
    2912:	71 81       	ldd	r23, Z+1	; 0x01
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	0c 5f       	subi	r16, 0xFC	; 252
    291a:	1f 4f       	sbci	r17, 0xFF	; 255
    291c:	08 c0       	rjmp	.+16     	; 0x292e <vfprintf+0x214>
    291e:	60 81       	ld	r22, Z
    2920:	71 81       	ldd	r23, Z+1	; 0x01
    2922:	07 2e       	mov	r0, r23
    2924:	00 0c       	add	r0, r0
    2926:	88 0b       	sbc	r24, r24
    2928:	99 0b       	sbc	r25, r25
    292a:	0e 5f       	subi	r16, 0xFE	; 254
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	f3 2d       	mov	r31, r3
    2930:	ff 76       	andi	r31, 0x6F	; 111
    2932:	3f 2e       	mov	r3, r31
    2934:	97 ff       	sbrs	r25, 7
    2936:	09 c0       	rjmp	.+18     	; 0x294a <vfprintf+0x230>
    2938:	90 95       	com	r25
    293a:	80 95       	com	r24
    293c:	70 95       	com	r23
    293e:	61 95       	neg	r22
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	8f 4f       	sbci	r24, 0xFF	; 255
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	f0 68       	ori	r31, 0x80	; 128
    2948:	3f 2e       	mov	r3, r31
    294a:	2a e0       	ldi	r18, 0x0A	; 10
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	a3 01       	movw	r20, r6
    2950:	33 d1       	rcall	.+614    	; 0x2bb8 <__ultoa_invert>
    2952:	88 2e       	mov	r8, r24
    2954:	86 18       	sub	r8, r6
    2956:	44 c0       	rjmp	.+136    	; 0x29e0 <vfprintf+0x2c6>
    2958:	85 37       	cpi	r24, 0x75	; 117
    295a:	31 f4       	brne	.+12     	; 0x2968 <vfprintf+0x24e>
    295c:	23 2d       	mov	r18, r3
    295e:	2f 7e       	andi	r18, 0xEF	; 239
    2960:	b2 2e       	mov	r11, r18
    2962:	2a e0       	ldi	r18, 0x0A	; 10
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	25 c0       	rjmp	.+74     	; 0x29b2 <vfprintf+0x298>
    2968:	93 2d       	mov	r25, r3
    296a:	99 7f       	andi	r25, 0xF9	; 249
    296c:	b9 2e       	mov	r11, r25
    296e:	8f 36       	cpi	r24, 0x6F	; 111
    2970:	c1 f0       	breq	.+48     	; 0x29a2 <vfprintf+0x288>
    2972:	18 f4       	brcc	.+6      	; 0x297a <vfprintf+0x260>
    2974:	88 35       	cpi	r24, 0x58	; 88
    2976:	79 f0       	breq	.+30     	; 0x2996 <vfprintf+0x27c>
    2978:	ae c0       	rjmp	.+348    	; 0x2ad6 <vfprintf+0x3bc>
    297a:	80 37       	cpi	r24, 0x70	; 112
    297c:	19 f0       	breq	.+6      	; 0x2984 <vfprintf+0x26a>
    297e:	88 37       	cpi	r24, 0x78	; 120
    2980:	21 f0       	breq	.+8      	; 0x298a <vfprintf+0x270>
    2982:	a9 c0       	rjmp	.+338    	; 0x2ad6 <vfprintf+0x3bc>
    2984:	e9 2f       	mov	r30, r25
    2986:	e0 61       	ori	r30, 0x10	; 16
    2988:	be 2e       	mov	r11, r30
    298a:	b4 fe       	sbrs	r11, 4
    298c:	0d c0       	rjmp	.+26     	; 0x29a8 <vfprintf+0x28e>
    298e:	fb 2d       	mov	r31, r11
    2990:	f4 60       	ori	r31, 0x04	; 4
    2992:	bf 2e       	mov	r11, r31
    2994:	09 c0       	rjmp	.+18     	; 0x29a8 <vfprintf+0x28e>
    2996:	34 fe       	sbrs	r3, 4
    2998:	0a c0       	rjmp	.+20     	; 0x29ae <vfprintf+0x294>
    299a:	29 2f       	mov	r18, r25
    299c:	26 60       	ori	r18, 0x06	; 6
    299e:	b2 2e       	mov	r11, r18
    29a0:	06 c0       	rjmp	.+12     	; 0x29ae <vfprintf+0x294>
    29a2:	28 e0       	ldi	r18, 0x08	; 8
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	05 c0       	rjmp	.+10     	; 0x29b2 <vfprintf+0x298>
    29a8:	20 e1       	ldi	r18, 0x10	; 16
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	02 c0       	rjmp	.+4      	; 0x29b2 <vfprintf+0x298>
    29ae:	20 e1       	ldi	r18, 0x10	; 16
    29b0:	32 e0       	ldi	r19, 0x02	; 2
    29b2:	f8 01       	movw	r30, r16
    29b4:	b7 fe       	sbrs	r11, 7
    29b6:	07 c0       	rjmp	.+14     	; 0x29c6 <vfprintf+0x2ac>
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	0c 5f       	subi	r16, 0xFC	; 252
    29c2:	1f 4f       	sbci	r17, 0xFF	; 255
    29c4:	06 c0       	rjmp	.+12     	; 0x29d2 <vfprintf+0x2b8>
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 5f       	subi	r16, 0xFE	; 254
    29d0:	1f 4f       	sbci	r17, 0xFF	; 255
    29d2:	a3 01       	movw	r20, r6
    29d4:	f1 d0       	rcall	.+482    	; 0x2bb8 <__ultoa_invert>
    29d6:	88 2e       	mov	r8, r24
    29d8:	86 18       	sub	r8, r6
    29da:	fb 2d       	mov	r31, r11
    29dc:	ff 77       	andi	r31, 0x7F	; 127
    29de:	3f 2e       	mov	r3, r31
    29e0:	36 fe       	sbrs	r3, 6
    29e2:	0d c0       	rjmp	.+26     	; 0x29fe <vfprintf+0x2e4>
    29e4:	23 2d       	mov	r18, r3
    29e6:	2e 7f       	andi	r18, 0xFE	; 254
    29e8:	a2 2e       	mov	r10, r18
    29ea:	89 14       	cp	r8, r9
    29ec:	58 f4       	brcc	.+22     	; 0x2a04 <vfprintf+0x2ea>
    29ee:	34 fe       	sbrs	r3, 4
    29f0:	0b c0       	rjmp	.+22     	; 0x2a08 <vfprintf+0x2ee>
    29f2:	32 fc       	sbrc	r3, 2
    29f4:	09 c0       	rjmp	.+18     	; 0x2a08 <vfprintf+0x2ee>
    29f6:	83 2d       	mov	r24, r3
    29f8:	8e 7e       	andi	r24, 0xEE	; 238
    29fa:	a8 2e       	mov	r10, r24
    29fc:	05 c0       	rjmp	.+10     	; 0x2a08 <vfprintf+0x2ee>
    29fe:	b8 2c       	mov	r11, r8
    2a00:	a3 2c       	mov	r10, r3
    2a02:	03 c0       	rjmp	.+6      	; 0x2a0a <vfprintf+0x2f0>
    2a04:	b8 2c       	mov	r11, r8
    2a06:	01 c0       	rjmp	.+2      	; 0x2a0a <vfprintf+0x2f0>
    2a08:	b9 2c       	mov	r11, r9
    2a0a:	a4 fe       	sbrs	r10, 4
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <vfprintf+0x312>
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e8 0d       	add	r30, r8
    2a12:	f1 1d       	adc	r31, r1
    2a14:	80 81       	ld	r24, Z
    2a16:	80 33       	cpi	r24, 0x30	; 48
    2a18:	21 f4       	brne	.+8      	; 0x2a22 <vfprintf+0x308>
    2a1a:	9a 2d       	mov	r25, r10
    2a1c:	99 7e       	andi	r25, 0xE9	; 233
    2a1e:	a9 2e       	mov	r10, r25
    2a20:	09 c0       	rjmp	.+18     	; 0x2a34 <vfprintf+0x31a>
    2a22:	a2 fe       	sbrs	r10, 2
    2a24:	06 c0       	rjmp	.+12     	; 0x2a32 <vfprintf+0x318>
    2a26:	b3 94       	inc	r11
    2a28:	b3 94       	inc	r11
    2a2a:	04 c0       	rjmp	.+8      	; 0x2a34 <vfprintf+0x31a>
    2a2c:	8a 2d       	mov	r24, r10
    2a2e:	86 78       	andi	r24, 0x86	; 134
    2a30:	09 f0       	breq	.+2      	; 0x2a34 <vfprintf+0x31a>
    2a32:	b3 94       	inc	r11
    2a34:	a3 fc       	sbrc	r10, 3
    2a36:	10 c0       	rjmp	.+32     	; 0x2a58 <vfprintf+0x33e>
    2a38:	a0 fe       	sbrs	r10, 0
    2a3a:	06 c0       	rjmp	.+12     	; 0x2a48 <vfprintf+0x32e>
    2a3c:	b2 14       	cp	r11, r2
    2a3e:	80 f4       	brcc	.+32     	; 0x2a60 <vfprintf+0x346>
    2a40:	28 0c       	add	r2, r8
    2a42:	92 2c       	mov	r9, r2
    2a44:	9b 18       	sub	r9, r11
    2a46:	0d c0       	rjmp	.+26     	; 0x2a62 <vfprintf+0x348>
    2a48:	b2 14       	cp	r11, r2
    2a4a:	58 f4       	brcc	.+22     	; 0x2a62 <vfprintf+0x348>
    2a4c:	b6 01       	movw	r22, r12
    2a4e:	80 e2       	ldi	r24, 0x20	; 32
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	76 d0       	rcall	.+236    	; 0x2b40 <fputc>
    2a54:	b3 94       	inc	r11
    2a56:	f8 cf       	rjmp	.-16     	; 0x2a48 <vfprintf+0x32e>
    2a58:	b2 14       	cp	r11, r2
    2a5a:	18 f4       	brcc	.+6      	; 0x2a62 <vfprintf+0x348>
    2a5c:	2b 18       	sub	r2, r11
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <vfprintf+0x34a>
    2a60:	98 2c       	mov	r9, r8
    2a62:	21 2c       	mov	r2, r1
    2a64:	a4 fe       	sbrs	r10, 4
    2a66:	0f c0       	rjmp	.+30     	; 0x2a86 <vfprintf+0x36c>
    2a68:	b6 01       	movw	r22, r12
    2a6a:	80 e3       	ldi	r24, 0x30	; 48
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	68 d0       	rcall	.+208    	; 0x2b40 <fputc>
    2a70:	a2 fe       	sbrs	r10, 2
    2a72:	16 c0       	rjmp	.+44     	; 0x2aa0 <vfprintf+0x386>
    2a74:	a1 fc       	sbrc	r10, 1
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <vfprintf+0x364>
    2a78:	88 e7       	ldi	r24, 0x78	; 120
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <vfprintf+0x368>
    2a7e:	88 e5       	ldi	r24, 0x58	; 88
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	b6 01       	movw	r22, r12
    2a84:	0c c0       	rjmp	.+24     	; 0x2a9e <vfprintf+0x384>
    2a86:	8a 2d       	mov	r24, r10
    2a88:	86 78       	andi	r24, 0x86	; 134
    2a8a:	51 f0       	breq	.+20     	; 0x2aa0 <vfprintf+0x386>
    2a8c:	a1 fe       	sbrs	r10, 1
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <vfprintf+0x37a>
    2a90:	8b e2       	ldi	r24, 0x2B	; 43
    2a92:	01 c0       	rjmp	.+2      	; 0x2a96 <vfprintf+0x37c>
    2a94:	80 e2       	ldi	r24, 0x20	; 32
    2a96:	a7 fc       	sbrc	r10, 7
    2a98:	8d e2       	ldi	r24, 0x2D	; 45
    2a9a:	b6 01       	movw	r22, r12
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	50 d0       	rcall	.+160    	; 0x2b40 <fputc>
    2aa0:	89 14       	cp	r8, r9
    2aa2:	30 f4       	brcc	.+12     	; 0x2ab0 <vfprintf+0x396>
    2aa4:	b6 01       	movw	r22, r12
    2aa6:	80 e3       	ldi	r24, 0x30	; 48
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	4a d0       	rcall	.+148    	; 0x2b40 <fputc>
    2aac:	9a 94       	dec	r9
    2aae:	f8 cf       	rjmp	.-16     	; 0x2aa0 <vfprintf+0x386>
    2ab0:	8a 94       	dec	r8
    2ab2:	f3 01       	movw	r30, r6
    2ab4:	e8 0d       	add	r30, r8
    2ab6:	f1 1d       	adc	r31, r1
    2ab8:	80 81       	ld	r24, Z
    2aba:	b6 01       	movw	r22, r12
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	40 d0       	rcall	.+128    	; 0x2b40 <fputc>
    2ac0:	81 10       	cpse	r8, r1
    2ac2:	f6 cf       	rjmp	.-20     	; 0x2ab0 <vfprintf+0x396>
    2ac4:	22 20       	and	r2, r2
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <vfprintf+0x3b0>
    2ac8:	4e ce       	rjmp	.-868    	; 0x2766 <vfprintf+0x4c>
    2aca:	b6 01       	movw	r22, r12
    2acc:	80 e2       	ldi	r24, 0x20	; 32
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	37 d0       	rcall	.+110    	; 0x2b40 <fputc>
    2ad2:	2a 94       	dec	r2
    2ad4:	f7 cf       	rjmp	.-18     	; 0x2ac4 <vfprintf+0x3aa>
    2ad6:	f6 01       	movw	r30, r12
    2ad8:	86 81       	ldd	r24, Z+6	; 0x06
    2ada:	97 81       	ldd	r25, Z+7	; 0x07
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <vfprintf+0x3c8>
    2ade:	8f ef       	ldi	r24, 0xFF	; 255
    2ae0:	9f ef       	ldi	r25, 0xFF	; 255
    2ae2:	2b 96       	adiw	r28, 0x0b	; 11
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	ff 90       	pop	r15
    2af8:	ef 90       	pop	r14
    2afa:	df 90       	pop	r13
    2afc:	cf 90       	pop	r12
    2afe:	bf 90       	pop	r11
    2b00:	af 90       	pop	r10
    2b02:	9f 90       	pop	r9
    2b04:	8f 90       	pop	r8
    2b06:	7f 90       	pop	r7
    2b08:	6f 90       	pop	r6
    2b0a:	5f 90       	pop	r5
    2b0c:	4f 90       	pop	r4
    2b0e:	3f 90       	pop	r3
    2b10:	2f 90       	pop	r2
    2b12:	08 95       	ret

00002b14 <strnlen_P>:
    2b14:	fc 01       	movw	r30, r24
    2b16:	05 90       	lpm	r0, Z+
    2b18:	61 50       	subi	r22, 0x01	; 1
    2b1a:	70 40       	sbci	r23, 0x00	; 0
    2b1c:	01 10       	cpse	r0, r1
    2b1e:	d8 f7       	brcc	.-10     	; 0x2b16 <strnlen_P+0x2>
    2b20:	80 95       	com	r24
    2b22:	90 95       	com	r25
    2b24:	8e 0f       	add	r24, r30
    2b26:	9f 1f       	adc	r25, r31
    2b28:	08 95       	ret

00002b2a <strnlen>:
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	61 50       	subi	r22, 0x01	; 1
    2b2e:	70 40       	sbci	r23, 0x00	; 0
    2b30:	01 90       	ld	r0, Z+
    2b32:	01 10       	cpse	r0, r1
    2b34:	d8 f7       	brcc	.-10     	; 0x2b2c <strnlen+0x2>
    2b36:	80 95       	com	r24
    2b38:	90 95       	com	r25
    2b3a:	8e 0f       	add	r24, r30
    2b3c:	9f 1f       	adc	r25, r31
    2b3e:	08 95       	ret

00002b40 <fputc>:
    2b40:	0f 93       	push	r16
    2b42:	1f 93       	push	r17
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	fb 01       	movw	r30, r22
    2b4a:	23 81       	ldd	r18, Z+3	; 0x03
    2b4c:	21 fd       	sbrc	r18, 1
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <fputc+0x16>
    2b50:	8f ef       	ldi	r24, 0xFF	; 255
    2b52:	9f ef       	ldi	r25, 0xFF	; 255
    2b54:	2c c0       	rjmp	.+88     	; 0x2bae <fputc+0x6e>
    2b56:	22 ff       	sbrs	r18, 2
    2b58:	16 c0       	rjmp	.+44     	; 0x2b86 <fputc+0x46>
    2b5a:	46 81       	ldd	r20, Z+6	; 0x06
    2b5c:	57 81       	ldd	r21, Z+7	; 0x07
    2b5e:	24 81       	ldd	r18, Z+4	; 0x04
    2b60:	35 81       	ldd	r19, Z+5	; 0x05
    2b62:	42 17       	cp	r20, r18
    2b64:	53 07       	cpc	r21, r19
    2b66:	44 f4       	brge	.+16     	; 0x2b78 <fputc+0x38>
    2b68:	a0 81       	ld	r26, Z
    2b6a:	b1 81       	ldd	r27, Z+1	; 0x01
    2b6c:	9d 01       	movw	r18, r26
    2b6e:	2f 5f       	subi	r18, 0xFF	; 255
    2b70:	3f 4f       	sbci	r19, 0xFF	; 255
    2b72:	31 83       	std	Z+1, r19	; 0x01
    2b74:	20 83       	st	Z, r18
    2b76:	8c 93       	st	X, r24
    2b78:	26 81       	ldd	r18, Z+6	; 0x06
    2b7a:	37 81       	ldd	r19, Z+7	; 0x07
    2b7c:	2f 5f       	subi	r18, 0xFF	; 255
    2b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b80:	37 83       	std	Z+7, r19	; 0x07
    2b82:	26 83       	std	Z+6, r18	; 0x06
    2b84:	14 c0       	rjmp	.+40     	; 0x2bae <fputc+0x6e>
    2b86:	8b 01       	movw	r16, r22
    2b88:	ec 01       	movw	r28, r24
    2b8a:	fb 01       	movw	r30, r22
    2b8c:	00 84       	ldd	r0, Z+8	; 0x08
    2b8e:	f1 85       	ldd	r31, Z+9	; 0x09
    2b90:	e0 2d       	mov	r30, r0
    2b92:	09 95       	icall
    2b94:	89 2b       	or	r24, r25
    2b96:	e1 f6       	brne	.-72     	; 0x2b50 <fputc+0x10>
    2b98:	d8 01       	movw	r26, r16
    2b9a:	16 96       	adiw	r26, 0x06	; 6
    2b9c:	8d 91       	ld	r24, X+
    2b9e:	9c 91       	ld	r25, X
    2ba0:	17 97       	sbiw	r26, 0x07	; 7
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	17 96       	adiw	r26, 0x07	; 7
    2ba6:	9c 93       	st	X, r25
    2ba8:	8e 93       	st	-X, r24
    2baa:	16 97       	sbiw	r26, 0x06	; 6
    2bac:	ce 01       	movw	r24, r28
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	08 95       	ret

00002bb8 <__ultoa_invert>:
    2bb8:	fa 01       	movw	r30, r20
    2bba:	aa 27       	eor	r26, r26
    2bbc:	28 30       	cpi	r18, 0x08	; 8
    2bbe:	51 f1       	breq	.+84     	; 0x2c14 <__ultoa_invert+0x5c>
    2bc0:	20 31       	cpi	r18, 0x10	; 16
    2bc2:	81 f1       	breq	.+96     	; 0x2c24 <__ultoa_invert+0x6c>
    2bc4:	e8 94       	clt
    2bc6:	6f 93       	push	r22
    2bc8:	6e 7f       	andi	r22, 0xFE	; 254
    2bca:	6e 5f       	subi	r22, 0xFE	; 254
    2bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bce:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd2:	af 4f       	sbci	r26, 0xFF	; 255
    2bd4:	b1 e0       	ldi	r27, 0x01	; 1
    2bd6:	3e d0       	rcall	.+124    	; 0x2c54 <__ultoa_invert+0x9c>
    2bd8:	b4 e0       	ldi	r27, 0x04	; 4
    2bda:	3c d0       	rcall	.+120    	; 0x2c54 <__ultoa_invert+0x9c>
    2bdc:	67 0f       	add	r22, r23
    2bde:	78 1f       	adc	r23, r24
    2be0:	89 1f       	adc	r24, r25
    2be2:	9a 1f       	adc	r25, r26
    2be4:	a1 1d       	adc	r26, r1
    2be6:	68 0f       	add	r22, r24
    2be8:	79 1f       	adc	r23, r25
    2bea:	8a 1f       	adc	r24, r26
    2bec:	91 1d       	adc	r25, r1
    2bee:	a1 1d       	adc	r26, r1
    2bf0:	6a 0f       	add	r22, r26
    2bf2:	71 1d       	adc	r23, r1
    2bf4:	81 1d       	adc	r24, r1
    2bf6:	91 1d       	adc	r25, r1
    2bf8:	a1 1d       	adc	r26, r1
    2bfa:	20 d0       	rcall	.+64     	; 0x2c3c <__ultoa_invert+0x84>
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <__ultoa_invert+0x48>
    2bfe:	68 94       	set
    2c00:	3f 91       	pop	r19
    2c02:	2a e0       	ldi	r18, 0x0A	; 10
    2c04:	26 9f       	mul	r18, r22
    2c06:	11 24       	eor	r1, r1
    2c08:	30 19       	sub	r19, r0
    2c0a:	30 5d       	subi	r19, 0xD0	; 208
    2c0c:	31 93       	st	Z+, r19
    2c0e:	de f6       	brtc	.-74     	; 0x2bc6 <__ultoa_invert+0xe>
    2c10:	cf 01       	movw	r24, r30
    2c12:	08 95       	ret
    2c14:	46 2f       	mov	r20, r22
    2c16:	47 70       	andi	r20, 0x07	; 7
    2c18:	40 5d       	subi	r20, 0xD0	; 208
    2c1a:	41 93       	st	Z+, r20
    2c1c:	b3 e0       	ldi	r27, 0x03	; 3
    2c1e:	0f d0       	rcall	.+30     	; 0x2c3e <__ultoa_invert+0x86>
    2c20:	c9 f7       	brne	.-14     	; 0x2c14 <__ultoa_invert+0x5c>
    2c22:	f6 cf       	rjmp	.-20     	; 0x2c10 <__ultoa_invert+0x58>
    2c24:	46 2f       	mov	r20, r22
    2c26:	4f 70       	andi	r20, 0x0F	; 15
    2c28:	40 5d       	subi	r20, 0xD0	; 208
    2c2a:	4a 33       	cpi	r20, 0x3A	; 58
    2c2c:	18 f0       	brcs	.+6      	; 0x2c34 <__ultoa_invert+0x7c>
    2c2e:	49 5d       	subi	r20, 0xD9	; 217
    2c30:	31 fd       	sbrc	r19, 1
    2c32:	40 52       	subi	r20, 0x20	; 32
    2c34:	41 93       	st	Z+, r20
    2c36:	02 d0       	rcall	.+4      	; 0x2c3c <__ultoa_invert+0x84>
    2c38:	a9 f7       	brne	.-22     	; 0x2c24 <__ultoa_invert+0x6c>
    2c3a:	ea cf       	rjmp	.-44     	; 0x2c10 <__ultoa_invert+0x58>
    2c3c:	b4 e0       	ldi	r27, 0x04	; 4
    2c3e:	a6 95       	lsr	r26
    2c40:	97 95       	ror	r25
    2c42:	87 95       	ror	r24
    2c44:	77 95       	ror	r23
    2c46:	67 95       	ror	r22
    2c48:	ba 95       	dec	r27
    2c4a:	c9 f7       	brne	.-14     	; 0x2c3e <__ultoa_invert+0x86>
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	61 05       	cpc	r22, r1
    2c50:	71 05       	cpc	r23, r1
    2c52:	08 95       	ret
    2c54:	9b 01       	movw	r18, r22
    2c56:	ac 01       	movw	r20, r24
    2c58:	0a 2e       	mov	r0, r26
    2c5a:	06 94       	lsr	r0
    2c5c:	57 95       	ror	r21
    2c5e:	47 95       	ror	r20
    2c60:	37 95       	ror	r19
    2c62:	27 95       	ror	r18
    2c64:	ba 95       	dec	r27
    2c66:	c9 f7       	brne	.-14     	; 0x2c5a <__ultoa_invert+0xa2>
    2c68:	62 0f       	add	r22, r18
    2c6a:	73 1f       	adc	r23, r19
    2c6c:	84 1f       	adc	r24, r20
    2c6e:	95 1f       	adc	r25, r21
    2c70:	a0 1d       	adc	r26, r0
    2c72:	08 95       	ret

00002c74 <_exit>:
    2c74:	f8 94       	cli

00002c76 <__stop_program>:
    2c76:	ff cf       	rjmp	.-2      	; 0x2c76 <__stop_program>
