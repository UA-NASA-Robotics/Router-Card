
RouterCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00002e1c  00002eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bf3  00800110  00800110  00002ec0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ef0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000668  00000000  00000000  00002f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000094a0  00000000  00000000  00003598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ea9  00000000  00000000  0000ca38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000414e  00000000  00000000  0000e8e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001604  00000000  00000000  00012a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019f4  00000000  00000000  00014034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000067c1  00000000  00000000  00015a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  0001c1e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
       2:	00 00       	nop
       4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c0       	rjmp	.+252    	; 0x11a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c0       	rjmp	.+236    	; 0x11a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c0       	rjmp	.+224    	; 0x11a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c0       	rjmp	.+216    	; 0x11a <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__vector_17>
      48:	ca c2       	rjmp	.+1428   	; 0x5de <__vector_18>
      4a:	00 00       	nop
      4c:	66 c0       	rjmp	.+204    	; 0x11a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
      52:	00 00       	nop
      54:	95 c2       	rjmp	.+1322   	; 0x580 <__vector_21>
      56:	00 00       	nop
      58:	28 c2       	rjmp	.+1104   	; 0x4aa <__vector_22>
      5a:	00 00       	nop
      5c:	5e c0       	rjmp	.+188    	; 0x11a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c0       	rjmp	.+184    	; 0x11a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c0       	rjmp	.+180    	; 0x11a <__bad_interrupt>
      66:	00 00       	nop
      68:	58 c0       	rjmp	.+176    	; 0x11a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	56 c0       	rjmp	.+172    	; 0x11a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c0       	rjmp	.+168    	; 0x11a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c0       	rjmp	.+164    	; 0x11a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c0       	rjmp	.+160    	; 0x11a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c0       	rjmp	.+156    	; 0x11a <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c2       	rjmp	.+1184   	; 0x522 <__vector_32>
      82:	00 00       	nop
      84:	ce c1       	rjmp	.+924    	; 0x422 <__vector_33>
      86:	00 00       	nop
      88:	48 c0       	rjmp	.+144    	; 0x11a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	46 c0       	rjmp	.+140    	; 0x11a <__bad_interrupt>
      8e:	00 00       	nop
      90:	44 c0       	rjmp	.+136    	; 0x11a <__bad_interrupt>
      92:	00 00       	nop
      94:	7a 11       	cpse	r23, r10
      96:	31 11       	cpse	r19, r1
      98:	33 11       	cpse	r19, r3
      9a:	35 11       	cpse	r19, r5
      9c:	37 11       	cpse	r19, r7
      9e:	39 11       	cpse	r19, r9
      a0:	80 11       	cpse	r24, r0
      a2:	2f 11       	cpse	r18, r15
      a4:	82 11       	cpse	r24, r2
      a6:	7c 11       	cpse	r23, r12
      a8:	3b 11       	cpse	r19, r11
      aa:	3d 11       	cpse	r19, r13
      ac:	7e 11       	cpse	r23, r14
      ae:	4b 11       	cpse	r20, r11
      b0:	4f 11       	cpse	r20, r15
      b2:	51 11       	cpse	r21, r1
      b4:	53 11       	cpse	r21, r3
      b6:	55 11       	cpse	r21, r5
      b8:	84 11       	cpse	r24, r4
      ba:	49 11       	cpse	r20, r9
      bc:	4d 11       	cpse	r20, r13
      be:	57 11       	cpse	r21, r7
      c0:	59 11       	cpse	r21, r9
      c2:	5b 11       	cpse	r21, r11
      c4:	b0 11       	cpse	r27, r0
      c6:	93 11       	cpse	r25, r3
      c8:	95 11       	cpse	r25, r5
      ca:	97 11       	cpse	r25, r7
      cc:	99 11       	cpse	r25, r9
      ce:	9b 11       	cpse	r25, r11
      d0:	b4 11       	cpse	r27, r4
      d2:	91 11       	cpse	r25, r1
      d4:	b6 11       	cpse	r27, r6
      d6:	b2 11       	cpse	r27, r2
      d8:	9d 11       	cpse	r25, r13
      da:	9f 11       	cpse	r25, r15

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d0 e1       	ldi	r29, 0x10	; 16
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	ec e1       	ldi	r30, 0x1C	; 28
      f0:	fe e2       	ldi	r31, 0x2E	; 46
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0b bf       	out	0x3b, r16	; 59
      f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
      f8:	07 90       	elpm	r0, Z+
      fa:	0d 92       	st	X+, r0
      fc:	a0 31       	cpi	r26, 0x10	; 16
      fe:	b1 07       	cpc	r27, r17
     100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
     102:	2d e0       	ldi	r18, 0x0D	; 13
     104:	a0 e1       	ldi	r26, 0x10	; 16
     106:	b1 e0       	ldi	r27, 0x01	; 1
     108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
     10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
     10c:	a3 30       	cpi	r26, 0x03	; 3
     10e:	b2 07       	cpc	r27, r18
     110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
     112:	0e 94 12 12 	call	0x2424	; 0x2424 <main>
     116:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <_exit>

0000011a <__bad_interrupt>:
     11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <cb_init>:
	cb->tail = (int*)cb->tail + cb->sz;
	if(cb->tail == cb->buffer_end)
		cb->tail = cb->buffer;
	cb->count--;
	return *val;
}
     11c:	fc 01       	movw	r30, r24
     11e:	75 83       	std	Z+5, r23	; 0x05
     120:	64 83       	std	Z+4, r22	; 0x04
     122:	42 9f       	mul	r20, r18
     124:	c0 01       	movw	r24, r0
     126:	43 9f       	mul	r20, r19
     128:	90 0d       	add	r25, r0
     12a:	52 9f       	mul	r21, r18
     12c:	90 0d       	add	r25, r0
     12e:	11 24       	eor	r1, r1
     130:	86 0f       	add	r24, r22
     132:	97 1f       	adc	r25, r23
     134:	97 83       	std	Z+7, r25	; 0x07
     136:	86 83       	std	Z+6, r24	; 0x06
     138:	51 87       	std	Z+9, r21	; 0x09
     13a:	40 87       	std	Z+8, r20	; 0x08
     13c:	13 86       	std	Z+11, r1	; 0x0b
     13e:	12 86       	std	Z+10, r1	; 0x0a
     140:	35 87       	std	Z+13, r19	; 0x0d
     142:	24 87       	std	Z+12, r18	; 0x0c
     144:	71 83       	std	Z+1, r23	; 0x01
     146:	60 83       	st	Z, r22
     148:	73 83       	std	Z+3, r23	; 0x03
     14a:	62 83       	std	Z+2, r22	; 0x02
     14c:	08 95       	ret

0000014e <cb_push_back>:
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	ec 01       	movw	r28, r24
     154:	4c 85       	ldd	r20, Y+12	; 0x0c
     156:	5d 85       	ldd	r21, Y+13	; 0x0d
     158:	88 81       	ld	r24, Y
     15a:	99 81       	ldd	r25, Y+1	; 0x01
     15c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <memcpy>
     160:	28 81       	ld	r18, Y
     162:	39 81       	ldd	r19, Y+1	; 0x01
     164:	8c 85       	ldd	r24, Y+12	; 0x0c
     166:	9d 85       	ldd	r25, Y+13	; 0x0d
     168:	82 0f       	add	r24, r18
     16a:	93 1f       	adc	r25, r19
     16c:	99 83       	std	Y+1, r25	; 0x01
     16e:	88 83       	st	Y, r24
     170:	2e 81       	ldd	r18, Y+6	; 0x06
     172:	3f 81       	ldd	r19, Y+7	; 0x07
     174:	82 17       	cp	r24, r18
     176:	93 07       	cpc	r25, r19
     178:	20 f0       	brcs	.+8      	; 0x182 <cb_push_back+0x34>
     17a:	8c 81       	ldd	r24, Y+4	; 0x04
     17c:	9d 81       	ldd	r25, Y+5	; 0x05
     17e:	99 83       	std	Y+1, r25	; 0x01
     180:	88 83       	st	Y, r24
     182:	8a 85       	ldd	r24, Y+10	; 0x0a
     184:	9b 85       	ldd	r25, Y+11	; 0x0b
     186:	28 85       	ldd	r18, Y+8	; 0x08
     188:	39 85       	ldd	r19, Y+9	; 0x09
     18a:	82 17       	cp	r24, r18
     18c:	93 07       	cpc	r25, r19
     18e:	1c f4       	brge	.+6      	; 0x196 <cb_push_back+0x48>
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	9b 87       	std	Y+11, r25	; 0x0b
     194:	8a 87       	std	Y+10, r24	; 0x0a
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <cb_pop_front>:
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	fb 01       	movw	r30, r22
     1a2:	10 82       	st	Z, r1
     1a4:	fc 01       	movw	r30, r24
     1a6:	22 85       	ldd	r18, Z+10	; 0x0a
     1a8:	33 85       	ldd	r19, Z+11	; 0x0b
     1aa:	23 2b       	or	r18, r19
     1ac:	f9 f0       	breq	.+62     	; 0x1ec <cb_pop_front+0x50>
     1ae:	9b 01       	movw	r18, r22
     1b0:	ec 01       	movw	r28, r24
     1b2:	62 81       	ldd	r22, Z+2	; 0x02
     1b4:	73 81       	ldd	r23, Z+3	; 0x03
     1b6:	44 85       	ldd	r20, Z+12	; 0x0c
     1b8:	55 85       	ldd	r21, Z+13	; 0x0d
     1ba:	c9 01       	movw	r24, r18
     1bc:	0e 94 03 17 	call	0x2e06	; 0x2e06 <memcpy>
     1c0:	2a 81       	ldd	r18, Y+2	; 0x02
     1c2:	3b 81       	ldd	r19, Y+3	; 0x03
     1c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     1c6:	9d 85       	ldd	r25, Y+13	; 0x0d
     1c8:	82 0f       	add	r24, r18
     1ca:	93 1f       	adc	r25, r19
     1cc:	9b 83       	std	Y+3, r25	; 0x03
     1ce:	8a 83       	std	Y+2, r24	; 0x02
     1d0:	2e 81       	ldd	r18, Y+6	; 0x06
     1d2:	3f 81       	ldd	r19, Y+7	; 0x07
     1d4:	82 17       	cp	r24, r18
     1d6:	93 07       	cpc	r25, r19
     1d8:	21 f4       	brne	.+8      	; 0x1e2 <cb_pop_front+0x46>
     1da:	8c 81       	ldd	r24, Y+4	; 0x04
     1dc:	9d 81       	ldd	r25, Y+5	; 0x05
     1de:	9b 83       	std	Y+3, r25	; 0x03
     1e0:	8a 83       	std	Y+2, r24	; 0x02
     1e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     1e4:	9b 85       	ldd	r25, Y+11	; 0x0b
     1e6:	01 97       	sbiw	r24, 0x01	; 1
     1e8:	9b 87       	std	Y+11, r25	; 0x0b
     1ea:	8a 87       	std	Y+10, r24	; 0x0a
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <cb_size>:
     1f2:	fc 01       	movw	r30, r24
     1f4:	82 85       	ldd	r24, Z+10	; 0x0a
     1f6:	93 85       	ldd	r25, Z+11	; 0x0b
     1f8:	08 95       	ret

000001fa <USART0_Init>:
     1fa:	e0 e2       	ldi	r30, 0x20	; 32
     1fc:	f2 e0       	ldi	r31, 0x02	; 2
     1fe:	47 ee       	ldi	r20, 0xE7	; 231
     200:	51 e0       	ldi	r21, 0x01	; 1
     202:	55 83       	std	Z+5, r21	; 0x05
     204:	44 83       	std	Z+4, r20	; 0x04
     206:	29 e1       	ldi	r18, 0x19	; 25
     208:	32 e0       	ldi	r19, 0x02	; 2
     20a:	37 83       	std	Z+7, r19	; 0x07
     20c:	26 83       	std	Z+6, r18	; 0x06
     20e:	22 e3       	ldi	r18, 0x32	; 50
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	31 87       	std	Z+9, r19	; 0x09
     214:	20 87       	std	Z+8, r18	; 0x08
     216:	13 86       	std	Z+11, r1	; 0x0b
     218:	12 86       	std	Z+10, r1	; 0x0a
     21a:	21 e0       	ldi	r18, 0x01	; 1
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	35 87       	std	Z+13, r19	; 0x0d
     220:	24 87       	std	Z+12, r18	; 0x0c
     222:	51 83       	std	Z+1, r21	; 0x01
     224:	40 83       	st	Z, r20
     226:	53 83       	std	Z+3, r21	; 0x03
     228:	42 83       	std	Z+2, r20	; 0x02
     22a:	ec e3       	ldi	r30, 0x3C	; 60
     22c:	f2 e0       	ldi	r31, 0x02	; 2
     22e:	4a e1       	ldi	r20, 0x1A	; 26
     230:	52 e0       	ldi	r21, 0x02	; 2
     232:	55 83       	std	Z+5, r21	; 0x05
     234:	44 83       	std	Z+4, r20	; 0x04
     236:	af e1       	ldi	r26, 0x1F	; 31
     238:	b2 e0       	ldi	r27, 0x02	; 2
     23a:	b7 83       	std	Z+7, r27	; 0x07
     23c:	a6 83       	std	Z+6, r26	; 0x06
     23e:	a5 e0       	ldi	r26, 0x05	; 5
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	b1 87       	std	Z+9, r27	; 0x09
     244:	a0 87       	std	Z+8, r26	; 0x08
     246:	13 86       	std	Z+11, r1	; 0x0b
     248:	12 86       	std	Z+10, r1	; 0x0a
     24a:	35 87       	std	Z+13, r19	; 0x0d
     24c:	24 87       	std	Z+12, r18	; 0x0c
     24e:	51 83       	std	Z+1, r21	; 0x01
     250:	40 83       	st	Z, r20
     252:	53 83       	std	Z+3, r21	; 0x03
     254:	42 83       	std	Z+2, r20	; 0x02
     256:	61 15       	cp	r22, r1
     258:	26 e9       	ldi	r18, 0x96	; 150
     25a:	72 07       	cpc	r23, r18
     25c:	81 05       	cpc	r24, r1
     25e:	91 05       	cpc	r25, r1
     260:	01 f1       	breq	.+64     	; 0x2a2 <USART0_Init+0xa8>
     262:	30 f4       	brcc	.+12     	; 0x270 <USART0_Init+0x76>
     264:	61 15       	cp	r22, r1
     266:	7b 44       	sbci	r23, 0x4B	; 75
     268:	81 05       	cpc	r24, r1
     26a:	91 05       	cpc	r25, r1
     26c:	09 f1       	breq	.+66     	; 0x2b0 <USART0_Init+0xb6>
     26e:	27 c0       	rjmp	.+78     	; 0x2be <USART0_Init+0xc4>
     270:	61 15       	cp	r22, r1
     272:	21 ee       	ldi	r18, 0xE1	; 225
     274:	72 07       	cpc	r23, r18
     276:	81 05       	cpc	r24, r1
     278:	91 05       	cpc	r25, r1
     27a:	61 f0       	breq	.+24     	; 0x294 <USART0_Init+0x9a>
     27c:	61 15       	cp	r22, r1
     27e:	72 4c       	sbci	r23, 0xC2	; 194
     280:	81 40       	sbci	r24, 0x01	; 1
     282:	91 05       	cpc	r25, r1
     284:	e1 f4       	brne	.+56     	; 0x2be <USART0_Init+0xc4>
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     28e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     292:	1b c0       	rjmp	.+54     	; 0x2ca <USART0_Init+0xd0>
     294:	82 e2       	ldi	r24, 0x22	; 34
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     29c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2a0:	14 c0       	rjmp	.+40     	; 0x2ca <USART0_Init+0xd0>
     2a2:	83 e3       	ldi	r24, 0x33	; 51
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2ae:	0d c0       	rjmp	.+26     	; 0x2ca <USART0_Init+0xd0>
     2b0:	87 e6       	ldi	r24, 0x67	; 103
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2bc:	06 c0       	rjmp	.+12     	; 0x2ca <USART0_Init+0xd0>
     2be:	8f ec       	ldi	r24, 0xCF	; 207
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2d0:	8e e0       	ldi	r24, 0x0E	; 14
     2d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     2d6:	88 e9       	ldi	r24, 0x98	; 152
     2d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     2dc:	08 95       	ret

000002de <USART1_Init>:
     2de:	ee e2       	ldi	r30, 0x2E	; 46
     2e0:	f2 e0       	ldi	r31, 0x02	; 2
     2e2:	4a e6       	ldi	r20, 0x6A	; 106
     2e4:	51 e0       	ldi	r21, 0x01	; 1
     2e6:	55 83       	std	Z+5, r21	; 0x05
     2e8:	44 83       	std	Z+4, r20	; 0x04
     2ea:	2e ec       	ldi	r18, 0xCE	; 206
     2ec:	31 e0       	ldi	r19, 0x01	; 1
     2ee:	37 83       	std	Z+7, r19	; 0x07
     2f0:	26 83       	std	Z+6, r18	; 0x06
     2f2:	24 e6       	ldi	r18, 0x64	; 100
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	31 87       	std	Z+9, r19	; 0x09
     2f8:	20 87       	std	Z+8, r18	; 0x08
     2fa:	13 86       	std	Z+11, r1	; 0x0b
     2fc:	12 86       	std	Z+10, r1	; 0x0a
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	35 87       	std	Z+13, r19	; 0x0d
     304:	24 87       	std	Z+12, r18	; 0x0c
     306:	51 83       	std	Z+1, r21	; 0x01
     308:	40 83       	st	Z, r20
     30a:	53 83       	std	Z+3, r21	; 0x03
     30c:	42 83       	std	Z+2, r20	; 0x02
     30e:	ea e5       	ldi	r30, 0x5A	; 90
     310:	f1 e0       	ldi	r31, 0x01	; 1
     312:	4e ec       	ldi	r20, 0xCE	; 206
     314:	51 e0       	ldi	r21, 0x01	; 1
     316:	55 83       	std	Z+5, r21	; 0x05
     318:	44 83       	std	Z+4, r20	; 0x04
     31a:	a7 ee       	ldi	r26, 0xE7	; 231
     31c:	b1 e0       	ldi	r27, 0x01	; 1
     31e:	b7 83       	std	Z+7, r27	; 0x07
     320:	a6 83       	std	Z+6, r26	; 0x06
     322:	a9 e1       	ldi	r26, 0x19	; 25
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	b1 87       	std	Z+9, r27	; 0x09
     328:	a0 87       	std	Z+8, r26	; 0x08
     32a:	13 86       	std	Z+11, r1	; 0x0b
     32c:	12 86       	std	Z+10, r1	; 0x0a
     32e:	35 87       	std	Z+13, r19	; 0x0d
     330:	24 87       	std	Z+12, r18	; 0x0c
     332:	51 83       	std	Z+1, r21	; 0x01
     334:	40 83       	st	Z, r20
     336:	53 83       	std	Z+3, r21	; 0x03
     338:	42 83       	std	Z+2, r20	; 0x02
     33a:	61 15       	cp	r22, r1
     33c:	26 e9       	ldi	r18, 0x96	; 150
     33e:	72 07       	cpc	r23, r18
     340:	81 05       	cpc	r24, r1
     342:	91 05       	cpc	r25, r1
     344:	01 f1       	breq	.+64     	; 0x386 <USART1_Init+0xa8>
     346:	30 f4       	brcc	.+12     	; 0x354 <USART1_Init+0x76>
     348:	61 15       	cp	r22, r1
     34a:	7b 44       	sbci	r23, 0x4B	; 75
     34c:	81 05       	cpc	r24, r1
     34e:	91 05       	cpc	r25, r1
     350:	09 f1       	breq	.+66     	; 0x394 <USART1_Init+0xb6>
     352:	27 c0       	rjmp	.+78     	; 0x3a2 <USART1_Init+0xc4>
     354:	61 15       	cp	r22, r1
     356:	21 ee       	ldi	r18, 0xE1	; 225
     358:	72 07       	cpc	r23, r18
     35a:	81 05       	cpc	r24, r1
     35c:	91 05       	cpc	r25, r1
     35e:	61 f0       	breq	.+24     	; 0x378 <USART1_Init+0x9a>
     360:	61 15       	cp	r22, r1
     362:	72 4c       	sbci	r23, 0xC2	; 194
     364:	81 40       	sbci	r24, 0x01	; 1
     366:	91 05       	cpc	r25, r1
     368:	e1 f4       	brne	.+56     	; 0x3a2 <USART1_Init+0xc4>
     36a:	80 e1       	ldi	r24, 0x10	; 16
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     372:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     376:	1b c0       	rjmp	.+54     	; 0x3ae <USART1_Init+0xd0>
     378:	82 e2       	ldi	r24, 0x22	; 34
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     380:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     384:	14 c0       	rjmp	.+40     	; 0x3ae <USART1_Init+0xd0>
     386:	83 e3       	ldi	r24, 0x33	; 51
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     38e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     392:	0d c0       	rjmp	.+26     	; 0x3ae <USART1_Init+0xd0>
     394:	87 e6       	ldi	r24, 0x67	; 103
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     39c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     3a0:	06 c0       	rjmp	.+12     	; 0x3ae <USART1_Init+0xd0>
     3a2:	8f ec       	ldi	r24, 0xCF	; 207
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     3aa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     3ba:	88 e9       	ldi	r24, 0x98	; 152
     3bc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     3c0:	08 95       	ret

000003c2 <USART1_put_C>:
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	1f 92       	push	r1
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	09 ec       	ldi	r16, 0xC9	; 201
     3d4:	10 e0       	ldi	r17, 0x00	; 0
     3d6:	f8 01       	movw	r30, r16
     3d8:	80 81       	ld	r24, Z
     3da:	8f 7d       	andi	r24, 0xDF	; 223
     3dc:	80 83       	st	Z, r24
     3de:	be 01       	movw	r22, r28
     3e0:	6f 5f       	subi	r22, 0xFF	; 255
     3e2:	7f 4f       	sbci	r23, 0xFF	; 255
     3e4:	8a e5       	ldi	r24, 0x5A	; 90
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	b2 de       	rcall	.-668    	; 0x14e <cb_push_back>
     3ea:	f8 01       	movw	r30, r16
     3ec:	80 81       	ld	r24, Z
     3ee:	80 62       	ori	r24, 0x20	; 32
     3f0:	80 83       	st	Z, r24
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	08 95       	ret

000003fe <USART1_get_C>:
     3fe:	69 e1       	ldi	r22, 0x19	; 25
     400:	72 e0       	ldi	r23, 0x02	; 2
     402:	8e e2       	ldi	r24, 0x2E	; 46
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	ca de       	rcall	.-620    	; 0x19c <cb_pop_front>
     408:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <val>
     40c:	08 95       	ret

0000040e <isUART1_ReceiveEmpty>:
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <UART1_RX_Buffer+0xa>
     414:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <UART1_RX_Buffer+0xb>
     418:	12 16       	cp	r1, r18
     41a:	13 06       	cpc	r1, r19
     41c:	0c f4       	brge	.+2      	; 0x420 <isUART1_ReceiveEmpty+0x12>
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	08 95       	ret

00000422 <__vector_33>:
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	4f 93       	push	r20
     436:	5f 93       	push	r21
     438:	6f 93       	push	r22
     43a:	7f 93       	push	r23
     43c:	8f 93       	push	r24
     43e:	9f 93       	push	r25
     440:	af 93       	push	r26
     442:	bf 93       	push	r27
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	1f 92       	push	r1
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <UART1_TX_Buffer+0xa>
     456:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UART1_TX_Buffer+0xb>
     45a:	18 16       	cp	r1, r24
     45c:	19 06       	cpc	r1, r25
     45e:	54 f4       	brge	.+20     	; 0x474 <__vector_33+0x52>
     460:	be 01       	movw	r22, r28
     462:	6f 5f       	subi	r22, 0xFF	; 255
     464:	7f 4f       	sbci	r23, 0xFF	; 255
     466:	8a e5       	ldi	r24, 0x5A	; 90
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	98 de       	rcall	.-720    	; 0x19c <cb_pop_front>
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     472:	05 c0       	rjmp	.+10     	; 0x47e <__vector_33+0x5c>
     474:	e9 ec       	ldi	r30, 0xC9	; 201
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	8f 7d       	andi	r24, 0xDF	; 223
     47c:	80 83       	st	Z, r24
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	ff 91       	pop	r31
     486:	ef 91       	pop	r30
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	7f 91       	pop	r23
     492:	6f 91       	pop	r22
     494:	5f 91       	pop	r21
     496:	4f 91       	pop	r20
     498:	3f 91       	pop	r19
     49a:	2f 91       	pop	r18
     49c:	0f 90       	pop	r0
     49e:	0b be       	out	0x3b, r0	; 59
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <__vector_22>:
ISR(USART0_UDRE_vect)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	0b b6       	in	r0, 0x3b	; 59
     4b6:	0f 92       	push	r0
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	if (UART0_TX_Buffer.count > 0)
     4d0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UART0_TX_Buffer+0xa>
     4d4:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <UART0_TX_Buffer+0xb>
     4d8:	18 16       	cp	r1, r24
     4da:	19 06       	cpc	r1, r25
     4dc:	54 f4       	brge	.+20     	; 0x4f2 <__vector_22+0x48>
	{

		//if(uart0POP(&UART0_TX_Buffer, &tempTX))
		cb_pop_front(&UART0_TX_Buffer, &tempTX);
     4de:	60 e1       	ldi	r22, 0x10	; 16
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	5a de       	rcall	.-844    	; 0x19c <cb_pop_front>
		UDR0 = tempTX;
     4e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     4ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__vector_22+0x52>
	}
	else
	{
		UCSR0B &=  ~(1<<UDRIE0); //disable sending when buffer empty
     4f2:	e1 ec       	ldi	r30, 0xC1	; 193
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	8f 7d       	andi	r24, 0xDF	; 223
     4fa:	80 83       	st	Z, r24
	}
}
     4fc:	ff 91       	pop	r31
     4fe:	ef 91       	pop	r30
     500:	bf 91       	pop	r27
     502:	af 91       	pop	r26
     504:	9f 91       	pop	r25
     506:	8f 91       	pop	r24
     508:	7f 91       	pop	r23
     50a:	6f 91       	pop	r22
     50c:	5f 91       	pop	r21
     50e:	4f 91       	pop	r20
     510:	3f 91       	pop	r19
     512:	2f 91       	pop	r18
     514:	0f 90       	pop	r0
     516:	0b be       	out	0x3b, r0	; 59
     518:	0f 90       	pop	r0
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	0f 90       	pop	r0
     51e:	1f 90       	pop	r1
     520:	18 95       	reti

00000522 <__vector_32>:
// ISR(USART1_TX_vect) {
// //not used
// }
char received1;
int* HeadPtr;
ISR(USART1_RX_vect) {
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	0b b6       	in	r0, 0x3b	; 59
     52e:	0f 92       	push	r0
     530:	2f 93       	push	r18
     532:	3f 93       	push	r19
     534:	4f 93       	push	r20
     536:	5f 93       	push	r21
     538:	6f 93       	push	r22
     53a:	7f 93       	push	r23
     53c:	8f 93       	push	r24
     53e:	9f 93       	push	r25
     540:	af 93       	push	r26
     542:	bf 93       	push	r27
     544:	ef 93       	push	r30
     546:	ff 93       	push	r31


	received1 = UDR1; // might be able to eliminate this line.
     548:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     54c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <received1>

	cb_push_back(&UART1_RX_Buffer, &received1);
     550:	6f e1       	ldi	r22, 0x1F	; 31
     552:	72 e0       	ldi	r23, 0x02	; 2
     554:	8e e2       	ldi	r24, 0x2E	; 46
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	fa dd       	rcall	.-1036   	; 0x14e <cb_push_back>

}
     55a:	ff 91       	pop	r31
     55c:	ef 91       	pop	r30
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	7f 91       	pop	r23
     568:	6f 91       	pop	r22
     56a:	5f 91       	pop	r21
     56c:	4f 91       	pop	r20
     56e:	3f 91       	pop	r19
     570:	2f 91       	pop	r18
     572:	0f 90       	pop	r0
     574:	0b be       	out	0x3b, r0	; 59
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <__vector_21>:

char received0;
ISR(USART0_RX_vect) {
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	0b b6       	in	r0, 0x3b	; 59
     58c:	0f 92       	push	r0
     58e:	2f 93       	push	r18
     590:	3f 93       	push	r19
     592:	4f 93       	push	r20
     594:	5f 93       	push	r21
     596:	6f 93       	push	r22
     598:	7f 93       	push	r23
     59a:	8f 93       	push	r24
     59c:	9f 93       	push	r25
     59e:	af 93       	push	r26
     5a0:	bf 93       	push	r27
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
	received0 = UDR0; // might be able to eliminate this line.
     5a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5aa:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <received0>
	cb_push_back(&UART0_RX_Buffer, &received0);
     5ae:	6a e4       	ldi	r22, 0x4A	; 74
     5b0:	72 e0       	ldi	r23, 0x02	; 2
     5b2:	8c e3       	ldi	r24, 0x3C	; 60
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	cb dd       	rcall	.-1130   	; 0x14e <cb_push_back>
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0b be       	out	0x3b, r0	; 59
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <__vector_18>:
//! presently only used for reception of CAN packets


//THIS LOOKS OKAY
ISR( CANIT_vect)
{
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	0b b6       	in	r0, 0x3b	; 59
     5ea:	0f 92       	push	r0
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	cf 93       	push	r28
     602:	ef 93       	push	r30
     604:	ff 93       	push	r31

	//Process packet (static??)
	static CAN_packet packet;

	//CANPage saving
	char save_canpage=CANPAGE;
     606:	ed ee       	ldi	r30, 0xED	; 237
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	c0 81       	ld	r28, Z

	unsigned mob=CANHPMOB; // get highest prio mob
     60c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     610:	68 2f       	mov	r22, r24
     612:	70 e0       	ldi	r23, 0x00	; 0
	CANPAGE = mob & 0xf0;
     614:	80 7f       	andi	r24, 0xF0	; 240
     616:	80 83       	st	Z, r24

	mob >>= 4; // -> mob number 0..15
     618:	72 95       	swap	r23
     61a:	62 95       	swap	r22
     61c:	6f 70       	andi	r22, 0x0F	; 15
     61e:	67 27       	eor	r22, r23
     620:	7f 70       	andi	r23, 0x0F	; 15
     622:	67 27       	eor	r22, r23
	//----------------RECEIVING DATA (RX)----------------
	if((CANSTMOB & ~0x20) ==0)
     624:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     628:	8f 7d       	andi	r24, 0xDF	; 223
     62a:	c1 f5       	brne	.+112    	; 0x69c <__vector_18+0xbe>
	{
		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
     62c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     630:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     634:	ec e1       	ldi	r30, 0x1C	; 28
     636:	f1 e0       	ldi	r31, 0x01	; 1
     638:	22 95       	swap	r18
     63a:	26 95       	lsr	r18
     63c:	27 70       	andi	r18, 0x07	; 7
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	82 2b       	or	r24, r18
     64e:	91 83       	std	Z+1, r25	; 0x01
     650:	80 83       	st	Z, r24

		//Identify the length of the packet
		length=CANCDMOB & 0x0f;
     652:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     656:	8f 70       	andi	r24, 0x0F	; 15
		packet.length=length;
     658:	82 83       	std	Z+2, r24	; 0x02

		//Push the packet in to the storage
		for (i = 0; i <length; ++i)
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	00 97       	sbiw	r24, 0x00	; 0
     65e:	59 f0       	breq	.+22     	; 0x676 <__vector_18+0x98>
     660:	ef e1       	ldi	r30, 0x1F	; 31
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	81 5e       	subi	r24, 0xE1	; 225
     666:	9e 4f       	sbci	r25, 0xFE	; 254
		{
			packet.data[i] = CANMSG;
     668:	aa ef       	ldi	r26, 0xFA	; 250
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	2c 91       	ld	r18, X
     66e:	21 93       	st	Z+, r18
		//Identify the length of the packet
		length=CANCDMOB & 0x0f;
		packet.length=length;

		//Push the packet in to the storage
		for (i = 0; i <length; ++i)
     670:	e8 17       	cp	r30, r24
     672:	f9 07       	cpc	r31, r25
     674:	d9 f7       	brne	.-10     	; 0x66c <__vector_18+0x8e>
		{
			packet.data[i] = CANMSG;
		}
		CANSTMOB=0;   // reset INT reason
     676:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB=0x80;  // re-enable RX on this channel
     67a:	80 e8       	ldi	r24, 0x80	; 128
     67c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		canlist[ mob]( &packet, mob);
     680:	fb 01       	movw	r30, r22
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	e4 5b       	subi	r30, 0xB4	; 180
     688:	fd 4f       	sbci	r31, 0xFD	; 253
     68a:	01 90       	ld	r0, Z+
     68c:	f0 81       	ld	r31, Z
     68e:	e0 2d       	mov	r30, r0
     690:	8c e1       	ldi	r24, 0x1C	; 28
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	09 95       	icall
		CANPAGE=save_canpage; // restore CANPAGE
     696:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     69a:	d8 c0       	rjmp	.+432    	; 0x84c <__vector_18+0x26e>
	}
	//----------------SENDING DATA (TX) ----------------
	else if((CANSTMOB & ~0x40) ==0)
     69c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     6a0:	8f 7b       	andi	r24, 0xBF	; 191
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <__vector_18+0xc8>
     6a4:	57 c0       	rjmp	.+174    	; 0x754 <__vector_18+0x176>
	{
		canlist[ mob]( &packet, mob); //if data remains in send buffer
     6a6:	fb 01       	movw	r30, r22
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	e4 5b       	subi	r30, 0xB4	; 180
     6ae:	fd 4f       	sbci	r31, 0xFD	; 253
     6b0:	01 90       	ld	r0, Z+
     6b2:	f0 81       	ld	r31, Z
     6b4:	e0 2d       	mov	r30, r0
     6b6:	8c e1       	ldi	r24, 0x1C	; 28
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	09 95       	icall

		if(packet.length > 0)
     6bc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <packet.2165+0x2>
     6c0:	88 23       	and	r24, r24
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <__vector_18+0xe8>
     6c4:	40 c0       	rjmp	.+128    	; 0x746 <__vector_18+0x168>
		{
			//Set the TX ID
			CANIDT1 = packet.id >>3;
     6c6:	ec e1       	ldi	r30, 0x1C	; 28
     6c8:	f1 e0       	ldi	r31, 0x01	; 1
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	96 95       	lsr	r25
     6d0:	87 95       	ror	r24
     6d2:	96 95       	lsr	r25
     6d4:	87 95       	ror	r24
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
			CANIDT2 = packet.id <<5;
     6de:	80 81       	ld	r24, Z
     6e0:	82 95       	swap	r24
     6e2:	88 0f       	add	r24, r24
     6e4:	80 7e       	andi	r24, 0xE0	; 224
     6e6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT3 = 0;
     6ea:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			CANIDT4 = 0;
     6ee:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

			//PUSH THE PACKET
			if(packet.length == 9)
     6f2:	82 81       	ldd	r24, Z+2	; 0x02
     6f4:	89 30       	cpi	r24, 0x09	; 9
     6f6:	19 f0       	breq	.+6      	; 0x6fe <__vector_18+0x120>
				for (unsigned char cnt=0; cnt < 8; ++cnt)
					CANMSG = packet.data[cnt];
			}
			else
			{
				for (unsigned char cnt=0; cnt < packet.length; ++cnt)
     6f8:	81 11       	cpse	r24, r1
     6fa:	0d c0       	rjmp	.+26     	; 0x716 <__vector_18+0x138>
     6fc:	1c c0       	rjmp	.+56     	; 0x736 <__vector_18+0x158>
     6fe:	ef e1       	ldi	r30, 0x1F	; 31
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	27 e2       	ldi	r18, 0x27	; 39
     704:	31 e0       	ldi	r19, 0x01	; 1

			//PUSH THE PACKET
			if(packet.length == 9)
			{
				for (unsigned char cnt=0; cnt < 8; ++cnt)
					CANMSG = packet.data[cnt];
     706:	aa ef       	ldi	r26, 0xFA	; 250
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	81 91       	ld	r24, Z+
     70c:	8c 93       	st	X, r24
			CANIDT4 = 0;

			//PUSH THE PACKET
			if(packet.length == 9)
			{
				for (unsigned char cnt=0; cnt < 8; ++cnt)
     70e:	e2 17       	cp	r30, r18
     710:	f3 07       	cpc	r31, r19
     712:	d9 f7       	brne	.-10     	; 0x70a <__vector_18+0x12c>
     714:	10 c0       	rjmp	.+32     	; 0x736 <__vector_18+0x158>
					CANMSG = packet.data[cnt];
			}
			else
			{
				for (unsigned char cnt=0; cnt < packet.length; ++cnt)
     716:	80 e0       	ldi	r24, 0x00	; 0
					CANMSG = packet.data[cnt];
     718:	2c e1       	ldi	r18, 0x1C	; 28
     71a:	31 e0       	ldi	r19, 0x01	; 1
     71c:	aa ef       	ldi	r26, 0xFA	; 250
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e8 2f       	mov	r30, r24
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	e4 5e       	subi	r30, 0xE4	; 228
     726:	fe 4f       	sbci	r31, 0xFE	; 254
     728:	93 81       	ldd	r25, Z+3	; 0x03
     72a:	9c 93       	st	X, r25
				for (unsigned char cnt=0; cnt < 8; ++cnt)
					CANMSG = packet.data[cnt];
			}
			else
			{
				for (unsigned char cnt=0; cnt < packet.length; ++cnt)
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	f9 01       	movw	r30, r18
     730:	92 81       	ldd	r25, Z+2	; 0x02
     732:	89 17       	cp	r24, r25
     734:	a8 f3       	brcs	.-22     	; 0x720 <__vector_18+0x142>
					CANMSG = packet.data[cnt];
			}
			CANSTMOB = 0;   // reset INT reason
     736:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x40 + packet.length;
     73a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <packet.2165+0x2>
     73e:	80 5c       	subi	r24, 0xC0	; 192
     740:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     744:	04 c0       	rjmp	.+8      	; 0x74e <__vector_18+0x170>
		}
		else //Disable mob to stop interrupts (NO MORE TX TO SEND)
		{
			CANSTMOB=0;   // reset INT reason
     746:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;
     74a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		}
		CANPAGE=save_canpage; // restore CANPAGE
     74e:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     752:	7c c0       	rjmp	.+248    	; 0x84c <__vector_18+0x26e>

	}
	else if((CANSTMOB & ~0x80) ==0) //DLC warning
     754:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	8f 77       	andi	r24, 0x7F	; 127
     75c:	89 2b       	or	r24, r25
     75e:	c1 f5       	brne	.+112    	; 0x7d0 <__vector_18+0x1f2>
	{

		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
     760:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     764:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     768:	ec e1       	ldi	r30, 0x1C	; 28
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	22 95       	swap	r18
     76e:	26 95       	lsr	r18
     770:	27 70       	andi	r18, 0x07	; 7
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	82 2b       	or	r24, r18
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
		length=CANCDMOB & 0x0f;
     786:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     78a:	8f 70       	andi	r24, 0x0F	; 15
		packet.length=length;
     78c:	82 83       	std	Z+2, r24	; 0x02
		for (i = 0; i <length; ++i)
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	00 97       	sbiw	r24, 0x00	; 0
     792:	59 f0       	breq	.+22     	; 0x7aa <__vector_18+0x1cc>
     794:	ef e1       	ldi	r30, 0x1F	; 31
     796:	f1 e0       	ldi	r31, 0x01	; 1
     798:	81 5e       	subi	r24, 0xE1	; 225
     79a:	9e 4f       	sbci	r25, 0xFE	; 254
		{
			packet.data[i] = CANMSG;
     79c:	aa ef       	ldi	r26, 0xFA	; 250
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	2c 91       	ld	r18, X
     7a2:	21 93       	st	Z+, r18

		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
		length=CANCDMOB & 0x0f;
		packet.length=length;
		for (i = 0; i <length; ++i)
     7a4:	8e 17       	cp	r24, r30
     7a6:	9f 07       	cpc	r25, r31
     7a8:	d9 f7       	brne	.-10     	; 0x7a0 <__vector_18+0x1c2>
		{
			packet.data[i] = CANMSG;
		}
		CANSTMOB=0;   // reset INT reason
     7aa:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB=0x80;  // re-enable RX on this channel
     7ae:	80 e8       	ldi	r24, 0x80	; 128
     7b0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		canlist[ mob]( &packet, mob);
     7b4:	fb 01       	movw	r30, r22
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	e4 5b       	subi	r30, 0xB4	; 180
     7bc:	fd 4f       	sbci	r31, 0xFD	; 253
     7be:	01 90       	ld	r0, Z+
     7c0:	f0 81       	ld	r31, Z
     7c2:	e0 2d       	mov	r30, r0
     7c4:	8c e1       	ldi	r24, 0x1C	; 28
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	09 95       	icall
		CANPAGE=save_canpage; // restore CANPAGE
     7ca:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     7ce:	3e c0       	rjmp	.+124    	; 0x84c <__vector_18+0x26e>
	}
	else if((CANSTMOB & ~0xA0) ==0) //DLC warning and RX ok
     7d0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     7d4:	8f 75       	andi	r24, 0x5F	; 95
     7d6:	c1 f5       	brne	.+112    	; 0x848 <__vector_18+0x26a>
	{

		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
     7d8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     7dc:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     7e0:	ec e1       	ldi	r30, 0x1C	; 28
     7e2:	f1 e0       	ldi	r31, 0x01	; 1
     7e4:	22 95       	swap	r18
     7e6:	26 95       	lsr	r18
     7e8:	27 70       	andi	r18, 0x07	; 7
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	82 2b       	or	r24, r18
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	80 83       	st	Z, r24
		length=CANCDMOB & 0x0f;
     7fe:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     802:	8f 70       	andi	r24, 0x0F	; 15
		packet.length=length;
     804:	82 83       	std	Z+2, r24	; 0x02
		for (i = 0; i <length; ++i)
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	59 f0       	breq	.+22     	; 0x822 <__vector_18+0x244>
     80c:	ef e1       	ldi	r30, 0x1F	; 31
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	81 5e       	subi	r24, 0xE1	; 225
     812:	9e 4f       	sbci	r25, 0xFE	; 254
		{
			packet.data[i] = CANMSG;
     814:	aa ef       	ldi	r26, 0xFA	; 250
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	2c 91       	ld	r18, X
     81a:	21 93       	st	Z+, r18

		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
		length=CANCDMOB & 0x0f;
		packet.length=length;
		for (i = 0; i <length; ++i)
     81c:	e8 17       	cp	r30, r24
     81e:	f9 07       	cpc	r31, r25
     820:	d9 f7       	brne	.-10     	; 0x818 <__vector_18+0x23a>
		{
			packet.data[i] = CANMSG;
		}
		CANSTMOB=0;   // reset INT reason
     822:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB=0x80;  // re-enable RX on this channel
     826:	80 e8       	ldi	r24, 0x80	; 128
     828:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		canlist[ mob]( &packet, mob);
     82c:	fb 01       	movw	r30, r22
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	e4 5b       	subi	r30, 0xB4	; 180
     834:	fd 4f       	sbci	r31, 0xFD	; 253
     836:	01 90       	ld	r0, Z+
     838:	f0 81       	ld	r31, Z
     83a:	e0 2d       	mov	r30, r0
     83c:	8c e1       	ldi	r24, 0x1C	; 28
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	09 95       	icall
		CANPAGE=save_canpage; // restore CANPAGE
     842:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     846:	02 c0       	rjmp	.+4      	; 0x84c <__vector_18+0x26e>
	}
	else if((CANSTMOB & ~0x10) ==0) //Bit Error warning
     848:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	{

		//handle transmission error
	}

}
     84c:	ff 91       	pop	r31
     84e:	ef 91       	pop	r30
     850:	cf 91       	pop	r28
     852:	bf 91       	pop	r27
     854:	af 91       	pop	r26
     856:	9f 91       	pop	r25
     858:	8f 91       	pop	r24
     85a:	7f 91       	pop	r23
     85c:	6f 91       	pop	r22
     85e:	5f 91       	pop	r21
     860:	4f 91       	pop	r20
     862:	3f 91       	pop	r19
     864:	2f 91       	pop	r18
     866:	0f 90       	pop	r0
     868:	0b be       	out	0x3b, r0	; 59
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	1f 90       	pop	r1
     872:	18 95       	reti

00000874 <can_tx_kick>:

BOOL can_tx_kick(char mob) //used to start transmission, interrupt will send rest of buffer
{
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	c8 2f       	mov	r28, r24
//    ( (CANSTMOB & 0x40) ==0)   // TX not ready
//  ) {
//    USART0_put_C(0xBB);
//    return FALSE;
//  }
	canlist[ mob]( &packet, mob); //if data remains in send buffer
     87a:	e8 2f       	mov	r30, r24
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	e4 5b       	subi	r30, 0xB4	; 180
     884:	fd 4f       	sbci	r31, 0xFD	; 253
     886:	01 90       	ld	r0, Z+
     888:	f0 81       	ld	r31, Z
     88a:	e0 2d       	mov	r30, r0
     88c:	68 2f       	mov	r22, r24
     88e:	81 e1       	ldi	r24, 0x11	; 17
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	09 95       	icall
	unsigned char cnt;
	CANPAGE = mob << 4;
     894:	c2 95       	swap	r28
     896:	c0 7f       	andi	r28, 0xF0	; 240
     898:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if(packet.length == 0)
     89c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <packet.2191+0x2>
     8a0:	88 23       	and	r24, r24
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <can_tx_kick+0x32>
     8a4:	5c c0       	rjmp	.+184    	; 0x95e <can_tx_kick+0xea>
	{
		return FALSE; //no data to send
	}

	CANSTMOB = 0x00;      // cancel pending operation
     8a6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     8aa:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	if( packet.length!=RTR)
     8ae:	8f 3f       	cpi	r24, 0xFF	; 255
     8b0:	c1 f1       	breq	.+112    	; 0x922 <can_tx_kick+0xae>
	{
		CANIDT1=packet.id >>3;
     8b2:	e1 e1       	ldi	r30, 0x11	; 17
     8b4:	f1 e0       	ldi	r31, 0x01	; 1
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	96 95       	lsr	r25
     8c0:	87 95       	ror	r24
     8c2:	96 95       	lsr	r25
     8c4:	87 95       	ror	r24
     8c6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2=packet.id <<5;
     8ca:	80 81       	ld	r24, Z
     8cc:	82 95       	swap	r24
     8ce:	88 0f       	add	r24, r24
     8d0:	80 7e       	andi	r24, 0xE0	; 224
     8d2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     8d6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
     8da:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if(packet.length == 9)
     8de:	82 81       	ldd	r24, Z+2	; 0x02
     8e0:	89 30       	cpi	r24, 0x09	; 9
     8e2:	19 f0       	breq	.+6      	; 0x8ea <can_tx_kick+0x76>
			for (cnt=0; cnt < 8; ++cnt)
				CANMSG = packet.data[cnt];
		}
		else
		{
			for (cnt=0; cnt < packet.length; ++cnt)
     8e4:	81 11       	cpse	r24, r1
     8e6:	0d c0       	rjmp	.+26     	; 0x902 <can_tx_kick+0x8e>
     8e8:	33 c0       	rjmp	.+102    	; 0x950 <can_tx_kick+0xdc>
     8ea:	e4 e1       	ldi	r30, 0x14	; 20
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	2c e1       	ldi	r18, 0x1C	; 28
     8f0:	31 e0       	ldi	r19, 0x01	; 1
		CANIDT3 = 0;
		CANIDT4 = 0;
		if(packet.length == 9)
		{
			for (cnt=0; cnt < 8; ++cnt)
				CANMSG = packet.data[cnt];
     8f2:	aa ef       	ldi	r26, 0xFA	; 250
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	81 91       	ld	r24, Z+
     8f8:	8c 93       	st	X, r24
		CANIDT2=packet.id <<5;
		CANIDT3 = 0;
		CANIDT4 = 0;
		if(packet.length == 9)
		{
			for (cnt=0; cnt < 8; ++cnt)
     8fa:	e2 17       	cp	r30, r18
     8fc:	f3 07       	cpc	r31, r19
     8fe:	d9 f7       	brne	.-10     	; 0x8f6 <can_tx_kick+0x82>
     900:	27 c0       	rjmp	.+78     	; 0x950 <can_tx_kick+0xdc>
				CANMSG = packet.data[cnt];
		}
		else
		{
			for (cnt=0; cnt < packet.length; ++cnt)
     902:	80 e0       	ldi	r24, 0x00	; 0
				CANMSG = packet.data[cnt];
     904:	c1 e1       	ldi	r28, 0x11	; 17
     906:	d1 e0       	ldi	r29, 0x01	; 1
     908:	aa ef       	ldi	r26, 0xFA	; 250
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	e8 2f       	mov	r30, r24
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ef 5e       	subi	r30, 0xEF	; 239
     912:	fe 4f       	sbci	r31, 0xFE	; 254
     914:	93 81       	ldd	r25, Z+3	; 0x03
     916:	9c 93       	st	X, r25
			for (cnt=0; cnt < 8; ++cnt)
				CANMSG = packet.data[cnt];
		}
		else
		{
			for (cnt=0; cnt < packet.length; ++cnt)
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	9a 81       	ldd	r25, Y+2	; 0x02
     91c:	89 17       	cp	r24, r25
     91e:	b0 f3       	brcs	.-20     	; 0x90c <can_tx_kick+0x98>
     920:	17 c0       	rjmp	.+46     	; 0x950 <can_tx_kick+0xdc>
		}
	}

	else
	{
		CANIDT1=packet.id >>3;
     922:	e1 e1       	ldi	r30, 0x11	; 17
     924:	f1 e0       	ldi	r31, 0x01	; 1
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	96 95       	lsr	r25
     92c:	87 95       	ror	r24
     92e:	96 95       	lsr	r25
     930:	87 95       	ror	r24
     932:	96 95       	lsr	r25
     934:	87 95       	ror	r24
     936:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2=packet.id <<5;
     93a:	80 81       	ld	r24, Z
     93c:	82 95       	swap	r24
     93e:	88 0f       	add	r24, r24
     940:	80 7e       	andi	r24, 0xE0	; 224
     942:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     946:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 1<<RTRTAG;
     94a:	84 e0       	ldi	r24, 0x04	; 4
     94c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	}
	CANCDMOB = 0x40 + packet.length;
     950:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <packet.2191+0x2>
     954:	80 5c       	subi	r24, 0xC0	; 192
     956:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	return TRUE;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	01 c0       	rjmp	.+2      	; 0x960 <can_tx_kick+0xec>
	canlist[ mob]( &packet, mob); //if data remains in send buffer
	unsigned char cnt;
	CANPAGE = mob << 4;
	if(packet.length == 0)
	{
		return FALSE; //no data to send
     95e:	80 e0       	ldi	r24, 0x00	; 0
		CANIDT4 = 1<<RTRTAG;
	}
	CANCDMOB = 0x40 + packet.length;

	return TRUE;
}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <can_tx>:

BOOL can_tx( char mob,  CAN_packet *packet) //leaving this here for legacy
{
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	fb 01       	movw	r30, r22
	unsigned cnt;
	ASSERT( packet->id <= 0x7ff);
     96c:	20 81       	ld	r18, Z
     96e:	31 81       	ldd	r19, Z+1	; 0x01
     970:	21 15       	cp	r18, r1
     972:	38 40       	sbci	r19, 0x08	; 8
     974:	08 f0       	brcs	.+2      	; 0x978 <can_tx+0x12>
     976:	98 95       	break
	ASSERT( packet->length <=8);
     978:	92 81       	ldd	r25, Z+2	; 0x02
     97a:	99 30       	cpi	r25, 0x09	; 9
     97c:	08 f0       	brcs	.+2      	; 0x980 <can_tx+0x1a>
     97e:	98 95       	break
	ASSERT( mob <=14);
     980:	8f 30       	cpi	r24, 0x0F	; 15
     982:	08 f0       	brcs	.+2      	; 0x986 <can_tx+0x20>
     984:	98 95       	break
	CANPAGE = mob << 4;
     986:	82 95       	swap	r24
     988:	80 7f       	andi	r24, 0xF0	; 240
     98a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	if (
		(  CANCDMOB & 0b11000000) // if MOB in use
     98e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	ASSERT( packet->id <= 0x7ff);
	ASSERT( packet->length <=8);
	ASSERT( mob <=14);
	CANPAGE = mob << 4;

	if (
     992:	80 7c       	andi	r24, 0xC0	; 192
     994:	21 f0       	breq	.+8      	; 0x99e <can_tx+0x38>
		(  CANCDMOB & 0b11000000) // if MOB in use
		&&
		( (CANSTMOB & 0x40) ==0)   // TX not ready
     996:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	ASSERT( mob <=14);
	CANPAGE = mob << 4;

	if (
		(  CANCDMOB & 0b11000000) // if MOB in use
		&&
     99a:	86 ff       	sbrs	r24, 6
     99c:	49 c0       	rjmp	.+146    	; 0xa30 <can_tx+0xca>
		( (CANSTMOB & 0x40) ==0)   // TX not ready
	)
		return FALSE;

	CANSTMOB = 0x00;      // cancel pending operation
     99e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     9a2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	if( packet->length!=RTR)
     9a6:	82 81       	ldd	r24, Z+2	; 0x02
     9a8:	8f 3f       	cpi	r24, 0xFF	; 255
     9aa:	39 f1       	breq	.+78     	; 0x9fa <can_tx+0x94>
	{
		CANIDT1 = packet->id >>3;
     9ac:	80 81       	ld	r24, Z
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
     9b0:	96 95       	lsr	r25
     9b2:	87 95       	ror	r24
     9b4:	96 95       	lsr	r25
     9b6:	87 95       	ror	r24
     9b8:	96 95       	lsr	r25
     9ba:	87 95       	ror	r24
     9bc:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = packet->id <<5;
     9c0:	80 81       	ld	r24, Z
     9c2:	82 95       	swap	r24
     9c4:	88 0f       	add	r24, r24
     9c6:	80 7e       	andi	r24, 0xE0	; 224
     9c8:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     9cc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
     9d0:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		for (cnt=0; cnt < packet->length; ++cnt)
     9d4:	82 81       	ldd	r24, Z+2	; 0x02
     9d6:	88 23       	and	r24, r24
     9d8:	29 f1       	breq	.+74     	; 0xa24 <can_tx+0xbe>
     9da:	df 01       	movw	r26, r30
     9dc:	13 96       	adiw	r26, 0x03	; 3
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
			CANMSG = packet->data[cnt];
     9e2:	ca ef       	ldi	r28, 0xFA	; 250
     9e4:	d0 e0       	ldi	r29, 0x00	; 0
     9e6:	8d 91       	ld	r24, X+
     9e8:	88 83       	st	Y, r24
	{
		CANIDT1 = packet->id >>3;
		CANIDT2 = packet->id <<5;
		CANIDT3 = 0;
		CANIDT4 = 0;
		for (cnt=0; cnt < packet->length; ++cnt)
     9ea:	2f 5f       	subi	r18, 0xFF	; 255
     9ec:	3f 4f       	sbci	r19, 0xFF	; 255
     9ee:	82 81       	ldd	r24, Z+2	; 0x02
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	28 17       	cp	r18, r24
     9f4:	39 07       	cpc	r19, r25
     9f6:	b8 f3       	brcs	.-18     	; 0x9e6 <can_tx+0x80>
     9f8:	15 c0       	rjmp	.+42     	; 0xa24 <can_tx+0xbe>
			CANMSG = packet->data[cnt];
	}
	else
	{
		CANIDT1 = packet->id >>3;
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	96 95       	lsr	r25
     a00:	87 95       	ror	r24
     a02:	96 95       	lsr	r25
     a04:	87 95       	ror	r24
     a06:	96 95       	lsr	r25
     a08:	87 95       	ror	r24
     a0a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = packet->id <<5;
     a0e:	80 81       	ld	r24, Z
     a10:	82 95       	swap	r24
     a12:	88 0f       	add	r24, r24
     a14:	80 7e       	andi	r24, 0xE0	; 224
     a16:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     a1a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 1<<RTRTAG;
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	}
	CANCDMOB = 0x40 + packet->length;
     a24:	82 81       	ldd	r24, Z+2	; 0x02
     a26:	80 5c       	subi	r24, 0xC0	; 192
     a28:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	return TRUE;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <can_tx+0xcc>
	if (
		(  CANCDMOB & 0b11000000) // if MOB in use
		&&
		( (CANSTMOB & 0x40) ==0)   // TX not ready
	)
		return FALSE;
     a30:	80 e0       	ldi	r24, 0x00	; 0
		CANIDT4 = 1<<RTRTAG;
	}
	CANCDMOB = 0x40 + packet->length;

	return TRUE;
}
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <prepare_rx>:

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
     a38:	8f 30       	cpi	r24, 0x0F	; 15
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <prepare_rx+0x6>
     a3c:	6d c0       	rjmp	.+218    	; 0xb18 <prepare_rx+0xe0>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
     a3e:	e8 2f       	mov	r30, r24
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	ee 0f       	add	r30, r30
     a44:	ff 1f       	adc	r31, r31
     a46:	e4 5b       	subi	r30, 0xB4	; 180
     a48:	fd 4f       	sbci	r31, 0xFD	; 253
     a4a:	31 83       	std	Z+1, r19	; 0x01
     a4c:	20 83       	st	Z, r18

	CANPAGE = mob << 4;
     a4e:	98 2f       	mov	r25, r24
     a50:	92 95       	swap	r25
     a52:	90 7f       	andi	r25, 0xF0	; 240
     a54:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if( callback==0)      // release this MOB
     a58:	23 2b       	or	r18, r19
     a5a:	d9 f4       	brne	.+54     	; 0xa92 <prepare_rx+0x5a>
	{
		CANSTMOB = 0x00;      // cancel pending operation
     a5c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0x00;
     a60:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		unsigned mask=1<<mob;
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	a9 01       	movw	r20, r18
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <prepare_rx+0x38>
     a6c:	44 0f       	add	r20, r20
     a6e:	55 1f       	adc	r21, r21
     a70:	8a 95       	dec	r24
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <prepare_rx+0x34>
     a74:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
     a76:	ee ed       	ldi	r30, 0xDE	; 222
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	20 81       	ld	r18, Z
     a7c:	80 95       	com	r24
     a7e:	82 23       	and	r24, r18
     a80:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
     a82:	ef ed       	ldi	r30, 0xDF	; 223
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	90 95       	com	r25
     a8a:	89 23       	and	r24, r25
     a8c:	80 83       	st	Z, r24
		return FALSE;
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	08 95       	ret
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
     a92:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     a96:	90 7c       	andi	r25, 0xC0	; 192
     a98:	09 f0       	breq	.+2      	; 0xa9c <prepare_rx+0x64>
     a9a:	40 c0       	rjmp	.+128    	; 0xb1c <prepare_rx+0xe4>
		return TRUE;      // no vacancy ...
	CANSTMOB = 0x00;      // cancel pending operation
     a9c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     aa0:	ef ee       	ldi	r30, 0xEF	; 239
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	10 82       	st	Z, r1
	CANHPMOB = 0x00;    // enable direct mob indexing, see docu
     aa6:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANIDT1=id >>3;
     aaa:	9b 01       	movw	r18, r22
     aac:	36 95       	lsr	r19
     aae:	27 95       	ror	r18
     ab0:	36 95       	lsr	r19
     ab2:	27 95       	ror	r18
     ab4:	36 95       	lsr	r19
     ab6:	27 95       	ror	r18
     ab8:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2=id <<5;
     abc:	62 95       	swap	r22
     abe:	66 0f       	add	r22, r22
     ac0:	60 7e       	andi	r22, 0xE0	; 224
     ac2:	60 93 f2 00 	sts	0x00F2, r22	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDM1=idmask >>3;
     ac6:	9a 01       	movw	r18, r20
     ac8:	36 95       	lsr	r19
     aca:	27 95       	ror	r18
     acc:	36 95       	lsr	r19
     ace:	27 95       	ror	r18
     ad0:	36 95       	lsr	r19
     ad2:	27 95       	ror	r18
     ad4:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2=idmask <<5;
     ad8:	42 95       	swap	r20
     ada:	44 0f       	add	r20, r20
     adc:	40 7e       	andi	r20, 0xE0	; 224
     ade:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM3=0;
     ae2:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM4=0;
     ae6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANCDMOB=0x80; // enable RX
     aea:	90 e8       	ldi	r25, 0x80	; 128
     aec:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	a9 01       	movw	r20, r18
     af4:	02 c0       	rjmp	.+4      	; 0xafa <prepare_rx+0xc2>
     af6:	44 0f       	add	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	8a 95       	dec	r24
     afc:	e2 f7       	brpl	.-8      	; 0xaf6 <prepare_rx+0xbe>
     afe:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
     b00:	ee ed       	ldi	r30, 0xDE	; 222
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	20 81       	ld	r18, Z
     b06:	82 2b       	or	r24, r18
     b08:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
     b0a:	ef ed       	ldi	r30, 0xDF	; 223
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	89 2b       	or	r24, r25
     b12:	80 83       	st	Z, r24
	return FALSE;
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	08 95       	ret
}

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
		return TRUE;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
		return TRUE;      // no vacancy ...
     b1c:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return FALSE;
}
     b1e:	08 95       	ret

00000b20 <prepare_tx>:

BOOL prepare_tx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
     b20:	8f 30       	cpi	r24, 0x0F	; 15
     b22:	08 f0       	brcs	.+2      	; 0xb26 <prepare_tx+0x6>
     b24:	49 c0       	rjmp	.+146    	; 0xbb8 <prepare_tx+0x98>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
     b26:	e8 2f       	mov	r30, r24
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	e4 5b       	subi	r30, 0xB4	; 180
     b30:	fd 4f       	sbci	r31, 0xFD	; 253
     b32:	31 83       	std	Z+1, r19	; 0x01
     b34:	20 83       	st	Z, r18

	CANPAGE = mob << 4;
     b36:	98 2f       	mov	r25, r24
     b38:	92 95       	swap	r25
     b3a:	90 7f       	andi	r25, 0xF0	; 240
     b3c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if( callback==0)      // release this MOB
     b40:	23 2b       	or	r18, r19
     b42:	d9 f4       	brne	.+54     	; 0xb7a <prepare_tx+0x5a>
	{
		CANSTMOB = 0x00;      // cancel pending operation
     b44:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0x00;
     b48:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		unsigned mask=1<<mob;
     b4c:	21 e0       	ldi	r18, 0x01	; 1
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	a9 01       	movw	r20, r18
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <prepare_tx+0x38>
     b54:	44 0f       	add	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	8a 95       	dec	r24
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <prepare_tx+0x34>
     b5c:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
     b5e:	ee ed       	ldi	r30, 0xDE	; 222
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	20 81       	ld	r18, Z
     b64:	80 95       	com	r24
     b66:	82 23       	and	r24, r18
     b68:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
     b6a:	ef ed       	ldi	r30, 0xDF	; 223
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	90 95       	com	r25
     b72:	89 23       	and	r24, r25
     b74:	80 83       	st	Z, r24
		return FALSE;
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	08 95       	ret
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
     b7a:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     b7e:	90 7c       	andi	r25, 0xC0	; 192
     b80:	e9 f4       	brne	.+58     	; 0xbbc <prepare_tx+0x9c>
		return FALSE;     // no vacancy ...
	CANSTMOB = 0x00;      // cancel pending operation
     b82:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     b86:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANHPMOB = 0x00;    // enable direct mob indexing, see docu
     b8a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	//CANIDT1=id >>3;
	//CANIDT2=id <<5;
	//CANCDMOB=0x40; // enable TX
	unsigned mask=1<<mob;
     b8e:	21 e0       	ldi	r18, 0x01	; 1
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	a9 01       	movw	r20, r18
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <prepare_tx+0x7a>
     b96:	44 0f       	add	r20, r20
     b98:	55 1f       	adc	r21, r21
     b9a:	8a 95       	dec	r24
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <prepare_tx+0x76>
     b9e:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
     ba0:	ee ed       	ldi	r30, 0xDE	; 222
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	20 81       	ld	r18, Z
     ba6:	82 2b       	or	r24, r18
     ba8:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
     baa:	ef ed       	ldi	r30, 0xDF	; 223
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	89 2b       	or	r24, r25
     bb2:	80 83       	st	Z, r24
	return TRUE;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	08 95       	ret
}

BOOL prepare_tx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15)        // illegal MOB number
		return TRUE;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
	}
	if( CANCDMOB & 0b11000000)  // if MOB already in use
		return FALSE;     // no vacancy ...
     bbc:	80 e0       	ldi	r24, 0x00	; 0
	//CANCDMOB=0x40; // enable TX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return TRUE;
}
     bbe:	08 95       	ret

00000bc0 <can_init>:

void can_init( void)
{
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
	unsigned mob;
#ifdef BAUD_500K
	CANBT1=0x02;  // 16 MHz, 500kbit/s
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2=0x0C;
     bca:	8c e0       	ldi	r24, 0x0C	; 12
     bcc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3=0x37;
     bd0:	87 e3       	ldi	r24, 0x37	; 55
     bd2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
	CANBT3=0x36;
#endif

	for (mob = 0; mob < NO_MOBS; mob++)
	{
		CANPAGE  = (mob << 4);
     bd8:	cd ee       	ldi	r28, 0xED	; 237
     bda:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
     bdc:	ae ee       	ldi	r26, 0xEE	; 238
     bde:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
     be0:	ef ee       	ldi	r30, 0xEF	; 239
     be2:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT3=0x36;
#endif

	for (mob = 0; mob < NO_MOBS; mob++)
	{
		CANPAGE  = (mob << 4);
     be4:	98 2f       	mov	r25, r24
     be6:	92 95       	swap	r25
     be8:	90 7f       	andi	r25, 0xF0	; 240
     bea:	98 83       	st	Y, r25
		CANSTMOB = 0;
     bec:	1c 92       	st	X, r1
		CANCDMOB = 0;
     bee:	10 82       	st	Z, r1
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
	CANBT1=0x00;  // 16 MHz, 1000kbit/s
	CANBT2=0x0C;
	CANBT3=0x36;
#endif

	for (mob = 0; mob < NO_MOBS; mob++)
     bf2:	8f 30       	cpi	r24, 0x0F	; 15
     bf4:	b9 f7       	brne	.-18     	; 0xbe4 <can_init+0x24>
	{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
	}
	CANGCON |= 0x02;
     bf6:	e8 ed       	ldi	r30, 0xD8	; 216
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	82 60       	ori	r24, 0x02	; 2
     bfe:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX) | (1<< ENTX);
     c00:	80 eb       	ldi	r24, 0xB0	; 176
     c02:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
}
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <setCANFTdata>:
void Send_buffer_flush(struct ringBufSCAN* _this, const int clearBuffer) {
	_this->count = 0;
	_this->head = 0;
	_this->tail = 0;
	if (clearBuffer) {
		memset(_this->buf, 0, sizeof (_this->buf));
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <receiveArrayAddressCAN>
     c14:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <receiveArrayAddressCAN+0x1>
     c18:	e8 0f       	add	r30, r24
     c1a:	f9 1f       	adc	r31, r25
     c1c:	71 83       	std	Z+1, r23	; 0x01
     c1e:	60 83       	st	Z, r22
     c20:	fc 01       	movw	r30, r24
     c22:	e1 5c       	subi	r30, 0xC1	; 193
     c24:	fa 4f       	sbci	r31, 0xFA	; 250
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	31 83       	std	Z+1, r19	; 0x01
     c2c:	20 83       	st	Z, r18
     c2e:	08 95       	ret

00000c30 <getCANFTdata>:
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <receiveArrayAddressCAN>
     c38:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <receiveArrayAddressCAN+0x1>
     c3c:	e8 0f       	add	r30, r24
     c3e:	f9 1f       	adc	r31, r25
     c40:	80 81       	ld	r24, Z
     c42:	91 81       	ldd	r25, Z+1	; 0x01
     c44:	08 95       	ret

00000c46 <getCANFT_RFlag>:
     c46:	fc 01       	movw	r30, r24
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	e1 5c       	subi	r30, 0xC1	; 193
     c4e:	fa 4f       	sbci	r31, 0xFA	; 250
     c50:	20 81       	ld	r18, Z
     c52:	31 81       	ldd	r19, Z+1	; 0x01
     c54:	23 2b       	or	r18, r19
     c56:	49 f0       	breq	.+18     	; 0xc6a <getCANFT_RFlag+0x24>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	fc 01       	movw	r30, r24
     c5e:	e1 5c       	subi	r30, 0xC1	; 193
     c60:	fa 4f       	sbci	r31, 0xFA	; 250
     c62:	11 82       	std	Z+1, r1	; 0x01
     c64:	10 82       	st	Z, r1
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	08 95       	ret
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <Send_buffer_put>:
     c6e:	fc 01       	movw	r30, r24
     c70:	ec 5a       	subi	r30, 0xAC	; 172
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	20 81       	ld	r18, Z
     c76:	31 81       	ldd	r19, Z+1	; 0x01
     c78:	25 32       	cpi	r18, 0x25	; 37
     c7a:	31 05       	cpc	r19, r1
     c7c:	8c f5       	brge	.+98     	; 0xce0 <Send_buffer_put+0x72>
     c7e:	34 97       	sbiw	r30, 0x04	; 4
     c80:	01 90       	ld	r0, Z+
     c82:	f0 81       	ld	r31, Z
     c84:	e0 2d       	mov	r30, r0
     c86:	df 01       	movw	r26, r30
     c88:	aa 0f       	add	r26, r26
     c8a:	bb 1f       	adc	r27, r27
     c8c:	a8 0f       	add	r26, r24
     c8e:	b9 1f       	adc	r27, r25
     c90:	6d 93       	st	X+, r22
     c92:	7c 93       	st	X, r23
     c94:	bf 01       	movw	r22, r30
     c96:	6f 5f       	subi	r22, 0xFF	; 255
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	68 32       	cpi	r22, 0x28	; 40
     c9c:	71 05       	cpc	r23, r1
     c9e:	d0 f4       	brcc	.+52     	; 0xcd4 <Send_buffer_put+0x66>
     ca0:	66 0f       	add	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	dc 01       	movw	r26, r24
     ca6:	a6 0f       	add	r26, r22
     ca8:	b7 1f       	adc	r27, r23
     caa:	4d 93       	st	X+, r20
     cac:	5c 93       	st	X, r21
     cae:	32 96       	adiw	r30, 0x02	; 2
     cb0:	e8 32       	cpi	r30, 0x28	; 40
     cb2:	f1 05       	cpc	r31, r1
     cb4:	10 f0       	brcs	.+4      	; 0xcba <Send_buffer_put+0x4c>
     cb6:	e0 e0       	ldi	r30, 0x00	; 0
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	dc 01       	movw	r26, r24
     cbc:	a0 5b       	subi	r26, 0xB0	; 176
     cbe:	bf 4f       	sbci	r27, 0xFF	; 255
     cc0:	ed 93       	st	X+, r30
     cc2:	fc 93       	st	X, r31
     cc4:	fc 01       	movw	r30, r24
     cc6:	ec 5a       	subi	r30, 0xAC	; 172
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	2e 5f       	subi	r18, 0xFE	; 254
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	31 83       	std	Z+1, r19	; 0x01
     cd0:	20 83       	st	Z, r18
     cd2:	08 95       	ret
     cd4:	fc 01       	movw	r30, r24
     cd6:	51 83       	std	Z+1, r21	; 0x01
     cd8:	40 83       	st	Z, r20
     cda:	e1 e0       	ldi	r30, 0x01	; 1
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	ed cf       	rjmp	.-38     	; 0xcba <Send_buffer_put+0x4c>
     ce0:	08 95       	ret

00000ce2 <ReceiveCANFast>:
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ec 01       	movw	r28, r24
     ce8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <receiveMode>
     cec:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <receiveMode+0x1>
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <ReceiveCANFast+0x14>
     cf4:	73 c0       	rjmp	.+230    	; 0xddc <ReceiveCANFast+0xfa>
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	88 50       	subi	r24, 0x08	; 8
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <ReceiveCANFast+0x1e>
     cfe:	46 c0       	rjmp	.+140    	; 0xd8c <ReceiveCANFast+0xaa>
     d00:	6b 81       	ldd	r22, Y+3	; 0x03
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	76 2f       	mov	r23, r22
     d06:	66 27       	eor	r22, r22
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	68 0f       	add	r22, r24
     d0c:	71 1d       	adc	r23, r1
     d0e:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <MaxIndex>
     d12:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <MaxIndex+0x1>
     d16:	68 17       	cp	r22, r24
     d18:	79 07       	cpc	r23, r25
     d1a:	80 f4       	brcc	.+32     	; 0xd3c <ReceiveCANFast+0x5a>
     d1c:	4d 81       	ldd	r20, Y+5	; 0x05
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	54 2f       	mov	r21, r20
     d22:	44 27       	eor	r20, r20
     d24:	8e 81       	ldd	r24, Y+6	; 0x06
     d26:	48 0f       	add	r20, r24
     d28:	51 1d       	adc	r21, r1
     d2a:	89 ee       	ldi	r24, 0xE9	; 233
     d2c:	94 e0       	ldi	r25, 0x04	; 4
     d2e:	9f df       	rcall	.-194    	; 0xc6e <Send_buffer_put>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ReceivedData+0x1>
     d38:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ReceivedData>
     d3c:	6f 81       	ldd	r22, Y+7	; 0x07
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	76 2f       	mov	r23, r22
     d42:	66 27       	eor	r22, r22
     d44:	88 85       	ldd	r24, Y+8	; 0x08
     d46:	68 0f       	add	r22, r24
     d48:	71 1d       	adc	r23, r1
     d4a:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <MaxIndex>
     d4e:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <MaxIndex+0x1>
     d52:	68 17       	cp	r22, r24
     d54:	79 07       	cpc	r23, r25
     d56:	80 f4       	brcc	.+32     	; 0xd78 <ReceiveCANFast+0x96>
     d58:	49 85       	ldd	r20, Y+9	; 0x09
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	54 2f       	mov	r21, r20
     d5e:	44 27       	eor	r20, r20
     d60:	8a 85       	ldd	r24, Y+10	; 0x0a
     d62:	48 0f       	add	r20, r24
     d64:	51 1d       	adc	r21, r1
     d66:	89 ee       	ldi	r24, 0xE9	; 233
     d68:	94 e0       	ldi	r25, 0x04	; 4
     d6a:	81 df       	rcall	.-254    	; 0xc6e <Send_buffer_put>
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ReceivedData+0x1>
     d74:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ReceivedData>
     d78:	48 81       	ld	r20, Y
     d7a:	59 81       	ldd	r21, Y+1	; 0x01
     d7c:	4f 71       	andi	r20, 0x1F	; 31
     d7e:	55 27       	eor	r21, r21
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	89 ee       	ldi	r24, 0xE9	; 233
     d86:	94 e0       	ldi	r25, 0x04	; 4
     d88:	72 df       	rcall	.-284    	; 0xc6e <Send_buffer_put>
     d8a:	88 c0       	rjmp	.+272    	; 0xe9c <ReceiveCANFast+0x1ba>
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	76 2f       	mov	r23, r22
     d92:	66 27       	eor	r22, r22
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	68 0f       	add	r22, r24
     d98:	71 1d       	adc	r23, r1
     d9a:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <MaxIndex>
     d9e:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <MaxIndex+0x1>
     da2:	68 17       	cp	r22, r24
     da4:	79 07       	cpc	r23, r25
     da6:	80 f4       	brcc	.+32     	; 0xdc8 <ReceiveCANFast+0xe6>
     da8:	4d 81       	ldd	r20, Y+5	; 0x05
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	54 2f       	mov	r21, r20
     dae:	44 27       	eor	r20, r20
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	48 0f       	add	r20, r24
     db4:	51 1d       	adc	r21, r1
     db6:	89 ee       	ldi	r24, 0xE9	; 233
     db8:	94 e0       	ldi	r25, 0x04	; 4
     dba:	59 df       	rcall	.-334    	; 0xc6e <Send_buffer_put>
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ReceivedData+0x1>
     dc4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ReceivedData>
     dc8:	48 81       	ld	r20, Y
     dca:	59 81       	ldd	r21, Y+1	; 0x01
     dcc:	4f 71       	andi	r20, 0x1F	; 31
     dce:	55 27       	eor	r21, r21
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	89 ee       	ldi	r24, 0xE9	; 233
     dd6:	94 e0       	ldi	r25, 0x04	; 4
     dd8:	4a df       	rcall	.-364    	; 0xc6e <Send_buffer_put>
     dda:	60 c0       	rjmp	.+192    	; 0xe9c <ReceiveCANFast+0x1ba>
     ddc:	68 81       	ld	r22, Y
     dde:	79 81       	ldd	r23, Y+1	; 0x01
     de0:	6f 71       	andi	r22, 0x1F	; 31
     de2:	77 27       	eor	r23, r23
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	11 df       	rcall	.-478    	; 0xc0c <setCANFTdata>
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	88 50       	subi	r24, 0x08	; 8
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	c8 f5       	brcc	.+114    	; 0xe64 <ReceiveCANFast+0x182>
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	98 2f       	mov	r25, r24
     df8:	88 27       	eor	r24, r24
     dfa:	2c 81       	ldd	r18, Y+4	; 0x04
     dfc:	82 0f       	add	r24, r18
     dfe:	91 1d       	adc	r25, r1
     e00:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <MaxIndex>
     e04:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <MaxIndex+0x1>
     e08:	82 17       	cp	r24, r18
     e0a:	93 07       	cpc	r25, r19
     e0c:	70 f4       	brcc	.+28     	; 0xe2a <ReceiveCANFast+0x148>
     e0e:	6d 81       	ldd	r22, Y+5	; 0x05
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	76 2f       	mov	r23, r22
     e14:	66 27       	eor	r22, r22
     e16:	2e 81       	ldd	r18, Y+6	; 0x06
     e18:	62 0f       	add	r22, r18
     e1a:	71 1d       	adc	r23, r1
     e1c:	f7 de       	rcall	.-530    	; 0xc0c <setCANFTdata>
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ReceivedData+0x1>
     e26:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ReceivedData>
     e2a:	8f 81       	ldd	r24, Y+7	; 0x07
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	98 2f       	mov	r25, r24
     e30:	88 27       	eor	r24, r24
     e32:	28 85       	ldd	r18, Y+8	; 0x08
     e34:	82 0f       	add	r24, r18
     e36:	91 1d       	adc	r25, r1
     e38:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <MaxIndex>
     e3c:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <MaxIndex+0x1>
     e40:	82 17       	cp	r24, r18
     e42:	93 07       	cpc	r25, r19
     e44:	58 f5       	brcc	.+86     	; 0xe9c <ReceiveCANFast+0x1ba>
     e46:	69 85       	ldd	r22, Y+9	; 0x09
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	76 2f       	mov	r23, r22
     e4c:	66 27       	eor	r22, r22
     e4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     e50:	62 0f       	add	r22, r18
     e52:	71 1d       	adc	r23, r1
     e54:	db de       	rcall	.-586    	; 0xc0c <setCANFTdata>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ReceivedData+0x1>
     e5e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ReceivedData>
     e62:	1c c0       	rjmp	.+56     	; 0xe9c <ReceiveCANFast+0x1ba>
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	98 2f       	mov	r25, r24
     e6a:	88 27       	eor	r24, r24
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	82 0f       	add	r24, r18
     e70:	91 1d       	adc	r25, r1
     e72:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <MaxIndex>
     e76:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <MaxIndex+0x1>
     e7a:	82 17       	cp	r24, r18
     e7c:	93 07       	cpc	r25, r19
     e7e:	70 f4       	brcc	.+28     	; 0xe9c <ReceiveCANFast+0x1ba>
     e80:	6d 81       	ldd	r22, Y+5	; 0x05
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	76 2f       	mov	r23, r22
     e86:	66 27       	eor	r22, r22
     e88:	2e 81       	ldd	r18, Y+6	; 0x06
     e8a:	62 0f       	add	r22, r18
     e8c:	71 1d       	adc	r23, r1
     e8e:	be de       	rcall	.-644    	; 0xc0c <setCANFTdata>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ReceivedData+0x1>
     e98:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ReceivedData>
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <ToSendCAN>:
     ea2:	ab 01       	movw	r20, r22
     ea4:	bc 01       	movw	r22, r24
     ea6:	8b e3       	ldi	r24, 0x3B	; 59
     ea8:	94 e0       	ldi	r25, 0x04	; 4
     eaa:	e1 ce       	rjmp	.-574    	; 0xc6e <Send_buffer_put>
     eac:	08 95       	ret

00000eae <Transmit_buffer_put>:
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	fc 01       	movw	r30, r24
     eb8:	e8 54       	subi	r30, 0x48	; 72
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	01 90       	ld	r0, Z+
     ebe:	f0 81       	ld	r31, Z
     ec0:	e0 2d       	mov	r30, r0
     ec2:	e7 35       	cpi	r30, 0x57	; 87
     ec4:	f1 05       	cpc	r31, r1
     ec6:	0c f0       	brlt	.+2      	; 0xeca <Transmit_buffer_put+0x1c>
     ec8:	55 c0       	rjmp	.+170    	; 0xf74 <Transmit_buffer_put+0xc6>
     eca:	dc 01       	movw	r26, r24
     ecc:	ac 54       	subi	r26, 0x4C	; 76
     ece:	bf 4f       	sbci	r27, 0xFF	; 255
     ed0:	0d 90       	ld	r0, X+
     ed2:	bc 91       	ld	r27, X
     ed4:	a0 2d       	mov	r26, r0
     ed6:	ed 01       	movw	r28, r26
     ed8:	cc 0f       	add	r28, r28
     eda:	dd 1f       	adc	r29, r29
     edc:	c8 0f       	add	r28, r24
     ede:	d9 1f       	adc	r29, r25
     ee0:	79 83       	std	Y+1, r23	; 0x01
     ee2:	68 83       	st	Y, r22
     ee4:	bd 01       	movw	r22, r26
     ee6:	6f 5f       	subi	r22, 0xFF	; 255
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	6a 35       	cpi	r22, 0x5A	; 90
     eec:	71 05       	cpc	r23, r1
     eee:	88 f5       	brcc	.+98     	; 0xf52 <Transmit_buffer_put+0xa4>
     ef0:	ec 01       	movw	r28, r24
     ef2:	cc 54       	subi	r28, 0x4C	; 76
     ef4:	df 4f       	sbci	r29, 0xFF	; 255
     ef6:	79 83       	std	Y+1, r23	; 0x01
     ef8:	68 83       	st	Y, r22
     efa:	24 96       	adiw	r28, 0x04	; 4
     efc:	8f 01       	movw	r16, r30
     efe:	0f 5f       	subi	r16, 0xFF	; 255
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	19 83       	std	Y+1, r17	; 0x01
     f04:	08 83       	st	Y, r16
     f06:	66 0f       	add	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	ec 01       	movw	r28, r24
     f0c:	c6 0f       	add	r28, r22
     f0e:	d7 1f       	adc	r29, r23
     f10:	59 83       	std	Y+1, r21	; 0x01
     f12:	48 83       	st	Y, r20
     f14:	ad 01       	movw	r20, r26
     f16:	4e 5f       	subi	r20, 0xFE	; 254
     f18:	5f 4f       	sbci	r21, 0xFF	; 255
     f1a:	4a 35       	cpi	r20, 0x5A	; 90
     f1c:	51 05       	cpc	r21, r1
     f1e:	20 f5       	brcc	.+72     	; 0xf68 <Transmit_buffer_put+0xba>
     f20:	44 0f       	add	r20, r20
     f22:	55 1f       	adc	r21, r21
     f24:	ec 01       	movw	r28, r24
     f26:	c4 0f       	add	r28, r20
     f28:	d5 1f       	adc	r29, r21
     f2a:	39 83       	std	Y+1, r19	; 0x01
     f2c:	28 83       	st	Y, r18
     f2e:	13 96       	adiw	r26, 0x03	; 3
     f30:	aa 35       	cpi	r26, 0x5A	; 90
     f32:	b1 05       	cpc	r27, r1
     f34:	10 f0       	brcs	.+4      	; 0xf3a <Transmit_buffer_put+0x8c>
     f36:	a0 e0       	ldi	r26, 0x00	; 0
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ec 01       	movw	r28, r24
     f3c:	cc 54       	subi	r28, 0x4C	; 76
     f3e:	df 4f       	sbci	r29, 0xFF	; 255
     f40:	b9 83       	std	Y+1, r27	; 0x01
     f42:	a8 83       	st	Y, r26
     f44:	dc 01       	movw	r26, r24
     f46:	a8 54       	subi	r26, 0x48	; 72
     f48:	bf 4f       	sbci	r27, 0xFF	; 255
     f4a:	33 96       	adiw	r30, 0x03	; 3
     f4c:	ed 93       	st	X+, r30
     f4e:	fc 93       	st	X, r31
     f50:	11 c0       	rjmp	.+34     	; 0xf74 <Transmit_buffer_put+0xc6>
     f52:	dc 01       	movw	r26, r24
     f54:	11 96       	adiw	r26, 0x01	; 1
     f56:	5c 93       	st	X, r21
     f58:	4e 93       	st	-X, r20
     f5a:	13 96       	adiw	r26, 0x03	; 3
     f5c:	3c 93       	st	X, r19
     f5e:	2e 93       	st	-X, r18
     f60:	12 97       	sbiw	r26, 0x02	; 2
     f62:	a2 e0       	ldi	r26, 0x02	; 2
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e9 cf       	rjmp	.-46     	; 0xf3a <Transmit_buffer_put+0x8c>
     f68:	dc 01       	movw	r26, r24
     f6a:	2d 93       	st	X+, r18
     f6c:	3c 93       	st	X, r19
     f6e:	a1 e0       	ldi	r26, 0x01	; 1
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e3 cf       	rjmp	.-58     	; 0xf3a <Transmit_buffer_put+0x8c>
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <Send_buffer_get>:
     f7e:	fc 01       	movw	r30, r24
     f80:	ec 5a       	subi	r30, 0xAC	; 172
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	40 81       	ld	r20, Z
     f86:	51 81       	ldd	r21, Z+1	; 0x01
     f88:	14 16       	cp	r1, r20
     f8a:	15 06       	cpc	r1, r21
     f8c:	e4 f4       	brge	.+56     	; 0xfc6 <Send_buffer_get+0x48>
     f8e:	32 97       	sbiw	r30, 0x02	; 2
     f90:	20 81       	ld	r18, Z
     f92:	31 81       	ldd	r19, Z+1	; 0x01
     f94:	f9 01       	movw	r30, r18
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	e8 0f       	add	r30, r24
     f9c:	f9 1f       	adc	r31, r25
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	28 32       	cpi	r18, 0x28	; 40
     fa8:	31 05       	cpc	r19, r1
     faa:	10 f0       	brcs	.+4      	; 0xfb0 <Send_buffer_get+0x32>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	fc 01       	movw	r30, r24
     fb2:	ee 5a       	subi	r30, 0xAE	; 174
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	31 83       	std	Z+1, r19	; 0x01
     fb8:	20 83       	st	Z, r18
     fba:	32 96       	adiw	r30, 0x02	; 2
     fbc:	41 50       	subi	r20, 0x01	; 1
     fbe:	51 09       	sbc	r21, r1
     fc0:	51 83       	std	Z+1, r21	; 0x01
     fc2:	40 83       	st	Z, r20
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <Send_buffer_get+0x4c>
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	cb 01       	movw	r24, r22
     fcc:	08 95       	ret

00000fce <ReceiveDataCAN>:
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ReceivedData>
     fe2:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ReceivedData+0x1>
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	e1 f1       	breq	.+120    	; 0x1062 <ReceiveDataCAN+0x94>
     fea:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ReceivedData+0x1>
     fee:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ReceivedData>
     ff2:	c0 90 3d 05 	lds	r12, 0x053D	; 0x80053d <ReceiveBuffer+0x54>
     ff6:	d0 90 3e 05 	lds	r13, 0x053E	; 0x80053e <ReceiveBuffer+0x55>
     ffa:	c1 14       	cp	r12, r1
     ffc:	d1 04       	cpc	r13, r1
     ffe:	21 f0       	breq	.+8      	; 0x1008 <ReceiveDataCAN+0x3a>
    1000:	7c f4       	brge	.+30     	; 0x1020 <ReceiveDataCAN+0x52>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	2d c0       	rjmp	.+90     	; 0x1062 <ReceiveDataCAN+0x94>
    1008:	31 e0       	ldi	r19, 0x01	; 1
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <receiveMode>
    1010:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <receiveMode+0x1>
    1014:	89 2b       	or	r24, r25
    1016:	09 f0       	breq	.+2      	; 0x101a <ReceiveDataCAN+0x4c>
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	83 2f       	mov	r24, r19
    101c:	92 2f       	mov	r25, r18
    101e:	21 c0       	rjmp	.+66     	; 0x1062 <ReceiveDataCAN+0x94>
    1020:	ee 24       	eor	r14, r14
    1022:	e3 94       	inc	r14
    1024:	f1 2c       	mov	r15, r1
    1026:	89 ee       	ldi	r24, 0xE9	; 233
    1028:	94 e0       	ldi	r25, 0x04	; 4
    102a:	a9 df       	rcall	.-174    	; 0xf7e <Send_buffer_get>
    102c:	ec 01       	movw	r28, r24
    102e:	cc 0f       	add	r28, r28
    1030:	dd 1f       	adc	r29, r29
    1032:	00 91 91 04 	lds	r16, 0x0491	; 0x800491 <receiveArrayAddressCAN>
    1036:	10 91 92 04 	lds	r17, 0x0492	; 0x800492 <receiveArrayAddressCAN+0x1>
    103a:	0c 0f       	add	r16, r28
    103c:	1d 1f       	adc	r17, r29
    103e:	89 ee       	ldi	r24, 0xE9	; 233
    1040:	94 e0       	ldi	r25, 0x04	; 4
    1042:	9d df       	rcall	.-198    	; 0xf7e <Send_buffer_get>
    1044:	f8 01       	movw	r30, r16
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
    104a:	c1 5c       	subi	r28, 0xC1	; 193
    104c:	da 4f       	sbci	r29, 0xFA	; 250
    104e:	f9 82       	std	Y+1, r15	; 0x01
    1050:	e8 82       	st	Y, r14
    1052:	f2 e0       	ldi	r31, 0x02	; 2
    1054:	cf 1a       	sub	r12, r31
    1056:	d1 08       	sbc	r13, r1
    1058:	1c 14       	cp	r1, r12
    105a:	1d 04       	cpc	r1, r13
    105c:	24 f3       	brlt	.-56     	; 0x1026 <ReceiveDataCAN+0x58>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	08 95       	ret

00001074 <sendDataCAN>:
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	6c 01       	movw	r12, r24
    108a:	a0 90 22 03 	lds	r10, 0x0322	; 0x800322 <TransmitBuffer+0xb8>
    108e:	b0 90 23 03 	lds	r11, 0x0323	; 0x800323 <TransmitBuffer+0xb9>
    1092:	e0 90 8f 04 	lds	r14, 0x048F	; 0x80048f <ring_buffer_CAN+0x54>
    1096:	f0 90 90 04 	lds	r15, 0x0490	; 0x800490 <ring_buffer_CAN+0x55>
    109a:	f5 94       	asr	r15
    109c:	e7 94       	ror	r14
    109e:	1e 14       	cp	r1, r14
    10a0:	1f 04       	cpc	r1, r15
    10a2:	9c f4       	brge	.+38     	; 0x10ca <sendDataCAN+0x56>
    10a4:	c0 e0       	ldi	r28, 0x00	; 0
    10a6:	d0 e0       	ldi	r29, 0x00	; 0
    10a8:	8b e3       	ldi	r24, 0x3B	; 59
    10aa:	94 e0       	ldi	r25, 0x04	; 4
    10ac:	68 df       	rcall	.-304    	; 0xf7e <Send_buffer_get>
    10ae:	8c 01       	movw	r16, r24
    10b0:	8b e3       	ldi	r24, 0x3B	; 59
    10b2:	94 e0       	ldi	r25, 0x04	; 4
    10b4:	64 df       	rcall	.-312    	; 0xf7e <Send_buffer_get>
    10b6:	9c 01       	movw	r18, r24
    10b8:	a8 01       	movw	r20, r16
    10ba:	b6 01       	movw	r22, r12
    10bc:	8a e6       	ldi	r24, 0x6A	; 106
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	f6 de       	rcall	.-532    	; 0xeae <Transmit_buffer_put>
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	ec 16       	cp	r14, r28
    10c6:	fd 06       	cpc	r15, r29
    10c8:	79 f7       	brne	.-34     	; 0x10a8 <sendDataCAN+0x34>
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	a8 16       	cp	r10, r24
    10ce:	b1 04       	cpc	r11, r1
    10d0:	10 f4       	brcc	.+4      	; 0x10d6 <sendDataCAN+0x62>
    10d2:	8d e0       	ldi	r24, 0x0D	; 13
    10d4:	cf db       	rcall	.-2146   	; 0x874 <can_tx_kick>
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	bf 90       	pop	r11
    10e8:	af 90       	pop	r10
    10ea:	08 95       	ret

000010ec <Transmit_buffer_get>:
    10ec:	fc 01       	movw	r30, r24
    10ee:	e8 54       	subi	r30, 0x48	; 72
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	40 81       	ld	r20, Z
    10f4:	51 81       	ldd	r21, Z+1	; 0x01
    10f6:	14 16       	cp	r1, r20
    10f8:	15 06       	cpc	r1, r21
    10fa:	e4 f4       	brge	.+56     	; 0x1134 <__stack+0x35>
    10fc:	32 97       	sbiw	r30, 0x02	; 2
    10fe:	20 81       	ld	r18, Z
    1100:	31 81       	ldd	r19, Z+1	; 0x01
    1102:	f9 01       	movw	r30, r18
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	e8 0f       	add	r30, r24
    110a:	f9 1f       	adc	r31, r25
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	2f 5f       	subi	r18, 0xFF	; 255
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
    1114:	2a 35       	cpi	r18, 0x5A	; 90
    1116:	31 05       	cpc	r19, r1
    1118:	10 f0       	brcs	.+4      	; 0x111e <__stack+0x1f>
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	fc 01       	movw	r30, r24
    1120:	ea 54       	subi	r30, 0x4A	; 74
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	31 83       	std	Z+1, r19	; 0x01
    1126:	20 83       	st	Z, r18
    1128:	32 96       	adiw	r30, 0x02	; 2
    112a:	41 50       	subi	r20, 0x01	; 1
    112c:	51 09       	sbc	r21, r1
    112e:	51 83       	std	Z+1, r21	; 0x01
    1130:	40 83       	st	Z, r20
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <__stack+0x39>
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	cb 01       	movw	r24, r22
    113a:	08 95       	ret

0000113c <Transmit_buffer_peek>:
    113c:	fc 01       	movw	r30, r24
    113e:	e8 54       	subi	r30, 0x48	; 72
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	20 81       	ld	r18, Z
    1144:	31 81       	ldd	r19, Z+1	; 0x01
    1146:	12 16       	cp	r1, r18
    1148:	13 06       	cpc	r1, r19
    114a:	5c f4       	brge	.+22     	; 0x1162 <Transmit_buffer_peek+0x26>
    114c:	32 97       	sbiw	r30, 0x02	; 2
    114e:	01 90       	ld	r0, Z+
    1150:	f0 81       	ld	r31, Z
    1152:	e0 2d       	mov	r30, r0
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	e8 0f       	add	r30, r24
    115a:	f9 1f       	adc	r31, r25
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	08 95       	ret
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	08 95       	ret

00001168 <Transmit_buffer_flush>:
	}
}

void Transmit_buffer_flush(struct ringBufTRANSMIT* _this, const int clearBuffer) {
	_this->count = 0;
    1168:	fc 01       	movw	r30, r24
    116a:	e8 54       	subi	r30, 0x48	; 72
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	11 82       	std	Z+1, r1	; 0x01
    1170:	10 82       	st	Z, r1
	_this->head = 0;
    1172:	34 97       	sbiw	r30, 0x04	; 4
    1174:	11 82       	std	Z+1, r1	; 0x01
    1176:	10 82       	st	Z, r1
	_this->tail = 0;
    1178:	32 96       	adiw	r30, 0x02	; 2
    117a:	11 82       	std	Z+1, r1	; 0x01
    117c:	10 82       	st	Z, r1
	if (clearBuffer) {
    117e:	67 2b       	or	r22, r23
    1180:	29 f0       	breq	.+10     	; 0x118c <Transmit_buffer_flush+0x24>
		memset(_this->buf, 0, sizeof (_this->buf));
    1182:	24 eb       	ldi	r18, 0xB4	; 180
    1184:	fc 01       	movw	r30, r24
    1186:	11 92       	st	Z+, r1
    1188:	2a 95       	dec	r18
    118a:	e9 f7       	brne	.-6      	; 0x1186 <Transmit_buffer_flush+0x1e>
    118c:	08 95       	ret

0000118e <beginCANFast>:
}



void beginCANFast(volatile int * ptr, unsigned int maxSize, unsigned char givenAddress) {
	receiveArrayAddressCAN = ptr;
    118e:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <receiveArrayAddressCAN+0x1>
    1192:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <receiveArrayAddressCAN>
	moduleAddressCAN = givenAddress;
    1196:	40 93 3a 04 	sts	0x043A, r20	; 0x80043a <moduleAddressCAN>
	MaxIndex = maxSize;
    119a:	70 93 54 05 	sts	0x0554, r23	; 0x800554 <MaxIndex+0x1>
    119e:	60 93 53 05 	sts	0x0553, r22	; 0x800553 <MaxIndex>

	BOOL ret;
	ret=prepare_rx( CANFAST_MOB, moduleAddressCAN<<6, 0b11111100000, ReceiveCANFast); //all 1s forces comparison
    11a2:	80 e4       	ldi	r24, 0x40	; 64
    11a4:	48 9f       	mul	r20, r24
    11a6:	b0 01       	movw	r22, r0
    11a8:	11 24       	eor	r1, r1
    11aa:	21 e7       	ldi	r18, 0x71	; 113
    11ac:	36 e0       	ldi	r19, 0x06	; 6
    11ae:	40 ee       	ldi	r20, 0xE0	; 224
    11b0:	57 e0       	ldi	r21, 0x07	; 7
    11b2:	85 e0       	ldi	r24, 0x05	; 5
    11b4:	41 dc       	rcall	.-1918   	; 0xa38 <prepare_rx>
	ASSERT( ret==0);
    11b6:	88 23       	and	r24, r24
    11b8:	09 f0       	breq	.+2      	; 0x11bc <beginCANFast+0x2e>
    11ba:	98 95       	break
	ASSERT( ret==0);
	ret=prepare_rx( BEACON_MOB, BeaconAddress<<6, 0b11111100000, ReceiveCANFastBEACON); //all 1s forces comparison
	ASSERT( ret==0);
#endif

	prepare_tx(TRANSMITMOB, 0b11111111111, 0b11111111111, TransmitCANFast);
    11bc:	23 e0       	ldi	r18, 0x03	; 3
    11be:	39 e0       	ldi	r19, 0x09	; 9
    11c0:	4f ef       	ldi	r20, 0xFF	; 255
    11c2:	57 e0       	ldi	r21, 0x07	; 7
    11c4:	6f ef       	ldi	r22, 0xFF	; 255
    11c6:	77 e0       	ldi	r23, 0x07	; 7
    11c8:	8d e0       	ldi	r24, 0x0D	; 13
    11ca:	aa dc       	rcall	.-1708   	; 0xb20 <prepare_tx>
	List_Init(&head);
    11cc:	8b e2       	ldi	r24, 0x2B	; 43
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <List_Init>
void *memset(void *s, int c, size_t n);

//flushes the send buffer to get it ready for new data

void Send_buffer_flush(struct ringBufSCAN* _this, const int clearBuffer) {
	_this->count = 0;
    11d4:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <ring_buffer_CAN+0x55>
    11d8:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <ring_buffer_CAN+0x54>
	_this->head = 0;
    11dc:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <ring_buffer_CAN+0x51>
    11e0:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <ring_buffer_CAN+0x50>
	_this->tail = 0;
    11e4:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <ring_buffer_CAN+0x53>
    11e8:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <ring_buffer_CAN+0x52>
	prepare_tx(TRANSMITMOB, 0b11111111111, 0b11111111111, TransmitCANFast);
	List_Init(&head);
	Send_buffer_flush(&ring_buffer_CAN,0);
	//Send_buffer_flush(&ring_buffer_CAN_Control,1);
	//Send_buffer_flush(&ring_buffer_CAN_Beacon,1);
	Transmit_buffer_flush(&TransmitBuffer,0);
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	8a e6       	ldi	r24, 0x6A	; 106
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	b9 cf       	rjmp	.-142    	; 0x1168 <Transmit_buffer_flush>
    11f6:	08 95       	ret

000011f8 <initCANFastTransfer>:
int ReceiveCAN[CAN_RECIEVE_SIZE];


void initCANFastTransfer(void)
{
	beginCANFast(ReceiveCAN, sizeof(ReceiveCAN), RouterCardAddress);
    11f8:	44 e0       	ldi	r20, 0x04	; 4
    11fa:	64 e1       	ldi	r22, 0x14	; 20
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	86 e2       	ldi	r24, 0x26	; 38
    1200:	94 e0       	ldi	r25, 0x04	; 4
    1202:	c5 cf       	rjmp	.-118    	; 0x118e <beginCANFast>
    1204:	08 95       	ret

00001206 <TransmitCANFast>:
	}
}
#endif

void TransmitCANFast( CAN_packet *p, unsigned char mob) // interrupt callback
{
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
	return _this->count;

}

unsigned int Transmit_buffer_GetCount(struct ringBufTRANSMIT* _this) {
	return _this->count;
    120e:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <TransmitBuffer+0xb8>
    1212:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <TransmitBuffer+0xb9>
{

	//NEW STATIC METHOD
	//if there is something to send

	if(Transmit_buffer_GetCount(&TransmitBuffer) > 0)
    1216:	21 15       	cp	r18, r1
    1218:	31 05       	cpc	r19, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <TransmitCANFast+0x18>
    121c:	a5 c0       	rjmp	.+330    	; 0x1368 <TransmitCANFast+0x162>
    121e:	ec 01       	movw	r28, r24
	{
//    #ifdef NEW_MAIN
//    toggleLED(LED1);
//    #endif
		//if more than 2 data/index pairs left might be able to send large packet.
		if(Transmit_buffer_GetCount(&TransmitBuffer)>6) {
    1220:	27 30       	cpi	r18, 0x07	; 7
    1222:	31 05       	cpc	r19, r1
    1224:	08 f4       	brcc	.+2      	; 0x1228 <TransmitCANFast+0x22>
    1226:	3c c0       	rjmp	.+120    	; 0x12a0 <TransmitCANFast+0x9a>
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    1228:	8a e6       	ldi	r24, 0x6A	; 106
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	5f df       	rcall	.-322    	; 0x10ec <Transmit_buffer_get>
    122e:	8c 01       	movw	r16, r24
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
    1230:	00 24       	eor	r0, r0
    1232:	96 95       	lsr	r25
    1234:	87 95       	ror	r24
    1236:	07 94       	ror	r0
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	07 94       	ror	r0
    123e:	98 2f       	mov	r25, r24
    1240:	80 2d       	mov	r24, r0
    1242:	04 96       	adiw	r24, 0x04	; 4
    1244:	99 83       	std	Y+1, r25	; 0x01
    1246:	88 83       	st	Y, r24
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1248:	8a e6       	ldi	r24, 0x6A	; 106
    124a:	92 e0       	ldi	r25, 0x02	; 2
    124c:	4f df       	rcall	.-354    	; 0x10ec <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    124e:	9b 83       	std	Y+3, r25	; 0x03
				p->data[2*i + 1] = temp;
    1250:	8c 83       	std	Y+4, r24	; 0x04
		if(Transmit_buffer_GetCount(&TransmitBuffer)>6) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1252:	8a e6       	ldi	r24, 0x6A	; 106
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	4a df       	rcall	.-364    	; 0x10ec <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    1258:	9d 83       	std	Y+5, r25	; 0x05
				p->data[2*i + 1] = temp;
			}
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
    125a:	8e 83       	std	Y+6, r24	; 0x06
    125c:	8a e6       	ldi	r24, 0x6A	; 106
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	6d df       	rcall	.-294    	; 0x113c <Transmit_buffer_peek>
    1262:	08 17       	cp	r16, r24
    1264:	19 07       	cpc	r17, r25
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
    1266:	c9 f4       	brne	.+50     	; 0x129a <TransmitCANFast+0x94>
    1268:	8a e6       	ldi	r24, 0x6A	; 106
    126a:	92 e0       	ldi	r25, 0x02	; 2
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    126c:	3f df       	rcall	.-386    	; 0x10ec <Transmit_buffer_get>
    126e:	8a e6       	ldi	r24, 0x6A	; 106
    1270:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    1272:	3c df       	rcall	.-392    	; 0x10ec <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    1274:	9f 83       	std	Y+7, r25	; 0x07
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1276:	88 87       	std	Y+8, r24	; 0x08
    1278:	8a e6       	ldi	r24, 0x6A	; 106
    127a:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    127c:	37 df       	rcall	.-402    	; 0x10ec <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    127e:	99 87       	std	Y+9, r25	; 0x09
				}
				//need to check if this was the last packet
				if(Transmit_buffer_peek(&TransmitBuffer) == address) {
    1280:	8a 87       	std	Y+10, r24	; 0x0a
    1282:	8a e6       	ldi	r24, 0x6A	; 106
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	5a df       	rcall	.-332    	; 0x113c <Transmit_buffer_peek>
    1288:	08 17       	cp	r16, r24
    128a:	19 07       	cpc	r17, r25
    128c:	19 f4       	brne	.+6      	; 0x1294 <TransmitCANFast+0x8e>
					//next address is same, so this isn't the last packet, send a length 8.
					p->length = 8;
    128e:	88 e0       	ldi	r24, 0x08	; 8
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	70 c0       	rjmp	.+224    	; 0x1374 <TransmitCANFast+0x16e>
				}
				else {
					//next address is different, and this is the last packet, so send a 9.
					p->length = 9;
    1294:	89 e0       	ldi	r24, 0x09	; 9
    1296:	8a 83       	std	Y+2, r24	; 0x02
    1298:	6d c0       	rjmp	.+218    	; 0x1374 <TransmitCANFast+0x16e>
				}
			}
			else {
				//addresses don't match and we should just send what is currently in the packet.
				p->length = 4;
    129a:	84 e0       	ldi	r24, 0x04	; 4
    129c:	8a 83       	std	Y+2, r24	; 0x02
			}
		}
		//if exactly 2 data/index pairs left send with length 9. Receiver
		//will read the "wrong" length correctly, but realize this is the last packet.
		//note: still need to check incase two different destinations.
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==6) {
    129e:	6a c0       	rjmp	.+212    	; 0x1374 <TransmitCANFast+0x16e>
    12a0:	26 30       	cpi	r18, 0x06	; 6
    12a2:	31 05       	cpc	r19, r1
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    12a4:	99 f5       	brne	.+102    	; 0x130c <TransmitCANFast+0x106>
    12a6:	8a e6       	ldi	r24, 0x6A	; 106
    12a8:	92 e0       	ldi	r25, 0x02	; 2
    12aa:	20 df       	rcall	.-448    	; 0x10ec <Transmit_buffer_get>
    12ac:	8c 01       	movw	r16, r24
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
    12ae:	00 24       	eor	r0, r0
    12b0:	96 95       	lsr	r25
    12b2:	87 95       	ror	r24
    12b4:	07 94       	ror	r0
    12b6:	96 95       	lsr	r25
    12b8:	87 95       	ror	r24
    12ba:	07 94       	ror	r0
    12bc:	98 2f       	mov	r25, r24
    12be:	80 2d       	mov	r24, r0
    12c0:	04 96       	adiw	r24, 0x04	; 4
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    12c2:	99 83       	std	Y+1, r25	; 0x01
    12c4:	88 83       	st	Y, r24
    12c6:	8a e6       	ldi	r24, 0x6A	; 106
				p->data[2*i] = (temp >> 8);//this is so dumb
    12c8:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i + 1] = temp;
    12ca:	10 df       	rcall	.-480    	; 0x10ec <Transmit_buffer_get>
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==6) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    12cc:	9b 83       	std	Y+3, r25	; 0x03
    12ce:	8c 83       	std	Y+4, r24	; 0x04
    12d0:	8a e6       	ldi	r24, 0x6A	; 106
				p->data[2*i] = (temp >> 8);//this is so dumb
    12d2:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i + 1] = temp;
    12d4:	0b df       	rcall	.-490    	; 0x10ec <Transmit_buffer_get>
			}
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
    12d6:	9d 83       	std	Y+5, r25	; 0x05
    12d8:	8e 83       	std	Y+6, r24	; 0x06
    12da:	8a e6       	ldi	r24, 0x6A	; 106
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	2e df       	rcall	.-420    	; 0x113c <Transmit_buffer_peek>
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
    12e0:	08 17       	cp	r16, r24
    12e2:	19 07       	cpc	r17, r25
    12e4:	81 f4       	brne	.+32     	; 0x1306 <TransmitCANFast+0x100>
    12e6:	8a e6       	ldi	r24, 0x6A	; 106
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    12e8:	92 e0       	ldi	r25, 0x02	; 2
    12ea:	00 df       	rcall	.-512    	; 0x10ec <Transmit_buffer_get>
    12ec:	8a e6       	ldi	r24, 0x6A	; 106
    12ee:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    12f0:	fd de       	rcall	.-518    	; 0x10ec <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    12f2:	9f 83       	std	Y+7, r25	; 0x07
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    12f4:	88 87       	std	Y+8, r24	; 0x08
    12f6:	8a e6       	ldi	r24, 0x6A	; 106
    12f8:	92 e0       	ldi	r25, 0x02	; 2
					p->data[2*i] = (temp >> 8);
    12fa:	f8 de       	rcall	.-528    	; 0x10ec <Transmit_buffer_get>
					p->data[2*i + 1] = temp;
    12fc:	99 87       	std	Y+9, r25	; 0x09
				}
				p->length = 9;
    12fe:	8a 87       	std	Y+10, r24	; 0x0a
    1300:	89 e0       	ldi	r24, 0x09	; 9
    1302:	8a 83       	std	Y+2, r24	; 0x02
			}
			else {
				//addresses don't match and we should just send what is currently in the packet.
				p->length = 4;
    1304:	37 c0       	rjmp	.+110    	; 0x1374 <TransmitCANFast+0x16e>
    1306:	84 e0       	ldi	r24, 0x04	; 4
    1308:	8a 83       	std	Y+2, r24	; 0x02
			}

		}
		//if only 1 data/index pair receiver will know it is the last packet.
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==3) {
    130a:	34 c0       	rjmp	.+104    	; 0x1374 <TransmitCANFast+0x16e>
    130c:	23 30       	cpi	r18, 0x03	; 3
    130e:	31 05       	cpc	r19, r1
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    1310:	e1 f4       	brne	.+56     	; 0x134a <TransmitCANFast+0x144>
    1312:	8a e6       	ldi	r24, 0x6A	; 106
    1314:	92 e0       	ldi	r25, 0x02	; 2
    1316:	ea de       	rcall	.-556    	; 0x10ec <Transmit_buffer_get>
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
    1318:	00 24       	eor	r0, r0
    131a:	96 95       	lsr	r25
    131c:	87 95       	ror	r24
    131e:	07 94       	ror	r0
    1320:	96 95       	lsr	r25
    1322:	87 95       	ror	r24
    1324:	07 94       	ror	r0
    1326:	98 2f       	mov	r25, r24
    1328:	80 2d       	mov	r24, r0
    132a:	04 96       	adiw	r24, 0x04	; 4
			p->length = 4;
    132c:	99 83       	std	Y+1, r25	; 0x01
    132e:	88 83       	st	Y, r24
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	8a 83       	std	Y+2, r24	; 0x02
    1334:	8a e6       	ldi	r24, 0x6A	; 106
    1336:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i] = (temp >> 8);
    1338:	d9 de       	rcall	.-590    	; 0x10ec <Transmit_buffer_get>
				p->data[2*i + 1] = temp;
    133a:	9b 83       	std	Y+3, r25	; 0x03
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==3) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
			p->length = 4;
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    133c:	8c 83       	std	Y+4, r24	; 0x04
    133e:	8a e6       	ldi	r24, 0x6A	; 106
    1340:	92 e0       	ldi	r25, 0x02	; 2
				p->data[2*i] = (temp >> 8);
    1342:	d4 de       	rcall	.-600    	; 0x10ec <Transmit_buffer_get>
				p->data[2*i + 1] = temp;
    1344:	9d 83       	std	Y+5, r25	; 0x05
    1346:	8e 83       	std	Y+6, r24	; 0x06
		}

		else
		{
			//error, missing dest/index/value set, previous packets could be very corrupt
			TransmitSetMissMatch++;
    1348:	15 c0       	rjmp	.+42     	; 0x1374 <TransmitCANFast+0x16e>
    134a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TransmitSetMissMatch>
    134e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <TransmitSetMissMatch+0x1>
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <TransmitSetMissMatch+0x1>
    1358:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <TransmitSetMissMatch>
//      #ifdef NEW_MAIN
//        toggleLED(LED9);
//      #endif
			Transmit_buffer_flush(&TransmitBuffer,1);
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	8a e6       	ldi	r24, 0x6A	; 106
    1362:	92 e0       	ldi	r25, 0x02	; 2
    1364:	01 df       	rcall	.-510    	; 0x1168 <Transmit_buffer_flush>
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <TransmitCANFast+0x16e>
		}
	}
	else {
		p->id = 1;
    1368:	21 e0       	ldi	r18, 0x01	; 1
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	fc 01       	movw	r30, r24
    136e:	31 83       	std	Z+1, r19	; 0x01
    1370:	20 83       	st	Z, r18
		p->length = 0;
    1372:	12 82       	std	Z+2, r1	; 0x02
	}
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret

0000137e <initCOMs>:
}

bool manualMode(void)
{
	return (macroCommand==0);
}
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	07 e0       	ldi	r16, 0x07	; 7
    1384:	12 e0       	ldi	r17, 0x02	; 2
    1386:	2f ef       	ldi	r18, 0xFF	; 255
    1388:	31 e0       	ldi	r19, 0x01	; 1
    138a:	41 ee       	ldi	r20, 0xE1	; 225
    138c:	51 e0       	ldi	r21, 0x01	; 1
    138e:	64 e0       	ldi	r22, 0x04	; 4
    1390:	89 e7       	ldi	r24, 0x79	; 121
    1392:	9b e0       	ldi	r25, 0x0B	; 11
    1394:	10 d3       	rcall	.+1568   	; 0x19b6 <FT_Init>
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	08 95       	ret

0000139c <System_STOP>:
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <MacroStatus>
    13a4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <macroCommand+0x1>
    13a8:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <macroCommand>
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	89 e7       	ldi	r24, 0x79	; 121
    13b4:	9b e0       	ldi	r25, 0x0B	; 11
    13b6:	87 d3       	rcall	.+1806   	; 0x1ac6 <FT_ToSend>
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	89 e7       	ldi	r24, 0x79	; 121
    13bc:	9b e0       	ldi	r25, 0x0B	; 11
    13be:	99 d3       	rcall	.+1842   	; 0x1af2 <FT_Send>
    13c0:	88 e0       	ldi	r24, 0x08	; 8
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	40 dc       	rcall	.-1920   	; 0xc46 <getCANFT_RFlag>
    13c6:	64 e0       	ldi	r22, 0x04	; 4
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	69 dd       	rcall	.-1326   	; 0xea2 <ToSendCAN>
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	88 e0       	ldi	r24, 0x08	; 8
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	64 dd       	rcall	.-1336   	; 0xea2 <ToSendCAN>
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	89 e0       	ldi	r24, 0x09	; 9
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	5f dd       	rcall	.-1346   	; 0xea2 <ToSendCAN>
    13e4:	85 e0       	ldi	r24, 0x05	; 5
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	45 de       	rcall	.-886    	; 0x1074 <sendDataCAN>
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	88 e0       	ldi	r24, 0x08	; 8
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0c dc       	rcall	.-2024   	; 0xc0c <setCANFTdata>
    13f4:	00 e0       	ldi	r16, 0x00	; 0
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 06 13 	call	0x260c	; 0x260c <motorControl>
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <parseComms>:
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	89 e7       	ldi	r24, 0x79	; 121
    1416:	9b e0       	ldi	r25, 0x0B	; 11
    1418:	f4 d2       	rcall	.+1512   	; 0x1a02 <FT_Read>
    141a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <leftMotorCommand+0x1>
    141e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <leftMotorCommand>
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	89 e7       	ldi	r24, 0x79	; 121
    1426:	9b e0       	ldi	r25, 0x0B	; 11
    1428:	ec d2       	rcall	.+1496   	; 0x1a02 <FT_Read>
    142a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <rightMotorCommand+0x1>
    142e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <rightMotorCommand>
    1432:	63 e0       	ldi	r22, 0x03	; 3
    1434:	89 e7       	ldi	r24, 0x79	; 121
    1436:	9b e0       	ldi	r25, 0x0B	; 11
    1438:	e4 d2       	rcall	.+1480   	; 0x1a02 <FT_Read>
    143a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <bucketMotorCommand+0x1>
    143e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <bucketMotorCommand>
    1442:	64 e0       	ldi	r22, 0x04	; 4
    1444:	89 e7       	ldi	r24, 0x79	; 121
    1446:	9b e0       	ldi	r25, 0x0B	; 11
    1448:	dc d2       	rcall	.+1464   	; 0x1a02 <FT_Read>
    144a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <armMotorCommand+0x1>
    144e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <armMotorCommand>
    1452:	65 e0       	ldi	r22, 0x05	; 5
    1454:	89 e7       	ldi	r24, 0x79	; 121
    1456:	9b e0       	ldi	r25, 0x0B	; 11
    1458:	d4 d2       	rcall	.+1448   	; 0x1a02 <FT_Read>
    145a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <plowMotorCommand+0x1>
    145e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <plowMotorCommand>
    1462:	08 95       	ret

00001464 <updateComs2>:
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	89 e7       	ldi	r24, 0x79	; 121
    146a:	9b e0       	ldi	r25, 0x0B	; 11
    146c:	dd d2       	rcall	.+1466   	; 0x1a28 <FT_Receive>
    146e:	87 e0       	ldi	r24, 0x07	; 7
    1470:	4e d7       	rcall	.+3740   	; 0x230e <toggleLED>
    1472:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <COM_State>
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	b1 f1       	breq	.+108    	; 0x14e6 <updateComs2+0x82>
    147a:	38 f0       	brcs	.+14     	; 0x148a <updateComs2+0x26>
    147c:	82 30       	cpi	r24, 0x02	; 2
    147e:	09 f4       	brne	.+2      	; 0x1482 <updateComs2+0x1e>
    1480:	ff c0       	rjmp	.+510    	; 0x1680 <updateComs2+0x21c>
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	09 f4       	brne	.+2      	; 0x1488 <updateComs2+0x24>
    1486:	55 c1       	rjmp	.+682    	; 0x1732 <updateComs2+0x2ce>
    1488:	7c c1       	rjmp	.+760    	; 0x1782 <updateComs2+0x31e>
    148a:	89 e7       	ldi	r24, 0x79	; 121
    148c:	9b e0       	ldi	r25, 0x0B	; 11
    148e:	cc d2       	rcall	.+1432   	; 0x1a28 <FT_Receive>
    1490:	85 e5       	ldi	r24, 0x55	; 85
    1492:	95 e0       	ldi	r25, 0x05	; 5
    1494:	0e 94 e7 15 	call	0x2bce	; 0x2bce <timerDone>
    1498:	88 23       	and	r24, r24
    149a:	09 f1       	breq	.+66     	; 0x14de <updateComs2+0x7a>
    149c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <MacroStatus>
    14a0:	82 30       	cpi	r24, 0x02	; 2
    14a2:	99 f4       	brne	.+38     	; 0x14ca <updateComs2+0x66>
    14a4:	44 e0       	ldi	r20, 0x04	; 4
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	89 e7       	ldi	r24, 0x79	; 121
    14ac:	9b e0       	ldi	r25, 0x0B	; 11
    14ae:	0b d3       	rcall	.+1558   	; 0x1ac6 <FT_ToSend>
    14b0:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <macroCommand>
    14b4:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <macroCommand+0x1>
    14b8:	68 e0       	ldi	r22, 0x08	; 8
    14ba:	89 e7       	ldi	r24, 0x79	; 121
    14bc:	9b e0       	ldi	r25, 0x0B	; 11
    14be:	03 d3       	rcall	.+1542   	; 0x1ac6 <FT_ToSend>
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	89 e7       	ldi	r24, 0x79	; 121
    14c4:	9b e0       	ldi	r25, 0x0B	; 11
    14c6:	15 d3       	rcall	.+1578   	; 0x1af2 <FT_Send>
    14c8:	0a c0       	rjmp	.+20     	; 0x14de <updateComs2+0x7a>
    14ca:	44 e0       	ldi	r20, 0x04	; 4
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	89 e7       	ldi	r24, 0x79	; 121
    14d2:	9b e0       	ldi	r25, 0x0B	; 11
    14d4:	f8 d2       	rcall	.+1520   	; 0x1ac6 <FT_ToSend>
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	89 e7       	ldi	r24, 0x79	; 121
    14da:	9b e0       	ldi	r25, 0x0B	; 11
    14dc:	0a d3       	rcall	.+1556   	; 0x1af2 <FT_Send>
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <COM_State>
    14e4:	4e c1       	rjmp	.+668    	; 0x1782 <updateComs2+0x31e>
    14e6:	68 e0       	ldi	r22, 0x08	; 8
    14e8:	89 e7       	ldi	r24, 0x79	; 121
    14ea:	9b e0       	ldi	r25, 0x0B	; 11
    14ec:	97 d2       	rcall	.+1326   	; 0x1a1c <FT_Modified>
    14ee:	80 93 a2 0a 	sts	0x0AA2, r24	; 0x800aa2 <MacroModified>
    14f2:	88 23       	and	r24, r24
    14f4:	b1 f0       	breq	.+44     	; 0x1522 <updateComs2+0xbe>
    14f6:	68 e0       	ldi	r22, 0x08	; 8
    14f8:	89 e7       	ldi	r24, 0x79	; 121
    14fa:	9b e0       	ldi	r25, 0x0B	; 11
    14fc:	82 d2       	rcall	.+1284   	; 0x1a02 <FT_Read>
    14fe:	89 2b       	or	r24, r25
    1500:	81 f0       	breq	.+32     	; 0x1522 <updateComs2+0xbe>
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <MacroStatus>
    1508:	68 e0       	ldi	r22, 0x08	; 8
    150a:	89 e7       	ldi	r24, 0x79	; 121
    150c:	9b e0       	ldi	r25, 0x0B	; 11
    150e:	79 d2       	rcall	.+1266   	; 0x1a02 <FT_Read>
    1510:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <macroCommand+0x1>
    1514:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <macroCommand>
    1518:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <previousMacroCommand+0x1>
    151c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <previousMacroCommand>
    1520:	22 c0       	rjmp	.+68     	; 0x1566 <updateComs2+0x102>
    1522:	68 e0       	ldi	r22, 0x08	; 8
    1524:	89 e7       	ldi	r24, 0x79	; 121
    1526:	9b e0       	ldi	r25, 0x0B	; 11
    1528:	6c d2       	rcall	.+1240   	; 0x1a02 <FT_Read>
    152a:	89 2b       	or	r24, r25
    152c:	e1 f4       	brne	.+56     	; 0x1566 <updateComs2+0x102>
    152e:	80 91 a2 0a 	lds	r24, 0x0AA2	; 0x800aa2 <MacroModified>
    1532:	88 23       	and	r24, r24
    1534:	c1 f0       	breq	.+48     	; 0x1566 <updateComs2+0x102>
    1536:	8c e0       	ldi	r24, 0x0C	; 12
    1538:	ea d6       	rcall	.+3540   	; 0x230e <toggleLED>
    153a:	30 df       	rcall	.-416    	; 0x139c <System_STOP>
    153c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <MacroStatus>
    1540:	68 e0       	ldi	r22, 0x08	; 8
    1542:	89 e7       	ldi	r24, 0x79	; 121
    1544:	9b e0       	ldi	r25, 0x0B	; 11
    1546:	5d d2       	rcall	.+1210   	; 0x1a02 <FT_Read>
    1548:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <macroCommand+0x1>
    154c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <macroCommand>
    1550:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <previousMacroCommand+0x1>
    1554:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <previousMacroCommand>
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	6f e0       	ldi	r22, 0x0F	; 15
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	fe d5       	rcall	.+3068   	; 0x2162 <SetNeoPixRGB>
    1566:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <MacroStatus>
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	09 f0       	breq	.+2      	; 0x1570 <updateComs2+0x10c>
    156e:	36 c0       	rjmp	.+108    	; 0x15dc <updateComs2+0x178>
    1570:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LEDstatus>
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	66 db       	rcall	.-2356   	; 0xc46 <getCANFT_RFlag>
    157a:	88 23       	and	r24, r24
    157c:	59 f1       	breq	.+86     	; 0x15d4 <updateComs2+0x170>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	56 db       	rcall	.-2388   	; 0xc30 <getCANFTdata>
    1584:	05 97       	sbiw	r24, 0x05	; 5
    1586:	31 f5       	brne	.+76     	; 0x15d4 <updateComs2+0x170>
    1588:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LEDstatus>
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	39 f0       	breq	.+14     	; 0x159e <updateComs2+0x13a>
    1590:	42 e3       	ldi	r20, 0x32	; 50
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	82 e3       	ldi	r24, 0x32	; 50
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	e2 d5       	rcall	.+3012   	; 0x2162 <SetNeoPixRGB>
    159e:	88 e0       	ldi	r24, 0x08	; 8
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	46 db       	rcall	.-2420   	; 0xc30 <getCANFTdata>
    15a4:	89 2b       	or	r24, r25
    15a6:	b1 f4       	brne	.+44     	; 0x15d4 <updateComs2+0x170>
    15a8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <MacroStatus>
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	61 e0       	ldi	r22, 0x01	; 1
    15b2:	89 e7       	ldi	r24, 0x79	; 121
    15b4:	9b e0       	ldi	r25, 0x0B	; 11
    15b6:	87 d2       	rcall	.+1294   	; 0x1ac6 <FT_ToSend>
    15b8:	61 e0       	ldi	r22, 0x01	; 1
    15ba:	89 e7       	ldi	r24, 0x79	; 121
    15bc:	9b e0       	ldi	r25, 0x0B	; 11
    15be:	99 d2       	rcall	.+1330   	; 0x1af2 <FT_Send>
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	8b e0       	ldi	r24, 0x0B	; 11
    15c4:	3f d6       	rcall	.+3198   	; 0x2244 <setLED>
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	6f e0       	ldi	r22, 0x0F	; 15
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	c7 d5       	rcall	.+2958   	; 0x2162 <SetNeoPixRGB>
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	8b e0       	ldi	r24, 0x0B	; 11
    15d8:	35 d6       	rcall	.+3178   	; 0x2244 <setLED>
    15da:	4e c0       	rjmp	.+156    	; 0x1678 <updateComs2+0x214>
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	09 f0       	breq	.+2      	; 0x15e2 <updateComs2+0x17e>
    15e0:	48 c0       	rjmp	.+144    	; 0x1672 <updateComs2+0x20e>
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	94 d6       	rcall	.+3368   	; 0x230e <toggleLED>
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	42 e3       	ldi	r20, 0x32	; 50
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	72 e3       	ldi	r23, 0x32	; 50
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	f8 d5       	rcall	.+3056   	; 0x21e4 <flashLedColors>
    15f4:	88 e0       	ldi	r24, 0x08	; 8
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	26 db       	rcall	.-2484   	; 0xc46 <getCANFT_RFlag>
    15fa:	88 23       	and	r24, r24
    15fc:	d9 f0       	breq	.+54     	; 0x1634 <updateComs2+0x1d0>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	16 db       	rcall	.-2516   	; 0xc30 <getCANFTdata>
    1604:	05 97       	sbiw	r24, 0x05	; 5
    1606:	b1 f4       	brne	.+44     	; 0x1634 <updateComs2+0x1d0>
    1608:	88 e0       	ldi	r24, 0x08	; 8
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	11 db       	rcall	.-2526   	; 0xc30 <getCANFTdata>
    160e:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <macroCommand>
    1612:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <macroCommand+0x1>
    1616:	82 17       	cp	r24, r18
    1618:	93 07       	cpc	r25, r19
    161a:	61 f4       	brne	.+24     	; 0x1634 <updateComs2+0x1d0>
    161c:	ac 01       	movw	r20, r24
    161e:	61 e0       	ldi	r22, 0x01	; 1
    1620:	89 e7       	ldi	r24, 0x79	; 121
    1622:	9b e0       	ldi	r25, 0x0B	; 11
    1624:	50 d2       	rcall	.+1184   	; 0x1ac6 <FT_ToSend>
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	89 e7       	ldi	r24, 0x79	; 121
    162a:	9b e0       	ldi	r25, 0x0B	; 11
    162c:	62 d2       	rcall	.+1220   	; 0x1af2 <FT_Send>
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <MacroStatus>
    1634:	85 e6       	ldi	r24, 0x65	; 101
    1636:	95 e0       	ldi	r25, 0x05	; 5
    1638:	0e 94 e7 15 	call	0x2bce	; 0x2bce <timerDone>
    163c:	88 23       	and	r24, r24
    163e:	e1 f0       	breq	.+56     	; 0x1678 <updateComs2+0x214>
    1640:	86 e0       	ldi	r24, 0x06	; 6
    1642:	65 d6       	rcall	.+3274   	; 0x230e <toggleLED>
    1644:	64 e0       	ldi	r22, 0x04	; 4
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	2a dc       	rcall	.-1964   	; 0xea2 <ToSendCAN>
    164e:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <macroCommand>
    1652:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <macroCommand+0x1>
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	23 dc       	rcall	.-1978   	; 0xea2 <ToSendCAN>
    165c:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <macroSubCommand>
    1660:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <macroSubCommand+0x1>
    1664:	89 e0       	ldi	r24, 0x09	; 9
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	1c dc       	rcall	.-1992   	; 0xea2 <ToSendCAN>
    166a:	85 e0       	ldi	r24, 0x05	; 5
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 dd       	rcall	.-1532   	; 0x1074 <sendDataCAN>
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <updateComs2+0x214>
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	8b e0       	ldi	r24, 0x0B	; 11
    1676:	e6 d5       	rcall	.+3020   	; 0x2244 <setLED>
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <COM_State>
    167e:	81 c0       	rjmp	.+258    	; 0x1782 <updateComs2+0x31e>
    1680:	89 e7       	ldi	r24, 0x79	; 121
    1682:	9b e0       	ldi	r25, 0x0B	; 11
    1684:	d1 d1       	rcall	.+930    	; 0x1a28 <FT_Receive>
    1686:	8d e8       	ldi	r24, 0x8D	; 141
    1688:	95 e0       	ldi	r25, 0x05	; 5
    168a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <timerDone>
    168e:	88 23       	and	r24, r24
    1690:	09 f4       	brne	.+2      	; 0x1694 <updateComs2+0x230>
    1692:	77 c0       	rjmp	.+238    	; 0x1782 <updateComs2+0x31e>
    1694:	9c dc       	rcall	.-1736   	; 0xfce <ReceiveDataCAN>
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	3a d6       	rcall	.+3188   	; 0x230e <toggleLED>
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	89 e7       	ldi	r24, 0x79	; 121
    169e:	9b e0       	ldi	r25, 0x0B	; 11
    16a0:	bd d1       	rcall	.+890    	; 0x1a1c <FT_Modified>
    16a2:	81 11       	cpse	r24, r1
    16a4:	06 c0       	rjmp	.+12     	; 0x16b2 <updateComs2+0x24e>
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	89 e7       	ldi	r24, 0x79	; 121
    16aa:	9b e0       	ldi	r25, 0x0B	; 11
    16ac:	b7 d1       	rcall	.+878    	; 0x1a1c <FT_Modified>
    16ae:	88 23       	and	r24, r24
    16b0:	39 f0       	breq	.+14     	; 0x16c0 <updateComs2+0x25c>
    16b2:	82 ef       	ldi	r24, 0xF2	; 242
    16b4:	99 e0       	ldi	r25, 0x09	; 9
    16b6:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <resetTimer>
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	85 e0       	ldi	r24, 0x05	; 5
    16be:	c2 d5       	rcall	.+2948   	; 0x2244 <setLED>
    16c0:	a8 de       	rcall	.-688    	; 0x1412 <parseComms>
    16c2:	82 ef       	ldi	r24, 0xF2	; 242
    16c4:	99 e0       	ldi	r25, 0x09	; 9
    16c6:	0e 94 43 16 	call	0x2c86	; 0x2c86 <timerDone_NoReset>
    16ca:	81 11       	cpse	r24, r1
    16cc:	19 c0       	rjmp	.+50     	; 0x1700 <updateComs2+0x29c>
    16ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <COM_State>
    16d2:	84 e0       	ldi	r24, 0x04	; 4
    16d4:	1c d6       	rcall	.+3128   	; 0x230e <toggleLED>
    16d6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <MacroStatus>
    16da:	81 50       	subi	r24, 0x01	; 1
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <updateComs2+0x27e>
    16e0:	50 c0       	rjmp	.+160    	; 0x1782 <updateComs2+0x31e>
    16e2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LEDstatus>
    16e6:	81 11       	cpse	r24, r1
    16e8:	4c c0       	rjmp	.+152    	; 0x1782 <updateComs2+0x31e>
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	6f e0       	ldi	r22, 0x0F	; 15
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	35 d5       	rcall	.+2666   	; 0x2162 <SetNeoPixRGB>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LEDstatus>
    16fe:	41 c0       	rjmp	.+130    	; 0x1782 <updateComs2+0x31e>
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	42 e3       	ldi	r20, 0x32	; 50
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	72 e3       	ldi	r23, 0x32	; 50
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	6b d5       	rcall	.+2774   	; 0x21e4 <flashLedColors>
    170e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <LEDstatus>
    1712:	85 e6       	ldi	r24, 0x65	; 101
    1714:	95 e0       	ldi	r25, 0x05	; 5
    1716:	0e 94 e7 15 	call	0x2bce	; 0x2bce <timerDone>
    171a:	88 23       	and	r24, r24
    171c:	91 f1       	breq	.+100    	; 0x1782 <updateComs2+0x31e>
    171e:	3e de       	rcall	.-900    	; 0x139c <System_STOP>
    1720:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <macroCommand+0x1>
    1724:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <macroCommand>
    1728:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <MacroStatus>
    172c:	85 e0       	ldi	r24, 0x05	; 5
    172e:	ef d5       	rcall	.+3038   	; 0x230e <toggleLED>
    1730:	28 c0       	rjmp	.+80     	; 0x1782 <updateComs2+0x31e>
    1732:	82 ef       	ldi	r24, 0xF2	; 242
    1734:	99 e0       	ldi	r25, 0x09	; 9
    1736:	0e 94 43 16 	call	0x2c86	; 0x2c86 <timerDone_NoReset>
    173a:	81 11       	cpse	r24, r1
    173c:	1f c0       	rjmp	.+62     	; 0x177c <updateComs2+0x318>
    173e:	89 ed       	ldi	r24, 0xD9	; 217
    1740:	9a e0       	ldi	r25, 0x0A	; 10
    1742:	0e 94 e7 15 	call	0x2bce	; 0x2bce <timerDone>
    1746:	88 23       	and	r24, r24
    1748:	c9 f0       	breq	.+50     	; 0x177c <updateComs2+0x318>
    174a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <MacroStatus>
    174e:	81 11       	cpse	r24, r1
    1750:	15 c0       	rjmp	.+42     	; 0x177c <updateComs2+0x318>
    1752:	00 91 32 01 	lds	r16, 0x0132	; 0x800132 <plowMotorCommand>
    1756:	10 91 33 01 	lds	r17, 0x0133	; 0x800133 <plowMotorCommand+0x1>
    175a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <armMotorCommand>
    175e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <armMotorCommand+0x1>
    1762:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <bucketMotorCommand>
    1766:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <bucketMotorCommand+0x1>
    176a:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <rightMotorCommand>
    176e:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <rightMotorCommand+0x1>
    1772:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <leftMotorCommand>
    1776:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <leftMotorCommand+0x1>
    177a:	48 d7       	rcall	.+3728   	; 0x260c <motorControl>
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <COM_State>
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	08 95       	ret

00001788 <setupCommsTimers>:

void setupCommsTimers(void)
{
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
	setTimerInterval(&ohShitWeAreDeadTimer,10000);
    178c:	00 e1       	ldi	r16, 0x10	; 16
    178e:	17 e2       	ldi	r17, 0x27	; 39
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	82 e4       	ldi	r24, 0x42	; 66
    179e:	9c e0       	ldi	r25, 0x0C	; 12
    17a0:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&macroResubmitTimer,500);
    17a4:	04 ef       	ldi	r16, 0xF4	; 244
    17a6:	11 e0       	ldi	r17, 0x01	; 1
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	85 e6       	ldi	r24, 0x65	; 101
    17b6:	95 e0       	ldi	r25, 0x05	; 5
    17b8:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&pingTimer,500);
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	85 e5       	ldi	r24, 0x55	; 85
    17ca:	95 e0       	ldi	r25, 0x05	; 5
    17cc:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&commsTimer,5);
    17d0:	05 e0       	ldi	r16, 0x05	; 5
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	8d e8       	ldi	r24, 0x8D	; 141
    17e2:	95 e0       	ldi	r25, 0x05	; 5
    17e4:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&commsTimerBeacon,5);
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	8e ec       	ldi	r24, 0xCE	; 206
    17f6:	98 e0       	ldi	r25, 0x08	; 8
    17f8:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&sendBackTimer, 1);
    17fc:	01 e0       	ldi	r16, 0x01	; 1
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	8d e7       	ldi	r24, 0x7D	; 125
    180c:	95 e0       	ldi	r25, 0x05	; 5
    180e:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&safetyTimer,2000);
    1812:	00 ed       	ldi	r16, 0xD0	; 208
    1814:	17 e0       	ldi	r17, 0x07	; 7
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	82 ef       	ldi	r24, 0xF2	; 242
    1824:	99 e0       	ldi	r25, 0x09	; 9
    1826:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&resendMotorTimerRight,50);
    182a:	02 e3       	ldi	r16, 0x32	; 50
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	80 ee       	ldi	r24, 0xE0	; 224
    183c:	99 e0       	ldi	r25, 0x09	; 9
    183e:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&resendMotorTimerLeft,50);
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	80 ed       	ldi	r24, 0xD0	; 208
    1850:	99 e0       	ldi	r25, 0x09	; 9
    1852:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&resendMotorTimerBucket,50);
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	85 ea       	ldi	r24, 0xA5	; 165
    1864:	9a e0       	ldi	r25, 0x0A	; 10
    1866:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&checkCANTimer,50);
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	8c e2       	ldi	r24, 0x2C	; 44
    1878:	9c e0       	ldi	r25, 0x0C	; 12
    187a:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
	setTimerInterval(&TransmitManual, 50);
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	89 ed       	ldi	r24, 0xD9	; 217
    188c:	9a e0       	ldi	r25, 0x0A	; 10
    188e:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <setTimerInterval>
}
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	08 95       	ret

00001898 <Buffer_init>:
}

uint8_t * Buffer_get_array (Buffer_t * buffer)
{
	return buffer->data;
}
    1898:	fc 01       	movw	r30, r24
    189a:	15 ae       	std	Z+61, r1	; 0x3d
    189c:	14 ae       	std	Z+60, r1	; 0x3c
    189e:	17 ae       	std	Z+63, r1	; 0x3f
    18a0:	16 ae       	std	Z+62, r1	; 0x3e
    18a2:	e0 5c       	subi	r30, 0xC0	; 192
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	11 82       	std	Z+1, r1	; 0x01
    18a8:	10 82       	st	Z, r1
    18aa:	08 95       	ret

000018ac <Buffer_size>:
    18ac:	fc 01       	movw	r30, r24
    18ae:	84 ad       	ldd	r24, Z+60	; 0x3c
    18b0:	95 ad       	ldd	r25, Z+61	; 0x3d
    18b2:	08 95       	ret

000018b4 <Buffer_full>:
    18b4:	21 e0       	ldi	r18, 0x01	; 1
    18b6:	fc 01       	movw	r30, r24
    18b8:	84 ad       	ldd	r24, Z+60	; 0x3c
    18ba:	95 ad       	ldd	r25, Z+61	; 0x3d
    18bc:	cc 97       	sbiw	r24, 0x3c	; 60
    18be:	09 f0       	breq	.+2      	; 0x18c2 <Buffer_full+0xe>
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	82 2f       	mov	r24, r18
    18c4:	08 95       	ret

000018c6 <Buffer_empty>:
    18c6:	21 e0       	ldi	r18, 0x01	; 1
    18c8:	fc 01       	movw	r30, r24
    18ca:	84 ad       	ldd	r24, Z+60	; 0x3c
    18cc:	95 ad       	ldd	r25, Z+61	; 0x3d
    18ce:	89 2b       	or	r24, r25
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <Buffer_empty+0xe>
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	82 2f       	mov	r24, r18
    18d6:	08 95       	ret

000018d8 <Buffer_push>:
    18d8:	dc 01       	movw	r26, r24
    18da:	dc 96       	adiw	r26, 0x3c	; 60
    18dc:	2d 91       	ld	r18, X+
    18de:	3c 91       	ld	r19, X
    18e0:	dd 97       	sbiw	r26, 0x3d	; 61
    18e2:	2c 33       	cpi	r18, 0x3C	; 60
    18e4:	31 05       	cpc	r19, r1
    18e6:	d9 f0       	breq	.+54     	; 0x191e <Buffer_push+0x46>
    18e8:	a0 5c       	subi	r26, 0xC0	; 192
    18ea:	bf 4f       	sbci	r27, 0xFF	; 255
    18ec:	4d 91       	ld	r20, X+
    18ee:	5c 91       	ld	r21, X
    18f0:	11 97       	sbiw	r26, 0x01	; 1
    18f2:	fa 01       	movw	r30, r20
    18f4:	31 96       	adiw	r30, 0x01	; 1
    18f6:	ed 93       	st	X+, r30
    18f8:	fc 93       	st	X, r31
    18fa:	dc 01       	movw	r26, r24
    18fc:	a4 0f       	add	r26, r20
    18fe:	b5 1f       	adc	r27, r21
    1900:	6c 93       	st	X, r22
    1902:	2f 5f       	subi	r18, 0xFF	; 255
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	dc 01       	movw	r26, r24
    1908:	dd 96       	adiw	r26, 0x3d	; 61
    190a:	3c 93       	st	X, r19
    190c:	2e 93       	st	-X, r18
    190e:	dc 97       	sbiw	r26, 0x3c	; 60
    1910:	fc 97       	sbiw	r30, 0x3c	; 60
    1912:	29 f4       	brne	.+10     	; 0x191e <Buffer_push+0x46>
    1914:	fc 01       	movw	r30, r24
    1916:	e0 5c       	subi	r30, 0xC0	; 192
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	11 82       	std	Z+1, r1	; 0x01
    191c:	10 82       	st	Z, r1
    191e:	08 95       	ret

00001920 <Buffer_pop>:
    1920:	fc 01       	movw	r30, r24
    1922:	84 ad       	ldd	r24, Z+60	; 0x3c
    1924:	95 ad       	ldd	r25, Z+61	; 0x3d
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	95 af       	std	Z+61, r25	; 0x3d
    192a:	84 af       	std	Z+60, r24	; 0x3c
    192c:	26 ad       	ldd	r18, Z+62	; 0x3e
    192e:	37 ad       	ldd	r19, Z+63	; 0x3f
    1930:	df 01       	movw	r26, r30
    1932:	a2 0f       	add	r26, r18
    1934:	b3 1f       	adc	r27, r19
    1936:	8c 91       	ld	r24, X
    1938:	2f 5f       	subi	r18, 0xFF	; 255
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	2c 33       	cpi	r18, 0x3C	; 60
    193e:	31 05       	cpc	r19, r1
    1940:	19 f0       	breq	.+6      	; 0x1948 <Buffer_pop+0x28>
    1942:	37 af       	std	Z+63, r19	; 0x3f
    1944:	26 af       	std	Z+62, r18	; 0x3e
    1946:	08 95       	ret
    1948:	17 ae       	std	Z+63, r1	; 0x3f
    194a:	16 ae       	std	Z+62, r1	; 0x3e
    194c:	08 95       	ret

0000194e <Buffer_get>:
    194e:	fc 01       	movw	r30, r24
    1950:	26 ad       	ldd	r18, Z+62	; 0x3e
    1952:	37 ad       	ldd	r19, Z+63	; 0x3f
    1954:	62 0f       	add	r22, r18
    1956:	73 1f       	adc	r23, r19
    1958:	6c 33       	cpi	r22, 0x3C	; 60
    195a:	71 05       	cpc	r23, r1
    195c:	10 f0       	brcs	.+4      	; 0x1962 <Buffer_get+0x14>
    195e:	6c 53       	subi	r22, 0x3C	; 60
    1960:	71 09       	sbc	r23, r1
    1962:	fc 01       	movw	r30, r24
    1964:	e6 0f       	add	r30, r22
    1966:	f7 1f       	adc	r31, r23
    1968:	80 81       	ld	r24, Z
    196a:	08 95       	ret

0000196c <Buffer_clear>:

void Buffer_clear(Buffer_t *buf)
{
	buf->size = 0;
    196c:	fc 01       	movw	r30, r24
    196e:	15 ae       	std	Z+61, r1	; 0x3d
    1970:	14 ae       	std	Z+60, r1	; 0x3c
	buf->head = 0;
    1972:	17 ae       	std	Z+63, r1	; 0x3f
    1974:	16 ae       	std	Z+62, r1	; 0x3e
	buf->tail = 0;
    1976:	e0 5c       	subi	r30, 0xC0	; 192
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	11 82       	std	Z+1, r1	; 0x01
    197c:	10 82       	st	Z, r1
    197e:	08 95       	ret

00001980 <crc>:
uint8_t crc (uint8_t const *arr, uint8_t size) {

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	uint8_t i;
	for (i = 0; i < size; ++i) {
    1980:	66 23       	and	r22, r22
    1982:	b9 f0       	breq	.+46     	; 0x19b2 <crc+0x32>
    1984:	fc 01       	movw	r30, r24
    1986:	61 50       	subi	r22, 0x01	; 1
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	6f 5f       	subi	r22, 0xFF	; 255
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	68 0f       	add	r22, r24
    1990:	79 1f       	adc	r23, r25
    1992:	80 e0       	ldi	r24, 0x00	; 0

		for (j = 0; j < 8; ++j) {
			uint8_t sum = (value ^ data) & (uint8_t)0x01;
			value >>= 1;
			if (sum)
				value ^= POLYNOMIAL;
    1994:	4c e8       	ldi	r20, 0x8C	; 140

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	uint8_t i;
	for (i = 0; i < size; ++i) {
		uint8_t data = arr[i];
    1996:	21 91       	ld	r18, Z+
    1998:	98 e0       	ldi	r25, 0x08	; 8
		uint8_t j;

		for (j = 0; j < 8; ++j) {
			uint8_t sum = (value ^ data) & (uint8_t)0x01;
    199a:	38 2f       	mov	r19, r24
    199c:	32 27       	eor	r19, r18
			value >>= 1;
    199e:	86 95       	lsr	r24
			if (sum)
    19a0:	30 fd       	sbrc	r19, 0
				value ^= POLYNOMIAL;
    19a2:	84 27       	eor	r24, r20
			data >>= 1;
    19a4:	26 95       	lsr	r18
    19a6:	91 50       	subi	r25, 0x01	; 1
	uint8_t i;
	for (i = 0; i < size; ++i) {
		uint8_t data = arr[i];
		uint8_t j;

		for (j = 0; j < 8; ++j) {
    19a8:	c1 f7       	brne	.-16     	; 0x199a <crc+0x1a>
uint8_t crc (uint8_t const *arr, uint8_t size) {

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
	uint8_t i;
	for (i = 0; i < size; ++i) {
    19aa:	e6 17       	cp	r30, r22
    19ac:	f7 07       	cpc	r31, r23
    19ae:	99 f7       	brne	.-26     	; 0x1996 <crc+0x16>
    19b0:	08 95       	ret
 * @return  Returns the CRC code for the given packet.
 */
uint8_t crc (uint8_t const *arr, uint8_t size) {

	const uint8_t POLYNOMIAL = 0x8C;
	uint8_t value = 0x00;
    19b2:	80 e0       	ldi	r24, 0x00	; 0
		}

	}

	return value;
}
    19b4:	08 95       	ret

000019b6 <FT_Init>:
 */

void FT_Init (FT_t * handle,
							uint8_t address,
							void(*put)(uint8_t), uint8_t(*get)(), bool(*empty)())
{
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	ec 01       	movw	r28, r24
	// initialize local data:
	handle->address = address;
    19c0:	fc 01       	movw	r30, r24
    19c2:	61 93       	st	Z+, r22
    19c4:	49 96       	adiw	r24, 0x19	; 25
    19c6:	dc 01       	movw	r26, r24

	int i;
	for (i = 0; i < ARRAY_SZ; ++i) {
		handle->array[i] = 0;
    19c8:	11 92       	st	Z+, r1
    19ca:	11 92       	st	Z+, r1
		handle->flags[i] = false;
    19cc:	1d 92       	st	X+, r1
{
	// initialize local data:
	handle->address = address;

	int i;
	for (i = 0; i < ARRAY_SZ; ++i) {
    19ce:	e8 17       	cp	r30, r24
    19d0:	f9 07       	cpc	r31, r25
    19d2:	d1 f7       	brne	.-12     	; 0x19c8 <FT_Init+0x12>
		handle->array[i] = 0;
		handle->flags[i] = false;
	}

	// initialize callback function members:
	handle->put = put;
    19d4:	fe 01       	movw	r30, r28
    19d6:	e7 55       	subi	r30, 0x57	; 87
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	51 83       	std	Z+1, r21	; 0x01
    19dc:	40 83       	st	Z, r20
	handle->get = get;
    19de:	32 96       	adiw	r30, 0x02	; 2
    19e0:	31 83       	std	Z+1, r19	; 0x01
    19e2:	20 83       	st	Z, r18
	handle->empty = empty;
    19e4:	32 96       	adiw	r30, 0x02	; 2
    19e6:	11 83       	std	Z+1, r17	; 0x01
    19e8:	00 83       	st	Z, r16

	// initialize receive/transmit buffers:
	Buffer_init(&handle->receive_buf);
    19ea:	ce 01       	movw	r24, r28
    19ec:	85 96       	adiw	r24, 0x25	; 37
    19ee:	54 df       	rcall	.-344    	; 0x1898 <Buffer_init>
	Buffer_init(&handle->transmit_buf);
    19f0:	ce 01       	movw	r24, r28
    19f2:	89 59       	subi	r24, 0x99	; 153
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	50 df       	rcall	.-352    	; 0x1898 <Buffer_init>
}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	08 95       	ret

00001a02 <FT_Read>:

int16_t FT_Read (FT_t * handle, uint8_t index)
{
	handle->flags[index] = false;
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	fc 01       	movw	r30, r24
    1a06:	e6 0f       	add	r30, r22
    1a08:	f7 1f       	adc	r31, r23
    1a0a:	11 8e       	std	Z+25, r1	; 0x19
	return (int16_t)(handle->array[index]);
    1a0c:	66 0f       	add	r22, r22
    1a0e:	77 1f       	adc	r23, r23
    1a10:	fc 01       	movw	r30, r24
    1a12:	e6 0f       	add	r30, r22
    1a14:	f7 1f       	adc	r31, r23
}
    1a16:	81 81       	ldd	r24, Z+1	; 0x01
    1a18:	92 81       	ldd	r25, Z+2	; 0x02
    1a1a:	08 95       	ret

00001a1c <FT_Modified>:

bool FT_Modified (FT_t * handle, uint8_t index)
{
	bool temp = handle->flags[index];
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	e6 0f       	add	r30, r22
    1a20:	f1 1d       	adc	r31, r1
    1a22:	81 8d       	ldd	r24, Z+25	; 0x19
	handle->flags[index] = false;
    1a24:	11 8e       	std	Z+25, r1	; 0x19
	return temp;
}
    1a26:	08 95       	ret

00001a28 <FT_Receive>:
unsigned char val;
unsigned char tmpVal;
void FT_Receive (FT_t * handle)
{
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	7c 01       	movw	r14, r24
	//printUART1 ();
	//PORTA ^= (1 << 5);
	// transfer bytes from serial buffer into local buffer
	while (!isUART1_ReceiveEmpty() && !Buffer_full(&handle->receive_buf)) {
		val = USART1_get_C();
		handle->receive_buf.data[(unsigned int)(handle->receive_buf.tail)] = (unsigned char)val;
    1a3a:	ec 01       	movw	r28, r24
    1a3c:	cb 59       	subi	r28, 0x9B	; 155
    1a3e:	df 4f       	sbci	r29, 0xFF	; 255
		handle->receive_buf.tail = handle->receive_buf.tail + 1;
		if (handle->receive_buf.tail == MAX_PCKT_SZ)
			handle->receive_buf.tail = 0;
		if(handle->receive_buf.size <= MAX_PCKT_SZ)
    1a40:	6c 01       	movw	r12, r24
    1a42:	81 e6       	ldi	r24, 0x61	; 97
    1a44:	c8 0e       	add	r12, r24
    1a46:	d1 1c       	adc	r13, r1
void FT_Receive (FT_t * handle)
{
	//printUART1 ();
	//PORTA ^= (1 << 5);
	// transfer bytes from serial buffer into local buffer
	while (!isUART1_ReceiveEmpty() && !Buffer_full(&handle->receive_buf)) {
    1a48:	87 01       	movw	r16, r14
    1a4a:	0b 5d       	subi	r16, 0xDB	; 219
    1a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4e:	1d c0       	rjmp	.+58     	; 0x1a8a <FT_Receive+0x62>
		val = USART1_get_C();
    1a50:	0e 94 ff 01 	call	0x3fe	; 0x3fe <USART1_get_C>
    1a54:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <val>
		handle->receive_buf.data[(unsigned int)(handle->receive_buf.tail)] = (unsigned char)val;
    1a58:	28 81       	ld	r18, Y
    1a5a:	39 81       	ldd	r19, Y+1	; 0x01
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	e2 0f       	add	r30, r18
    1a60:	f3 1f       	adc	r31, r19
    1a62:	85 a3       	std	Z+37, r24	; 0x25
		handle->receive_buf.tail = handle->receive_buf.tail + 1;
    1a64:	2f 5f       	subi	r18, 0xFF	; 255
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
		if (handle->receive_buf.tail == MAX_PCKT_SZ)
    1a68:	2c 33       	cpi	r18, 0x3C	; 60
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	19 f0       	breq	.+6      	; 0x1a74 <FT_Receive+0x4c>
	//PORTA ^= (1 << 5);
	// transfer bytes from serial buffer into local buffer
	while (!isUART1_ReceiveEmpty() && !Buffer_full(&handle->receive_buf)) {
		val = USART1_get_C();
		handle->receive_buf.data[(unsigned int)(handle->receive_buf.tail)] = (unsigned char)val;
		handle->receive_buf.tail = handle->receive_buf.tail + 1;
    1a6e:	39 83       	std	Y+1, r19	; 0x01
    1a70:	28 83       	st	Y, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <FT_Receive+0x50>
		if (handle->receive_buf.tail == MAX_PCKT_SZ)
			handle->receive_buf.tail = 0;
    1a74:	19 82       	std	Y+1, r1	; 0x01
    1a76:	18 82       	st	Y, r1
		if(handle->receive_buf.size <= MAX_PCKT_SZ)
    1a78:	f6 01       	movw	r30, r12
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	8d 33       	cpi	r24, 0x3D	; 61
    1a80:	91 05       	cpc	r25, r1
    1a82:	18 f4       	brcc	.+6      	; 0x1a8a <FT_Receive+0x62>
			handle->receive_buf.size = handle->receive_buf.size + 1;
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
void FT_Receive (FT_t * handle)
{
	//printUART1 ();
	//PORTA ^= (1 << 5);
	// transfer bytes from serial buffer into local buffer
	while (!isUART1_ReceiveEmpty() && !Buffer_full(&handle->receive_buf)) {
    1a8a:	0e 94 07 02 	call	0x40e	; 0x40e <isUART1_ReceiveEmpty>
    1a8e:	81 11       	cpse	r24, r1
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <FT_Receive+0x72>
    1a92:	c8 01       	movw	r24, r16
    1a94:	0f df       	rcall	.-482    	; 0x18b4 <Buffer_full>
    1a96:	88 23       	and	r24, r24
    1a98:	d9 f2       	breq	.-74     	; 0x1a50 <FT_Receive+0x28>
			handle->receive_buf.tail = 0;
		if(handle->receive_buf.size <= MAX_PCKT_SZ)
			handle->receive_buf.size = handle->receive_buf.size + 1;
	}
	// parse/extract messages from local buffer and update local array
	parse(&handle->receive_buf, handle->array, handle->flags, ARRAY_SZ, handle->address);
    1a9a:	a7 01       	movw	r20, r14
    1a9c:	47 5e       	subi	r20, 0xE7	; 231
    1a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa0:	b7 01       	movw	r22, r14
    1aa2:	6f 5f       	subi	r22, 0xFF	; 255
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	f7 01       	movw	r30, r14
    1aa8:	00 81       	ld	r16, Z
    1aaa:	2c e0       	ldi	r18, 0x0C	; 12
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	c7 01       	movw	r24, r14
    1ab0:	85 96       	adiw	r24, 0x25	; 37
    1ab2:	c5 d2       	rcall	.+1418   	; 0x203e <parse>
}
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
    1ac4:	08 95       	ret

00001ac6 <FT_ToSend>:


void FT_ToSend (FT_t * handle, uint8_t index, int16_t data)
{
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	04 2f       	mov	r16, r20
    1ad0:	15 2f       	mov	r17, r21
	uint16_t combined = (uint16_t)data;
	uint8_t msb = (combined >> 8);
	uint8_t lsb = combined & 0x00FF;
	Buffer_push(&handle->transmit_buf, index);
    1ad2:	ec 01       	movw	r28, r24
    1ad4:	c9 59       	subi	r28, 0x99	; 153
    1ad6:	df 4f       	sbci	r29, 0xFF	; 255
    1ad8:	ce 01       	movw	r24, r28
    1ada:	fe de       	rcall	.-516    	; 0x18d8 <Buffer_push>
	Buffer_push(&handle->transmit_buf, lsb);
    1adc:	60 2f       	mov	r22, r16
    1ade:	ce 01       	movw	r24, r28
    1ae0:	fb de       	rcall	.-522    	; 0x18d8 <Buffer_push>
	Buffer_push(&handle->transmit_buf, msb);
    1ae2:	61 2f       	mov	r22, r17
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	f8 de       	rcall	.-528    	; 0x18d8 <Buffer_push>

}
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <FT_Send>:

void FT_Send (FT_t * handle, uint8_t address)
{
    1af2:	6f 92       	push	r6
    1af4:	7f 92       	push	r7
    1af6:	8f 92       	push	r8
    1af8:	9f 92       	push	r9
    1afa:	af 92       	push	r10
    1afc:	bf 92       	push	r11
    1afe:	cf 92       	push	r12
    1b00:	df 92       	push	r13
    1b02:	ef 92       	push	r14
    1b04:	ff 92       	push	r15
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	ec 97       	sbiw	r28, 0x3c	; 60
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	4c 01       	movw	r8, r24
    1b20:	d6 2e       	mov	r13, r22
	size_t payload_sz = Buffer_size(&handle->transmit_buf);
    1b22:	7c 01       	movw	r14, r24
    1b24:	87 e6       	ldi	r24, 0x67	; 103
    1b26:	e8 0e       	add	r14, r24
    1b28:	f1 1c       	adc	r15, r1
    1b2a:	c7 01       	movw	r24, r14
    1b2c:	bf de       	rcall	.-642    	; 0x18ac <Buffer_size>
    1b2e:	3c 01       	movw	r6, r24

	// abandon send if there is no payload
	if (payload_sz == 0)
    1b30:	89 2b       	or	r24, r25
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <FT_Send+0x44>
    1b34:	3e c0       	rjmp	.+124    	; 0x1bb2 <FT_Send+0xc0>
		return;

	// populate header
	handle->put(0x06);
    1b36:	84 01       	movw	r16, r8
    1b38:	07 55       	subi	r16, 0x57	; 87
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	d8 01       	movw	r26, r16
    1b3e:	ed 91       	ld	r30, X+
    1b40:	fc 91       	ld	r31, X
    1b42:	86 e0       	ldi	r24, 0x06	; 6
    1b44:	09 95       	icall
	handle->put(0x85);
    1b46:	d8 01       	movw	r26, r16
    1b48:	ed 91       	ld	r30, X+
    1b4a:	fc 91       	ld	r31, X
    1b4c:	85 e8       	ldi	r24, 0x85	; 133
    1b4e:	09 95       	icall
	handle->put(address);
    1b50:	d8 01       	movw	r26, r16
    1b52:	ed 91       	ld	r30, X+
    1b54:	fc 91       	ld	r31, X
    1b56:	8d 2d       	mov	r24, r13
    1b58:	09 95       	icall
	handle->put(handle->address);
    1b5a:	d8 01       	movw	r26, r16
    1b5c:	ed 91       	ld	r30, X+
    1b5e:	fc 91       	ld	r31, X
    1b60:	d4 01       	movw	r26, r8
    1b62:	8c 91       	ld	r24, X
    1b64:	09 95       	icall
	handle->put(payload_sz);
    1b66:	d8 01       	movw	r26, r16
    1b68:	ed 91       	ld	r30, X+
    1b6a:	fc 91       	ld	r31, X
    1b6c:	86 2d       	mov	r24, r6
    1b6e:	09 95       	icall
    1b70:	8e 01       	movw	r16, r28
    1b72:	0f 5f       	subi	r16, 0xFF	; 255
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	58 01       	movw	r10, r16
    1b78:	a6 0c       	add	r10, r6
    1b7a:	b7 1c       	adc	r11, r7
	unsigned int i;
	for (i = 0; i < payload_sz; ++i)
	{
		uint8_t next_byte = Buffer_pop(&handle->transmit_buf);
		payload[i] = next_byte;
		handle->put(next_byte);
    1b7c:	64 01       	movw	r12, r8
    1b7e:	b9 ea       	ldi	r27, 0xA9	; 169
    1b80:	cb 0e       	add	r12, r27
    1b82:	d1 1c       	adc	r13, r1
	// add the payload
	uint8_t payload [MAX_PCKT_SZ];
	unsigned int i;
	for (i = 0; i < payload_sz; ++i)
	{
		uint8_t next_byte = Buffer_pop(&handle->transmit_buf);
    1b84:	c7 01       	movw	r24, r14
    1b86:	cc de       	rcall	.-616    	; 0x1920 <Buffer_pop>
		payload[i] = next_byte;
    1b88:	f8 01       	movw	r30, r16
    1b8a:	81 93       	st	Z+, r24
    1b8c:	8f 01       	movw	r16, r30
		handle->put(next_byte);
    1b8e:	d6 01       	movw	r26, r12
    1b90:	ed 91       	ld	r30, X+
    1b92:	fc 91       	ld	r31, X
    1b94:	09 95       	icall
	handle->put(payload_sz);

	// add the payload
	uint8_t payload [MAX_PCKT_SZ];
	unsigned int i;
	for (i = 0; i < payload_sz; ++i)
    1b96:	0a 15       	cp	r16, r10
    1b98:	1b 05       	cpc	r17, r11
    1b9a:	a1 f7       	brne	.-24     	; 0x1b84 <FT_Send+0x92>
		payload[i] = next_byte;
		handle->put(next_byte);
	}

	// add the CRC code
	handle->put(crc(payload, payload_sz));
    1b9c:	f4 01       	movw	r30, r8
    1b9e:	e7 55       	subi	r30, 0x57	; 87
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	00 81       	ld	r16, Z
    1ba4:	11 81       	ldd	r17, Z+1	; 0x01
    1ba6:	66 2d       	mov	r22, r6
    1ba8:	ce 01       	movw	r24, r28
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	e9 de       	rcall	.-558    	; 0x1980 <crc>
    1bae:	f8 01       	movw	r30, r16
    1bb0:	09 95       	icall

}
    1bb2:	ec 96       	adiw	r28, 0x3c	; 60
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	df 90       	pop	r13
    1bcc:	cf 90       	pop	r12
    1bce:	bf 90       	pop	r11
    1bd0:	af 90       	pop	r10
    1bd2:	9f 90       	pop	r9
    1bd4:	8f 90       	pop	r8
    1bd6:	7f 90       	pop	r7
    1bd8:	6f 90       	pop	r6
    1bda:	08 95       	ret

00001bdc <Parser_init>:
}

int Parser_status ()
{
	return m_status;
}
    1bdc:	0f 93       	push	r16
    1bde:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <m_buf+0x1>
    1be2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <m_buf>
    1be6:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <m_arr+0x1>
    1bea:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <m_arr>
    1bee:	50 93 4a 01 	sts	0x014A, r21	; 0x80014a <m_flags+0x1>
    1bf2:	40 93 49 01 	sts	0x0149, r20	; 0x800149 <m_flags>
    1bf6:	30 93 48 01 	sts	0x0148, r19	; 0x800148 <m_arr_size+0x1>
    1bfa:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <m_arr_size>
    1bfe:	00 93 46 01 	sts	0x0146, r16	; 0x800146 <m_address>
    1c02:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <m_length>
    1c06:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <m_lookahead+0x1>
    1c0a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <m_lookahead>
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1c16:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1c1a:	0f 91       	pop	r16
    1c1c:	08 95       	ret

00001c1e <Parser_first_byte>:
    1c1e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1c22:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1c26:	42 de       	rcall	.-892    	; 0x18ac <Buffer_size>
    1c28:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <m_lookahead>
    1c2c:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <m_lookahead+0x1>
    1c30:	68 17       	cp	r22, r24
    1c32:	79 07       	cpc	r23, r25
    1c34:	38 f0       	brcs	.+14     	; 0x1c44 <Parser_first_byte+0x26>
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1c3e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1c42:	08 95       	ret
    1c44:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1c48:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1c4c:	80 de       	rcall	.-768    	; 0x194e <Buffer_get>
    1c4e:	86 30       	cpi	r24, 0x06	; 6
    1c50:	39 f0       	breq	.+14     	; 0x1c60 <Parser_first_byte+0x42>
    1c52:	83 e0       	ldi	r24, 0x03	; 3
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1c5a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1c5e:	08 95       	ret
    1c60:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <m_lookahead>
    1c64:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <m_lookahead+0x1>
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <m_lookahead+0x1>
    1c6e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <m_lookahead>
    1c72:	08 95       	ret

00001c74 <Parser_second_byte>:
    1c74:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1c78:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1c7c:	17 de       	rcall	.-978    	; 0x18ac <Buffer_size>
    1c7e:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <m_lookahead>
    1c82:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <m_lookahead+0x1>
    1c86:	68 17       	cp	r22, r24
    1c88:	79 07       	cpc	r23, r25
    1c8a:	38 f0       	brcs	.+14     	; 0x1c9a <Parser_second_byte+0x26>
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1c94:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1c98:	08 95       	ret
    1c9a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1c9e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1ca2:	55 de       	rcall	.-854    	; 0x194e <Buffer_get>
    1ca4:	85 38       	cpi	r24, 0x85	; 133
    1ca6:	39 f0       	breq	.+14     	; 0x1cb6 <Parser_second_byte+0x42>
    1ca8:	84 e0       	ldi	r24, 0x04	; 4
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1cb0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1cb4:	08 95       	ret
    1cb6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <m_lookahead>
    1cba:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <m_lookahead+0x1>
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <m_lookahead+0x1>
    1cc4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <m_lookahead>
    1cc8:	08 95       	ret

00001cca <Parser_sender>:
    1cca:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1cce:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1cd2:	ec dd       	rcall	.-1064   	; 0x18ac <Buffer_size>
    1cd4:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <m_lookahead>
    1cd8:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <m_lookahead+0x1>
    1cdc:	68 17       	cp	r22, r24
    1cde:	79 07       	cpc	r23, r25
    1ce0:	38 f0       	brcs	.+14     	; 0x1cf0 <Parser_sender+0x26>
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1cea:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1cee:	08 95       	ret
    1cf0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1cf4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1cf8:	2a de       	rcall	.-940    	; 0x194e <Buffer_get>
    1cfa:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <m_lookahead>
    1cfe:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <m_lookahead+0x1>
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <m_lookahead+0x1>
    1d08:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <m_lookahead>
    1d0c:	08 95       	ret

00001d0e <Parser_receiver>:
    1d0e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1d12:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1d16:	ca dd       	rcall	.-1132   	; 0x18ac <Buffer_size>
    1d18:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <m_lookahead>
    1d1c:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <m_lookahead+0x1>
    1d20:	68 17       	cp	r22, r24
    1d22:	79 07       	cpc	r23, r25
    1d24:	38 f0       	brcs	.+14     	; 0x1d34 <Parser_receiver+0x26>
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1d2e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1d32:	08 95       	ret
    1d34:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1d38:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1d3c:	08 de       	rcall	.-1008   	; 0x194e <Buffer_get>
    1d3e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <m_address>
    1d42:	89 17       	cp	r24, r25
    1d44:	39 f0       	breq	.+14     	; 0x1d54 <Parser_receiver+0x46>
    1d46:	85 e0       	ldi	r24, 0x05	; 5
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1d4e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1d52:	08 95       	ret
    1d54:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <m_lookahead>
    1d58:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <m_lookahead+0x1>
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <m_lookahead+0x1>
    1d62:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <m_lookahead>
    1d66:	08 95       	ret

00001d68 <Parser_message_length>:
    1d68:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1d6c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1d70:	9d dd       	rcall	.-1222   	; 0x18ac <Buffer_size>
    1d72:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <m_lookahead>
    1d76:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <m_lookahead+0x1>
    1d7a:	68 17       	cp	r22, r24
    1d7c:	79 07       	cpc	r23, r25
    1d7e:	38 f0       	brcs	.+14     	; 0x1d8e <Parser_message_length+0x26>
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1d88:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1d8c:	08 95       	ret
    1d8e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1d92:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1d96:	db dd       	rcall	.-1098   	; 0x194e <Buffer_get>
    1d98:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <m_length>
    1d9c:	8d 33       	cpi	r24, 0x3D	; 61
    1d9e:	50 f4       	brcc	.+20     	; 0x1db4 <Parser_message_length+0x4c>
    1da0:	9b ea       	ldi	r25, 0xAB	; 171
    1da2:	89 9f       	mul	r24, r25
    1da4:	91 2d       	mov	r25, r1
    1da6:	11 24       	eor	r1, r1
    1da8:	96 95       	lsr	r25
    1daa:	29 2f       	mov	r18, r25
    1dac:	22 0f       	add	r18, r18
    1dae:	92 0f       	add	r25, r18
    1db0:	89 17       	cp	r24, r25
    1db2:	39 f0       	breq	.+14     	; 0x1dc2 <Parser_message_length+0x5a>
    1db4:	86 e0       	ldi	r24, 0x06	; 6
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1dbc:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1dc0:	08 95       	ret
    1dc2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <m_lookahead>
    1dc6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <m_lookahead+0x1>
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <m_lookahead+0x1>
    1dd0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <m_lookahead>
    1dd4:	08 95       	ret

00001dd6 <Parser_message_content>:
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	c0 91 43 01 	lds	r28, 0x0143	; 0x800143 <m_lookahead>
    1dde:	d0 91 44 01 	lds	r29, 0x0144	; 0x800144 <m_lookahead+0x1>
    1de2:	21 97       	sbiw	r28, 0x01	; 1
    1de4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <m_length>
    1de8:	c8 0f       	add	r28, r24
    1dea:	d1 1d       	adc	r29, r1
    1dec:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1df0:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1df4:	5b dd       	rcall	.-1354   	; 0x18ac <Buffer_size>
    1df6:	c8 17       	cp	r28, r24
    1df8:	d9 07       	cpc	r29, r25
    1dfa:	38 f0       	brcs	.+14     	; 0x1e0a <Parser_message_content+0x34>
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1e04:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1e08:	0c c0       	rjmp	.+24     	; 0x1e22 <Parser_message_content+0x4c>
    1e0a:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <m_length>
    1e0e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <m_lookahead>
    1e12:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <m_lookahead+0x1>
    1e16:	82 0f       	add	r24, r18
    1e18:	91 1d       	adc	r25, r1
    1e1a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <m_lookahead+0x1>
    1e1e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <m_lookahead>
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <Parser_crc>:
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	ec 97       	sbiw	r28, 0x3c	; 60
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1e48:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1e4c:	2f dd       	rcall	.-1442   	; 0x18ac <Buffer_size>
    1e4e:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <m_lookahead>
    1e52:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <m_lookahead+0x1>
    1e56:	28 17       	cp	r18, r24
    1e58:	39 07       	cpc	r19, r25
    1e5a:	28 f4       	brcc	.+10     	; 0x1e66 <Parser_crc+0x3e>
    1e5c:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <m_length>
    1e60:	61 11       	cpse	r22, r1
    1e62:	08 c0       	rjmp	.+16     	; 0x1e74 <Parser_crc+0x4c>
    1e64:	20 c0       	rjmp	.+64     	; 0x1ea6 <Parser_crc+0x7e>
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1e6e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1e72:	38 c0       	rjmp	.+112    	; 0x1ee4 <Parser_crc+0xbc>
    1e74:	ce 01       	movw	r24, r28
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	7c 01       	movw	r14, r24
    1e7a:	00 e0       	ldi	r16, 0x00	; 0
    1e7c:	10 e0       	ldi	r17, 0x00	; 0
    1e7e:	b8 01       	movw	r22, r16
    1e80:	6b 5f       	subi	r22, 0xFB	; 251
    1e82:	7f 4f       	sbci	r23, 0xFF	; 255
    1e84:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1e88:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1e8c:	60 dd       	rcall	.-1344   	; 0x194e <Buffer_get>
    1e8e:	f7 01       	movw	r30, r14
    1e90:	81 93       	st	Z+, r24
    1e92:	7f 01       	movw	r14, r30
    1e94:	0f 5f       	subi	r16, 0xFF	; 255
    1e96:	1f 4f       	sbci	r17, 0xFF	; 255
    1e98:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <m_length>
    1e9c:	86 2f       	mov	r24, r22
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	08 17       	cp	r16, r24
    1ea2:	19 07       	cpc	r17, r25
    1ea4:	64 f3       	brlt	.-40     	; 0x1e7e <Parser_crc+0x56>
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	6a dd       	rcall	.-1324   	; 0x1980 <crc>
    1eac:	18 2f       	mov	r17, r24
    1eae:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <m_lookahead>
    1eb2:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <m_lookahead+0x1>
    1eb6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1eba:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1ebe:	47 dd       	rcall	.-1394   	; 0x194e <Buffer_get>
    1ec0:	18 17       	cp	r17, r24
    1ec2:	39 f0       	breq	.+14     	; 0x1ed2 <Parser_crc+0xaa>
    1ec4:	87 e0       	ldi	r24, 0x07	; 7
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <m_status+0x1>
    1ecc:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <m_status>
    1ed0:	09 c0       	rjmp	.+18     	; 0x1ee4 <Parser_crc+0xbc>
    1ed2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <m_lookahead>
    1ed6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <m_lookahead+0x1>
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <m_lookahead+0x1>
    1ee0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <m_lookahead>
    1ee4:	ec 96       	adiw	r28, 0x3c	; 60
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    1efa:	ef 90       	pop	r14
    1efc:	08 95       	ret

00001efe <Parser_trash_bytes>:

void Parser_trash_bytes (int num_bytes)
{
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
	while (num_bytes-- > 0)
    1f02:	ec 01       	movw	r28, r24
    1f04:	21 97       	sbiw	r28, 0x01	; 1
    1f06:	18 16       	cp	r1, r24
    1f08:	19 06       	cpc	r1, r25
    1f0a:	3c f4       	brge	.+14     	; 0x1f1a <Parser_trash_bytes+0x1c>
		Buffer_pop(m_buf);
    1f0c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1f10:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1f14:	05 dd       	rcall	.-1526   	; 0x1920 <Buffer_pop>
	return m_status;
}

void Parser_trash_bytes (int num_bytes)
{
	while (num_bytes-- > 0)
    1f16:	21 97       	sbiw	r28, 0x01	; 1
    1f18:	c8 f7       	brcc	.-14     	; 0x1f0c <Parser_trash_bytes+0xe>
		Buffer_pop(m_buf);
}
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	08 95       	ret

00001f20 <Parser_message>:

void Parser_message ()
{
	Parser_first_byte();
    1f20:	7e de       	rcall	.-772    	; 0x1c1e <Parser_first_byte>
	if (m_status != PARSE_STATUS_GOOD) return;
    1f22:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <m_status>
    1f26:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <m_status+0x1>
    1f2a:	01 97       	sbiw	r24, 0x01	; 1

	Parser_second_byte();
    1f2c:	21 f5       	brne	.+72     	; 0x1f76 <Parser_message+0x56>
    1f2e:	a2 de       	rcall	.-700    	; 0x1c74 <Parser_second_byte>
	if (m_status != PARSE_STATUS_GOOD) return;
    1f30:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <m_status>
    1f34:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <m_status+0x1>
    1f38:	01 97       	sbiw	r24, 0x01	; 1

	Parser_receiver();
    1f3a:	e9 f4       	brne	.+58     	; 0x1f76 <Parser_message+0x56>
    1f3c:	e8 de       	rcall	.-560    	; 0x1d0e <Parser_receiver>
	if (m_status != PARSE_STATUS_GOOD) return;
    1f3e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <m_status>
    1f42:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <m_status+0x1>
    1f46:	01 97       	sbiw	r24, 0x01	; 1

	Parser_sender();
    1f48:	b1 f4       	brne	.+44     	; 0x1f76 <Parser_message+0x56>
    1f4a:	bf de       	rcall	.-642    	; 0x1cca <Parser_sender>
	if (m_status != PARSE_STATUS_GOOD) return;
    1f4c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <m_status>
    1f50:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <m_status+0x1>
    1f54:	01 97       	sbiw	r24, 0x01	; 1

	Parser_message_length();
    1f56:	79 f4       	brne	.+30     	; 0x1f76 <Parser_message+0x56>
    1f58:	07 df       	rcall	.-498    	; 0x1d68 <Parser_message_length>
	if (m_status != PARSE_STATUS_GOOD) return;
    1f5a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <m_status>
    1f5e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <m_status+0x1>
    1f62:	01 97       	sbiw	r24, 0x01	; 1

	Parser_message_content();
    1f64:	41 f4       	brne	.+16     	; 0x1f76 <Parser_message+0x56>
    1f66:	37 df       	rcall	.-402    	; 0x1dd6 <Parser_message_content>
	if (m_status != PARSE_STATUS_GOOD) return;
    1f68:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <m_status>
    1f6c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <m_status+0x1>
    1f70:	01 97       	sbiw	r24, 0x01	; 1

	Parser_crc();
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <Parser_message+0x56>
    1f74:	59 cf       	rjmp	.-334    	; 0x1e28 <Parser_crc>
    1f76:	08 95       	ret

00001f78 <Parser_write_message_data>:
}

void Parser_write_message_data ()
{
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
	// Write the message into the array
	const int MSG_BEGIN = 5;
	const int MSG_END = MSG_BEGIN + m_length;
    1f86:	00 91 45 01 	lds	r16, 0x0145	; 0x800145 <m_length>
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	0b 5f       	subi	r16, 0xFB	; 251
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for (i = MSG_BEGIN; i < MSG_END; i += 3)
    1f90:	06 30       	cpi	r16, 0x06	; 6
    1f92:	11 05       	cpc	r17, r1
    1f94:	0c f4       	brge	.+2      	; 0x1f98 <Parser_write_message_data+0x20>
    1f96:	40 c0       	rjmp	.+128    	; 0x2018 <Parser_write_message_data+0xa0>
    1f98:	c5 e0       	ldi	r28, 0x05	; 5
    1f9a:	d0 e0       	ldi	r29, 0x00	; 0
		uint16_t msb = Buffer_get(m_buf, i + 2);
		uint16_t data = (msb << 8) | lsb;

		if (index < m_arr_size) {
			m_arr[index] = data;
			m_flags[index] = true;
    1f9c:	dd 24       	eor	r13, r13
    1f9e:	d3 94       	inc	r13
	const int MSG_BEGIN = 5;
	const int MSG_END = MSG_BEGIN + m_length;
	int i;
	for (i = MSG_BEGIN; i < MSG_END; i += 3)
	{
		uint8_t index = Buffer_get(m_buf, i);
    1fa0:	be 01       	movw	r22, r28
    1fa2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1fa6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1faa:	d1 dc       	rcall	.-1630   	; 0x194e <Buffer_get>
    1fac:	f8 2e       	mov	r15, r24
		uint16_t lsb = Buffer_get(m_buf, i + 1);
    1fae:	be 01       	movw	r22, r28
    1fb0:	6f 5f       	subi	r22, 0xFF	; 255
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1fb8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1fbc:	c8 dc       	rcall	.-1648   	; 0x194e <Buffer_get>
    1fbe:	e8 2e       	mov	r14, r24
		uint16_t msb = Buffer_get(m_buf, i + 2);
    1fc0:	be 01       	movw	r22, r28
    1fc2:	6e 5f       	subi	r22, 0xFE	; 254
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    1fca:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    1fce:	bf dc       	rcall	.-1666   	; 0x194e <Buffer_get>
		uint16_t data = (msb << 8) | lsb;

		if (index < m_arr_size) {
    1fd0:	4f 2d       	mov	r20, r15
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <m_arr_size>
    1fd8:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <m_arr_size+0x1>
    1fdc:	42 17       	cp	r20, r18
    1fde:	53 07       	cpc	r21, r19
    1fe0:	bc f4       	brge	.+46     	; 0x2010 <Parser_write_message_data+0x98>
			m_arr[index] = data;
    1fe2:	9a 01       	movw	r18, r20
    1fe4:	44 0f       	add	r20, r20
    1fe6:	55 1f       	adc	r21, r21
    1fe8:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <m_arr>
    1fec:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <m_arr+0x1>
    1ff0:	e4 0f       	add	r30, r20
    1ff2:	f5 1f       	adc	r31, r21
    1ff4:	4e 2d       	mov	r20, r14
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	ba 01       	movw	r22, r20
    1ffa:	78 2b       	or	r23, r24
    1ffc:	71 83       	std	Z+1, r23	; 0x01
    1ffe:	60 83       	st	Z, r22
			m_flags[index] = true;
    2000:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <m_flags>
    2004:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <m_flags+0x1>
    2008:	fc 01       	movw	r30, r24
    200a:	e2 0f       	add	r30, r18
    200c:	f3 1f       	adc	r31, r19
    200e:	d0 82       	st	Z, r13
{
	// Write the message into the array
	const int MSG_BEGIN = 5;
	const int MSG_END = MSG_BEGIN + m_length;
	int i;
	for (i = MSG_BEGIN; i < MSG_END; i += 3)
    2010:	23 96       	adiw	r28, 0x03	; 3
    2012:	c0 17       	cp	r28, r16
    2014:	d1 07       	cpc	r29, r17
    2016:	24 f2       	brlt	.-120    	; 0x1fa0 <Parser_write_message_data+0x28>

		}
	}

	// Pop the bytes from the buffer
	int n = m_length + 6;
    2018:	c0 91 45 01 	lds	r28, 0x0145	; 0x800145 <m_length>
    201c:	d0 e0       	ldi	r29, 0x00	; 0
	while (n-- > 0)
    201e:	25 96       	adiw	r28, 0x05	; 5
		Buffer_pop(m_buf);
    2020:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    2024:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    2028:	7b dc       	rcall	.-1802   	; 0x1920 <Buffer_pop>
		}
	}

	// Pop the bytes from the buffer
	int n = m_length + 6;
	while (n-- > 0)
    202a:	21 97       	sbiw	r28, 0x01	; 1
    202c:	c8 f7       	brcc	.-14     	; 0x2020 <Parser_write_message_data+0xa8>
		Buffer_pop(m_buf);
}
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	ff 90       	pop	r15
    2038:	ef 90       	pop	r14
    203a:	df 90       	pop	r13
    203c:	08 95       	ret

0000203e <parse>:
/*
 * API Function
 */

void parse (Buffer_t * buf, uint16_t * arr, bool * flags, int arr_size, uint8_t address)
{
    203e:	8f 92       	push	r8
    2040:	9f 92       	push	r9
    2042:	af 92       	push	r10
    2044:	bf 92       	push	r11
    2046:	cf 92       	push	r12
    2048:	df 92       	push	r13
    204a:	ef 92       	push	r14
    204c:	ff 92       	push	r15
    204e:	0f 93       	push	r16
    2050:	cf 93       	push	r28
    2052:	4c 01       	movw	r8, r24
    2054:	5b 01       	movw	r10, r22
    2056:	6a 01       	movw	r12, r20
    2058:	79 01       	movw	r14, r18
    205a:	c0 2f       	mov	r28, r16
	while (1)
	{
		// reset the parsing module
		Parser_init(buf, arr, flags, arr_size, address);
    205c:	0c 2f       	mov	r16, r28
    205e:	97 01       	movw	r18, r14
    2060:	a6 01       	movw	r20, r12
    2062:	b5 01       	movw	r22, r10
    2064:	c4 01       	movw	r24, r8
    2066:	ba dd       	rcall	.-1164   	; 0x1bdc <Parser_init>

		if (Buffer_empty(m_buf))
    2068:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    206c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    2070:	2a dc       	rcall	.-1964   	; 0x18c6 <Buffer_empty>
    2072:	81 11       	cpse	r24, r1
			// exit because no more data in buffer
			return;

		Parser_message();
    2074:	24 c0       	rjmp	.+72     	; 0x20be <parse+0x80>
    2076:	54 df       	rcall	.-344    	; 0x1f20 <Parser_message>
		int status = Parser_status();

		switch (status)
    2078:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <m_status>
    207c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <m_status+0x1>
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	91 05       	cpc	r25, r1
    2084:	19 f0       	breq	.+6      	; 0x208c <parse+0x4e>
    2086:	02 97       	sbiw	r24, 0x02	; 2
    2088:	29 f0       	breq	.+10     	; 0x2094 <parse+0x56>
		{
		case PARSE_STATUS_GOOD:
			Parser_write_message_data();
    208a:	13 c0       	rjmp	.+38     	; 0x20b2 <parse+0x74>
    208c:	75 df       	rcall	.-278    	; 0x1f78 <Parser_write_message_data>
			toggleLED(8);
    208e:	88 e0       	ldi	r24, 0x08	; 8
    2090:	3e d1       	rcall	.+636    	; 0x230e <toggleLED>
    2092:	e4 cf       	rjmp	.-56     	; 0x205c <parse+0x1e>
			break;

		case PARSE_STATUS_NOT_ENOUGH_DATA:
			if(Buffer_full(m_buf))
    2094:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    2098:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
    209c:	0b dc       	rcall	.-2026   	; 0x18b4 <Buffer_full>
    209e:	88 23       	and	r24, r24
    20a0:	29 f0       	breq	.+10     	; 0x20ac <parse+0x6e>
			{
				Buffer_clear(m_buf);
    20a2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <m_buf>
    20a6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <m_buf+0x1>
			}
			// exit because there is not enough data in the buffer
			// to finish the message
			toggleLED(9);
    20aa:	60 dc       	rcall	.-1856   	; 0x196c <Buffer_clear>
    20ac:	89 e0       	ldi	r24, 0x09	; 9
			return;
    20ae:	2f d1       	rcall	.+606    	; 0x230e <toggleLED>
		case PARSE_STATUS_BAD_ADDRESS:
		case PARSE_STATUS_BAD_MSG_LENGTH:
		case PARSE_STATUS_BAD_CRC_CODE:
		default:

			Parser_trash_bytes(1);
    20b0:	06 c0       	rjmp	.+12     	; 0x20be <parse+0x80>
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	23 df       	rcall	.-442    	; 0x1efe <Parser_trash_bytes>
			//if(status != PARSE_STATUS_BAD_FIRST_BYTE)
			//printf(": %d ",status);
			toggleLED(10);
    20b8:	8a e0       	ldi	r24, 0x0A	; 10
    20ba:	29 d1       	rcall	.+594    	; 0x230e <toggleLED>
    20bc:	cf cf       	rjmp	.-98     	; 0x205c <parse+0x1e>
			break;
    20be:	cf 91       	pop	r28
		}
	}
}
    20c0:	0f 91       	pop	r16
    20c2:	ff 90       	pop	r15
    20c4:	ef 90       	pop	r14
    20c6:	df 90       	pop	r13
    20c8:	cf 90       	pop	r12
    20ca:	bf 90       	pop	r11
    20cc:	af 90       	pop	r10
    20ce:	9f 90       	pop	r9
    20d0:	8f 90       	pop	r8
    20d2:	08 95       	ret

000020d4 <initialize>:
extern timer_t ledTimer,  checkCANTimer;

//#define WATCHDOG_RESET

void initialize(void)
{
    20d4:	cf 93       	push	r28
#ifdef WATCHDOG_RESET
	WDTCR= (1<<3)| (0b00000111);    //Enable watchdog with prescaler 111
#endif
	//stdout = &mystdout;
	//Startup the USARTs
	USART1_Init(115200); //control box
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	72 ec       	ldi	r23, 0xC2	; 194
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	0e 94 6f 01 	call	0x2de	; 0x2de <USART1_Init>
	USART0_Init(115200); //beacon
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	72 ec       	ldi	r23, 0xC2	; 194
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <USART0_Init>
//Initialize the timer0 and timer systems
	initTimer0();
    20ee:	1f d6       	rcall	.+3134   	; 0x2d2e <initTimer0>

	setupCommsTimers();
    20f0:	4b db       	rcall	.-2410   	; 0x1788 <setupCommsTimers>
    20f2:	8f e7       	ldi	r24, 0x7F	; 127


	//Setup the I/O ports
	PORTA = 0b01111111;
    20f4:	82 b9       	out	0x02, r24	; 2
    20f6:	88 ef       	ldi	r24, 0xF8	; 248
	PORTF = 0b11111000;
    20f8:	81 bb       	out	0x11, r24	; 17
    20fa:	9f ef       	ldi	r25, 0xFF	; 255
	DDRA  = 0b11111111; //0-6 are outputs, 7 is an input (jumper for competition mode) //(Currently an output for debug)
    20fc:	91 b9       	out	0x01, r25	; 1
	DDRF  = 0b11111000; //3-7 are outputs
    20fe:	80 bb       	out	0x10, r24	; 16
#ifdef WATCHDOG_RESET
	//Clear watchdog
	WDTCR = 0b00011000;
	WDTCR = 0b00010000;
#endif
	initLED();
    2100:	5a d0       	rcall	.+180    	; 0x21b6 <initLED>
    2102:	78 94       	sei
	sei();
    2104:	c1 e0       	ldi	r28, 0x01	; 1

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
	{
		setLED(i,ON);
    2106:	61 e0       	ldi	r22, 0x01	; 1
    2108:	8c 2f       	mov	r24, r28
    210a:	9c d0       	rcall	.+312    	; 0x2244 <setLED>
    210c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    210e:	80 e7       	ldi	r24, 0x70	; 112
    2110:	92 e0       	ldi	r25, 0x02	; 2
    2112:	21 50       	subi	r18, 0x01	; 1
    2114:	80 40       	sbci	r24, 0x00	; 0
    2116:	90 40       	sbci	r25, 0x00	; 0
    2118:	e1 f7       	brne	.-8      	; 0x2112 <initialize+0x3e>
    211a:	00 c0       	rjmp	.+0      	; 0x211c <initialize+0x48>
    211c:	00 00       	nop
    211e:	cf 5f       	subi	r28, 0xFF	; 255
    2120:	cd 30       	cpi	r28, 0x0D	; 13
	WDTCR = 0b00010000;
#endif
	initLED();
	sei();

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
    2122:	89 f7       	brne	.-30     	; 0x2106 <initialize+0x32>
    2124:	2f ef       	ldi	r18, 0xFF	; 255
    2126:	83 ed       	ldi	r24, 0xD3	; 211
    2128:	90 e3       	ldi	r25, 0x30	; 48
    212a:	21 50       	subi	r18, 0x01	; 1
    212c:	80 40       	sbci	r24, 0x00	; 0
    212e:	90 40       	sbci	r25, 0x00	; 0
    2130:	e1 f7       	brne	.-8      	; 0x212a <initialize+0x56>
    2132:	00 c0       	rjmp	.+0      	; 0x2134 <initialize+0x60>
    2134:	00 00       	nop
    2136:	c1 e0       	ldi	r28, 0x01	; 1

	_delay_ms(1000);

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
	{
		setLED(i,OFF);
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	8c 2f       	mov	r24, r28
    213c:	83 d0       	rcall	.+262    	; 0x2244 <setLED>
    213e:	2f ef       	ldi	r18, 0xFF	; 255
    2140:	80 e7       	ldi	r24, 0x70	; 112
    2142:	92 e0       	ldi	r25, 0x02	; 2
    2144:	21 50       	subi	r18, 0x01	; 1
    2146:	80 40       	sbci	r24, 0x00	; 0
    2148:	90 40       	sbci	r25, 0x00	; 0
    214a:	e1 f7       	brne	.-8      	; 0x2144 <initialize+0x70>
    214c:	00 c0       	rjmp	.+0      	; 0x214e <initialize+0x7a>
    214e:	00 00       	nop
    2150:	cf 5f       	subi	r28, 0xFF	; 255
		_delay_ms(50);
	}

	_delay_ms(1000);

	for(int i=1; i <= NUMBER_OF_LEDS; i++)
    2152:	cd 30       	cpi	r28, 0x0D	; 13
	}
#ifdef WATCHDOG_RESET
	WDTCR= (1<<3)| (0b00000111);    //Enable watchdog with prescaler 111
#endif
	//Init the CAN here
	can_init();
    2154:	89 f7       	brne	.-30     	; 0x2138 <initialize+0x64>
    2156:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <can_init>
#ifndef DISABLE_MOTOR_SYSTEMS
	//Init the motors
	initMotors();
    215a:	9c d1       	rcall	.+824    	; 0x2494 <initMotors>

#endif
	//Start communciations handlers
	initCANFastTransfer();
    215c:	4d d8       	rcall	.-3942   	; 0x11f8 <initCANFastTransfer>
    215e:	cf 91       	pop	r28

#ifdef WATCHDOG_RESET
	WDTCR = 0b00011000;
	WDTCR = 0b00010000;
#endif
    2160:	08 95       	ret

00002162 <SetNeoPixRGB>:
    2162:	cf 93       	push	r28

			SetNeoPixRGB(rgbColour.r, rgbColour.g, rgbColour.b);
			_delay_us(100);
		}
	}
}
    2164:	df 93       	push	r29
    2166:	ea e7       	ldi	r30, 0x7A	; 122
    2168:	fc e0       	ldi	r31, 0x0C	; 12
    216a:	81 83       	std	Z+1, r24	; 0x01
    216c:	60 83       	st	Z, r22
    216e:	42 83       	std	Z+2, r20	; 0x02
    2170:	c0 e0       	ldi	r28, 0x00	; 0
    2172:	d0 e0       	ldi	r29, 0x00	; 0
    2174:	45 e0       	ldi	r20, 0x05	; 5
    2176:	be 01       	movw	r22, r28
    2178:	8a e7       	ldi	r24, 0x7A	; 122
    217a:	9c e0       	ldi	r25, 0x0C	; 12
    217c:	fa d0       	rcall	.+500    	; 0x2372 <ws2812_setleds>
    217e:	46 e0       	ldi	r20, 0x06	; 6
    2180:	be 01       	movw	r22, r28
    2182:	8a e7       	ldi	r24, 0x7A	; 122
    2184:	9c e0       	ldi	r25, 0x0C	; 12
    2186:	f5 d0       	rcall	.+490    	; 0x2372 <ws2812_setleds>
    2188:	21 96       	adiw	r28, 0x01	; 1
    218a:	c9 30       	cpi	r28, 0x09	; 9
    218c:	d1 05       	cpc	r29, r1
    218e:	91 f7       	brne	.-28     	; 0x2174 <SetNeoPixRGB+0x12>
    2190:	c1 e0       	ldi	r28, 0x01	; 1
    2192:	d0 e0       	ldi	r29, 0x00	; 0
    2194:	43 e0       	ldi	r20, 0x03	; 3
    2196:	be 01       	movw	r22, r28
    2198:	8a e7       	ldi	r24, 0x7A	; 122
    219a:	9c e0       	ldi	r25, 0x0C	; 12
    219c:	ea d0       	rcall	.+468    	; 0x2372 <ws2812_setleds>
    219e:	44 e0       	ldi	r20, 0x04	; 4
    21a0:	be 01       	movw	r22, r28
    21a2:	8a e7       	ldi	r24, 0x7A	; 122
    21a4:	9c e0       	ldi	r25, 0x0C	; 12
    21a6:	e5 d0       	rcall	.+458    	; 0x2372 <ws2812_setleds>
    21a8:	21 96       	adiw	r28, 0x01	; 1
    21aa:	c9 31       	cpi	r28, 0x19	; 25
    21ac:	d1 05       	cpc	r29, r1
    21ae:	91 f7       	brne	.-28     	; 0x2194 <SetNeoPixRGB+0x32>
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	08 95       	ret

000021b6 <initLED>:
void initLED()
{
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
	setTimerInterval(&LED_Flash, 1000);
    21ba:	08 ee       	ldi	r16, 0xE8	; 232
    21bc:	13 e0       	ldi	r17, 0x03	; 3
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	70 e0       	ldi	r23, 0x00	; 0
    21ca:	82 e5       	ldi	r24, 0x52	; 82
    21cc:	9c e0       	ldi	r25, 0x0C	; 12
    21ce:	d7 d4       	rcall	.+2478   	; 0x2b7e <setTimerInterval>
	SetNeoPixRGB(0, 0, 0);
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	c2 df       	rcall	.-124    	; 0x2162 <SetNeoPixRGB>
}
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	08 95       	ret

000021e4 <flashLedColors>:
		//_delay_ms(100);
	}
}

void flashLedColors(cRGB_t cRGB_1,cRGB_t cRGB_2)
{
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	16 2f       	mov	r17, r22
    21f2:	e7 2e       	mov	r14, r23
    21f4:	08 2f       	mov	r16, r24
    21f6:	c2 2f       	mov	r28, r18
    21f8:	f3 2e       	mov	r15, r19
    21fa:	d4 2f       	mov	r29, r20
	if(timerDone(&LED_Flash)) {
    21fc:	82 e5       	ldi	r24, 0x52	; 82
    21fe:	9c e0       	ldi	r25, 0x0C	; 12
    2200:	e6 d4       	rcall	.+2508   	; 0x2bce <timerDone>
    2202:	88 23       	and	r24, r24
    2204:	c1 f0       	breq	.+48     	; 0x2236 <flashLedColors+0x52>
		if(ToggleVal) {
    2206:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <ToggleVal>
    220a:	88 23       	and	r24, r24
    220c:	51 f0       	breq	.+20     	; 0x2222 <flashLedColors+0x3e>
			SetNeoPixRGB(cRGB_1.r, cRGB_1.g, cRGB_1.b);
    220e:	40 2f       	mov	r20, r16
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	61 2f       	mov	r22, r17
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	8e 2d       	mov	r24, r14
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a3 df       	rcall	.-186    	; 0x2162 <SetNeoPixRGB>
			ToggleVal = false;
    221c:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <ToggleVal>
    2220:	0a c0       	rjmp	.+20     	; 0x2236 <flashLedColors+0x52>
		} else {
			SetNeoPixRGB(cRGB_2.r, cRGB_2.g, cRGB_2.b);
    2222:	4d 2f       	mov	r20, r29
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	6c 2f       	mov	r22, r28
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	8f 2d       	mov	r24, r15
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	99 df       	rcall	.-206    	; 0x2162 <SetNeoPixRGB>
			ToggleVal = true;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <ToggleVal>
		}
	}

}
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	ff 90       	pop	r15
    2240:	ef 90       	pop	r14
    2242:	08 95       	ret

00002244 <setLED>:
void setLED(LEDs_ENUMED_t ledNumber, bool state)
{
    2244:	96 2f       	mov	r25, r22
	int ledToSwitch = 0;
	//HIGH SETS
	if(!state)
    2246:	61 11       	cpse	r22, r1
    2248:	1a c0       	rjmp	.+52     	; 0x227e <setLED+0x3a>
	{
		switch(ledNumber)
    224a:	48 2f       	mov	r20, r24
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	fa 01       	movw	r30, r20
    2250:	31 97       	sbiw	r30, 0x01	; 1
    2252:	ec 30       	cpi	r30, 0x0C	; 12
    2254:	f1 05       	cpc	r31, r1
    2256:	88 f5       	brcc	.+98     	; 0x22ba <setLED+0x76>
    2258:	e6 5b       	subi	r30, 0xB6	; 182
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	ad c5       	rjmp	.+2906   	; 0x2db8 <__tablejump2__>
			break;
		case LED7:
			ledToSwitch=LED7_P_HIGH;
			break;
		case LED8:
			ledToSwitch=LED8_P_HIGH;
    225e:	88 e0       	ldi	r24, 0x08	; 8
    2260:	40 c0       	rjmp	.+128    	; 0x22e2 <setLED+0x9e>
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_HIGH;
			break;
		case LED2:
			ledToSwitch=LED2_P_HIGH;
    2262:	80 e4       	ldi	r24, 0x40	; 64
    2264:	34 c0       	rjmp	.+104    	; 0x22ce <setLED+0x8a>
			ledToSwitch=LED9_P_HIGH;
			break;

		//LEDs on PORTA
		case LED3:
			ledToSwitch=LED3_P_HIGH;
    2266:	81 e0       	ldi	r24, 0x01	; 1
			break;
    2268:	3c c0       	rjmp	.+120    	; 0x22e2 <setLED+0x9e>
		case LED4:
			ledToSwitch=LED4_P_HIGH;
    226a:	84 e0       	ldi	r24, 0x04	; 4
			break;
    226c:	3a c0       	rjmp	.+116    	; 0x22e2 <setLED+0x9e>
		case LED5:
			ledToSwitch=LED5_P_HIGH;
    226e:	80 e1       	ldi	r24, 0x10	; 16
			break;
    2270:	38 c0       	rjmp	.+112    	; 0x22e2 <setLED+0x9e>
		case LED6:
			ledToSwitch=LED6_P_HIGH;
    2272:	80 e4       	ldi	r24, 0x40	; 64
			break;
    2274:	36 c0       	rjmp	.+108    	; 0x22e2 <setLED+0x9e>
		case LED10:
			ledToSwitch=LED10_P_HIGH;
			break;
		case LED11:
			ledToSwitch=LED11_P_HIGH;
    2276:	80 e2       	ldi	r24, 0x20	; 32
			break;
    2278:	2a c0       	rjmp	.+84     	; 0x22ce <setLED+0x8a>
		case LED12:
			ledToSwitch=LED12_P_HIGH;
    227a:	88 e0       	ldi	r24, 0x08	; 8
			break;
    227c:	28 c0       	rjmp	.+80     	; 0x22ce <setLED+0x8a>
#endif
		}
	}
	else
	{
		switch(ledNumber)
    227e:	48 2f       	mov	r20, r24
    2280:	50 e0       	ldi	r21, 0x00	; 0
    2282:	fa 01       	movw	r30, r20
    2284:	31 97       	sbiw	r30, 0x01	; 1
    2286:	ec 30       	cpi	r30, 0x0C	; 12
    2288:	f1 05       	cpc	r31, r1
    228a:	b8 f4       	brcc	.+46     	; 0x22ba <setLED+0x76>
    228c:	ea 5a       	subi	r30, 0xAA	; 170
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	93 c5       	rjmp	.+2854   	; 0x2db8 <__tablejump2__>
			break;
		case LED7:
			ledToSwitch=LED7_P_LOW;
			break;
		case LED8:
			ledToSwitch=LED8_P_LOW;
    2292:	87 ef       	ldi	r24, 0xF7	; 247
    2294:	26 c0       	rjmp	.+76     	; 0x22e2 <setLED+0x9e>
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_LOW;
			break;
		case LED2:
			ledToSwitch=LED2_P_LOW;
    2296:	8f eb       	ldi	r24, 0xBF	; 191
    2298:	1a c0       	rjmp	.+52     	; 0x22ce <setLED+0x8a>
			break;
		case LED8:
			ledToSwitch=LED8_P_LOW;
			break;
		case LED9:
			ledToSwitch=LED9_P_LOW;
    229a:	8d ef       	ldi	r24, 0xFD	; 253
			break;
    229c:	22 c0       	rjmp	.+68     	; 0x22e2 <setLED+0x9e>

		//LEDs on PORTA
		case LED3:
			ledToSwitch=LED3_P_LOW;
    229e:	8e ef       	ldi	r24, 0xFE	; 254
			break;
    22a0:	20 c0       	rjmp	.+64     	; 0x22e2 <setLED+0x9e>
		case LED4:
			ledToSwitch=LED4_P_LOW;
    22a2:	8b ef       	ldi	r24, 0xFB	; 251
			break;
    22a4:	1e c0       	rjmp	.+60     	; 0x22e2 <setLED+0x9e>
		case LED5:
			ledToSwitch=LED5_P_LOW;
    22a6:	8f ee       	ldi	r24, 0xEF	; 239
			break;
    22a8:	1c c0       	rjmp	.+56     	; 0x22e2 <setLED+0x9e>
		case LED6:
			ledToSwitch=LED6_P_LOW;
    22aa:	8f eb       	ldi	r24, 0xBF	; 191
			break;
    22ac:	1a c0       	rjmp	.+52     	; 0x22e2 <setLED+0x9e>
		case LED10:
			ledToSwitch=LED10_P_LOW;
    22ae:	8f e7       	ldi	r24, 0x7F	; 127
			break;
    22b0:	0e c0       	rjmp	.+28     	; 0x22ce <setLED+0x8a>
		case LED11:
			ledToSwitch=LED11_P_LOW;
    22b2:	8f ed       	ldi	r24, 0xDF	; 223
			break;
    22b4:	0c c0       	rjmp	.+24     	; 0x22ce <setLED+0x8a>
		case LED12:
			ledToSwitch=LED12_P_LOW;
    22b6:	87 ef       	ldi	r24, 0xF7	; 247
			break;
    22b8:	0a c0       	rjmp	.+20     	; 0x22ce <setLED+0x8a>


	}
#ifdef NEW_MAIN
	unsigned int portRead;
	switch(ledNumber)
    22ba:	8a 30       	cpi	r24, 0x0A	; 10
    22bc:	28 f4       	brcc	.+10     	; 0x22c8 <setLED+0x84>
    22be:	83 30       	cpi	r24, 0x03	; 3
    22c0:	78 f4       	brcc	.+30     	; 0x22e0 <setLED+0x9c>
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	18 f1       	brcs	.+70     	; 0x230c <setLED+0xc8>
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <setLED+0x88>
    22c8:	8d 30       	cpi	r24, 0x0D	; 13
    22ca:	00 f5       	brcc	.+64     	; 0x230c <setLED+0xc8>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
	case LED2:
	case LED10:
	case LED11:
	case LED12:

		portRead= PINF;
    22ce:	2f b1       	in	r18, 0x0f	; 15
		//if you want the LED off
		if(!state)
    22d0:	91 11       	cpse	r25, r1
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <setLED+0x96>
		{
			//Turn it high (OFF)
			PORTF = portRead | (ledToSwitch);
    22d4:	82 2b       	or	r24, r18
    22d6:	81 bb       	out	0x11, r24	; 17
    22d8:	08 95       	ret
		}
		else
		{
			//Turn it low (ON)
			PORTF = portRead & (ledToSwitch);
    22da:	82 23       	and	r24, r18
    22dc:	81 bb       	out	0x11, r24	; 17
    22de:	08 95       	ret


	}
#ifdef NEW_MAIN
	unsigned int portRead;
	switch(ledNumber)
    22e0:	80 e0       	ldi	r24, 0x00	; 0
	case LED5:
	case LED6:
	case LED7:
	case LED8:
	case LED9:
		portRead= PINA;
    22e2:	20 b1       	in	r18, 0x00	; 0
		//If you want the LED off
		if(!state)
    22e4:	91 11       	cpse	r25, r1
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <setLED+0xaa>
		{
			//Turn the port high (OFF)
			PORTA = portRead | (ledToSwitch);
    22e8:	82 2b       	or	r24, r18
    22ea:	82 b9       	out	0x02, r24	; 2
    22ec:	08 95       	ret
		}
		else
		{
			//Turn the port low (ON)
			PORTA = portRead & (ledToSwitch);
    22ee:	82 23       	and	r24, r18
    22f0:	82 b9       	out	0x02, r24	; 2
	{
		PORTA= PINA & (ledToSwitch);
	}
#endif

}
    22f2:	08 95       	ret
		switch(ledNumber)
		{
#ifdef NEW_MAIN
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_HIGH;
    22f4:	80 e1       	ldi	r24, 0x10	; 16
    22f6:	eb cf       	rjmp	.-42     	; 0x22ce <setLED+0x8a>
			break;
		case LED6:
			ledToSwitch=LED6_P_HIGH;
			break;
		case LED10:
			ledToSwitch=LED10_P_HIGH;
    22f8:	80 e8       	ldi	r24, 0x80	; 128
    22fa:	e9 cf       	rjmp	.-46     	; 0x22ce <setLED+0x8a>
		switch(ledNumber)
		{
#ifdef NEW_MAIN
		//LEDs on PORTF
		case LED1:
			ledToSwitch=LED1_P_LOW;
    22fc:	8f ee       	ldi	r24, 0xEF	; 239
    22fe:	e7 cf       	rjmp	.-50     	; 0x22ce <setLED+0x8a>
			break;
		case LED2:
			ledToSwitch=LED2_P_HIGH;
			break;
		case LED7:
			ledToSwitch=LED7_P_HIGH;
    2300:	80 e2       	ldi	r24, 0x20	; 32
    2302:	ef cf       	rjmp	.-34     	; 0x22e2 <setLED+0x9e>
			break;
		case LED8:
			ledToSwitch=LED8_P_HIGH;
			break;
		case LED9:
			ledToSwitch=LED9_P_HIGH;
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	ed cf       	rjmp	.-38     	; 0x22e2 <setLED+0x9e>
			break;
		case LED2:
			ledToSwitch=LED2_P_LOW;
			break;
		case LED7:
			ledToSwitch=LED7_P_LOW;
    2308:	8f ed       	ldi	r24, 0xDF	; 223
    230a:	eb cf       	rjmp	.-42     	; 0x22e2 <setLED+0x9e>
    230c:	08 95       	ret

0000230e <toggleLED>:
}

void toggleLED(LEDs_ENUMED_t ledNumber)
{
	int ledToSwitch=0;
	switch(ledNumber)
    230e:	48 2f       	mov	r20, r24
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	fa 01       	movw	r30, r20
    2314:	31 97       	sbiw	r30, 0x01	; 1
    2316:	ec 30       	cpi	r30, 0x0C	; 12
    2318:	f1 05       	cpc	r31, r1
    231a:	98 f4       	brcc	.+38     	; 0x2342 <toggleLED+0x34>
    231c:	ee 59       	subi	r30, 0x9E	; 158
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	4b c5       	rjmp	.+2710   	; 0x2db8 <__tablejump2__>
		break;
	case LED7:
		ledToSwitch=LED7_P_HIGH;
		break;
	case LED8:
		ledToSwitch=LED8_P_HIGH;
    2322:	88 e0       	ldi	r24, 0x08	; 8
    2324:	1b c0       	rjmp	.+54     	; 0x235c <toggleLED+0x4e>
	//LEDs on PORTF
	case LED1:
		ledToSwitch=LED1_P_HIGH;
		break;
	case LED2:
		ledToSwitch=LED2_P_HIGH;
    2326:	80 e4       	ldi	r24, 0x40	; 64
    2328:	16 c0       	rjmp	.+44     	; 0x2356 <toggleLED+0x48>
		ledToSwitch=LED9_P_HIGH;
		break;

	//LEDs on PORTA
	case LED3:
		ledToSwitch=LED3_P_HIGH;
    232a:	81 e0       	ldi	r24, 0x01	; 1
		break;
    232c:	17 c0       	rjmp	.+46     	; 0x235c <toggleLED+0x4e>
	case LED4:
		ledToSwitch=LED4_P_HIGH;
    232e:	84 e0       	ldi	r24, 0x04	; 4
		break;
    2330:	15 c0       	rjmp	.+42     	; 0x235c <toggleLED+0x4e>
	case LED5:
		ledToSwitch=LED5_P_HIGH;
    2332:	80 e1       	ldi	r24, 0x10	; 16
		break;
    2334:	13 c0       	rjmp	.+38     	; 0x235c <toggleLED+0x4e>
	case LED6:
		ledToSwitch=LED6_P_HIGH;
    2336:	80 e4       	ldi	r24, 0x40	; 64
		break;
    2338:	11 c0       	rjmp	.+34     	; 0x235c <toggleLED+0x4e>
	case LED10:
		ledToSwitch=LED10_P_HIGH;
		break;
	case LED11:
		ledToSwitch=LED11_P_HIGH;
    233a:	80 e2       	ldi	r24, 0x20	; 32
		break;
    233c:	0c c0       	rjmp	.+24     	; 0x2356 <toggleLED+0x48>
	case LED12:
		ledToSwitch=LED12_P_HIGH;
    233e:	88 e0       	ldi	r24, 0x08	; 8
		break;
    2340:	0a c0       	rjmp	.+20     	; 0x2356 <toggleLED+0x48>
		ledToSwitch=ERROR2_P_HIGH;
		break;
#endif
	}
#ifdef NEW_MAIN
	switch(ledNumber)
    2342:	8a 30       	cpi	r24, 0x0A	; 10
    2344:	28 f4       	brcc	.+10     	; 0x2350 <toggleLED+0x42>
    2346:	83 30       	cpi	r24, 0x03	; 3
    2348:	40 f4       	brcc	.+16     	; 0x235a <toggleLED+0x4c>
    234a:	81 30       	cpi	r24, 0x01	; 1
    234c:	88 f0       	brcs	.+34     	; 0x2370 <toggleLED+0x62>
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <toggleLED+0x46>
    2350:	8d 30       	cpi	r24, 0x0D	; 13
    2352:	70 f4       	brcc	.+28     	; 0x2370 <toggleLED+0x62>

}

void toggleLED(LEDs_ENUMED_t ledNumber)
{
	int ledToSwitch=0;
    2354:	80 e0       	ldi	r24, 0x00	; 0
	case LED2:
	case LED10:
	case LED11:
	case LED12:
		//Toggle pin State
		PINF = (ledToSwitch);
    2356:	8f b9       	out	0x0f, r24	; 15
		break;
    2358:	08 95       	ret

}

void toggleLED(LEDs_ENUMED_t ledNumber)
{
	int ledToSwitch=0;
    235a:	80 e0       	ldi	r24, 0x00	; 0
	case LED6:
	case LED7:
	case LED8:
	case LED9:
		//Toggle pin State
		PINA= (ledToSwitch);
    235c:	80 b9       	out	0x00, r24	; 0
		break;
	}
#else
	PINA = ledToSwitch;
#endif
    235e:	08 95       	ret
	switch(ledNumber)
	{
#ifdef NEW_MAIN
	//LEDs on PORTF
	case LED1:
		ledToSwitch=LED1_P_HIGH;
    2360:	80 e1       	ldi	r24, 0x10	; 16
    2362:	f9 cf       	rjmp	.-14     	; 0x2356 <toggleLED+0x48>
		break;
	case LED6:
		ledToSwitch=LED6_P_HIGH;
		break;
	case LED10:
		ledToSwitch=LED10_P_HIGH;
    2364:	80 e8       	ldi	r24, 0x80	; 128
    2366:	f7 cf       	rjmp	.-18     	; 0x2356 <toggleLED+0x48>
		break;
	case LED2:
		ledToSwitch=LED2_P_HIGH;
		break;
	case LED7:
		ledToSwitch=LED7_P_HIGH;
    2368:	80 e2       	ldi	r24, 0x20	; 32
    236a:	f8 cf       	rjmp	.-16     	; 0x235c <toggleLED+0x4e>
		break;
	case LED8:
		ledToSwitch=LED8_P_HIGH;
		break;
	case LED9:
		ledToSwitch=LED9_P_HIGH;
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	f6 cf       	rjmp	.-20     	; 0x235c <toggleLED+0x4e>
    2370:	08 95       	ret

00002372 <ws2812_setleds>:



// Setleds for standard RGB
void ws2812_setleds( cRGB_t *ledarray, uint16_t leds, uint8_t pin)
{
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
	ws2812_setleds_pin(ledarray,leds, _BV(pin));
    2378:	21 e0       	ldi	r18, 0x01	; 1
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <ws2812_setleds+0x10>
    237e:	22 0f       	add	r18, r18
    2380:	33 1f       	adc	r19, r19
    2382:	4a 95       	dec	r20
    2384:	e2 f7       	brpl	.-8      	; 0x237e <ws2812_setleds+0xc>

}

void inline ws2812_setleds_pin(cRGB_t *ledarray, uint16_t leds, uint8_t pinmask)
{
	ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
    2386:	fb 01       	movw	r30, r22
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	e6 0f       	add	r30, r22
    238e:	f7 1f       	adc	r31, r23
uint8_t *homeptr;
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
	uint8_t curbyte,ctr,masklo;
	uint8_t sreg_prev;
	tmpData = (data+3);
    2390:	ac 01       	movw	r20, r24
    2392:	4d 5f       	subi	r20, 0xFD	; 253
    2394:	5f 4f       	sbci	r21, 0xFF	; 255
    2396:	50 93 80 0c 	sts	0x0C80, r21	; 0x800c80 <tmpData+0x1>
    239a:	40 93 7f 0c 	sts	0x0C7F, r20	; 0x800c7f <tmpData>
	homeptr = data;
    239e:	90 93 82 0c 	sts	0x0C82, r25	; 0x800c82 <homeptr+0x1>
    23a2:	80 93 81 0c 	sts	0x0C81, r24	; 0x800c81 <homeptr>
	ws2812_DDRREG |= maskhi; // Enable output
    23a6:	37 b1       	in	r19, 0x07	; 7
    23a8:	32 2b       	or	r19, r18
    23aa:	37 b9       	out	0x07, r19	; 7

	masklo  =~maskhi&ws2812_PORTREG;
    23ac:	38 b1       	in	r19, 0x08	; 8
    23ae:	72 2f       	mov	r23, r18
    23b0:	70 95       	com	r23
    23b2:	73 23       	and	r23, r19
	maskhi |=        ws2812_PORTREG;
    23b4:	58 b1       	in	r21, 0x08	; 8
    23b6:	52 2b       	or	r21, r18

	sreg_prev=SREG;
    23b8:	1f b7       	in	r17, 0x3f	; 63
	cli();
    23ba:	f8 94       	cli

	while (datlen--) {
    23bc:	9f 01       	movw	r18, r30
    23be:	21 50       	subi	r18, 0x01	; 1
    23c0:	31 09       	sbc	r19, r1
    23c2:	ef 2b       	or	r30, r31
    23c4:	21 f1       	breq	.+72     	; 0x240e <loop98+0x22>
		if(data == tmpData)
    23c6:	a0 91 7f 0c 	lds	r26, 0x0C7F	; 0x800c7f <tmpData>
    23ca:	b0 91 80 0c 	lds	r27, 0x0C80	; 0x800c80 <tmpData+0x1>
			data = homeptr;
    23ce:	d0 91 81 0c 	lds	r29, 0x0C81	; 0x800c81 <homeptr>
    23d2:	c0 91 82 0c 	lds	r28, 0x0C82	; 0x800c82 <homeptr+0x1>

	sreg_prev=SREG;
	cli();

	while (datlen--) {
		if(data == tmpData)
    23d6:	a8 17       	cp	r26, r24
    23d8:	b9 07       	cpc	r27, r25
    23da:	19 f4       	brne	.+6      	; 0x23e2 <ws2812_setleds+0x70>
			data = homeptr;
    23dc:	ed 2f       	mov	r30, r29
    23de:	fc 2f       	mov	r31, r28
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <ws2812_setleds+0x72>

	sreg_prev=SREG;
	cli();

	while (datlen--) {
		if(data == tmpData)
    23e2:	fc 01       	movw	r30, r24
			data = homeptr;
		curbyte=*data++;
    23e4:	cf 01       	movw	r24, r30
    23e6:	01 96       	adiw	r24, 0x01	; 1

		asm volatile(
    23e8:	40 81       	ld	r20, Z
    23ea:	68 e0       	ldi	r22, 0x08	; 8

000023ec <loop98>:
    23ec:	58 b9       	out	0x08, r21	; 8
    23ee:	00 00       	nop
    23f0:	00 c0       	rjmp	.+0      	; 0x23f2 <loop98+0x6>
    23f2:	47 ff       	sbrs	r20, 7
    23f4:	78 b9       	out	0x08, r23	; 8
    23f6:	44 0f       	add	r20, r20
    23f8:	00 00       	nop
    23fa:	00 c0       	rjmp	.+0      	; 0x23fc <loop98+0x10>
    23fc:	00 c0       	rjmp	.+0      	; 0x23fe <loop98+0x12>
    23fe:	00 c0       	rjmp	.+0      	; 0x2400 <loop98+0x14>
    2400:	78 b9       	out	0x08, r23	; 8
    2402:	00 c0       	rjmp	.+0      	; 0x2404 <loop98+0x18>
    2404:	6a 95       	dec	r22
    2406:	91 f7       	brne	.-28     	; 0x23ec <loop98>
	maskhi |=        ws2812_PORTREG;

	sreg_prev=SREG;
	cli();

	while (datlen--) {
    2408:	21 50       	subi	r18, 0x01	; 1
    240a:	31 09       	sbc	r19, r1
    240c:	20 f7       	brcc	.-56     	; 0x23d6 <ws2812_setleds+0x64>
			: "=&d" (ctr)
			: "r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
		);
	}

	SREG=sreg_prev;
    240e:	1f bf       	out	0x3f, r17	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2410:	8f ea       	ldi	r24, 0xAF	; 175
    2412:	94 e0       	ldi	r25, 0x04	; 4
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <loop98+0x28>
    2418:	00 c0       	rjmp	.+0      	; 0x241a <loop98+0x2e>
    241a:	00 00       	nop
// Setleds for standard RGB
void ws2812_setleds( cRGB_t *ledarray, uint16_t leds, uint8_t pin)
{
	ws2812_setleds_pin(ledarray,leds, _BV(pin));

}
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	08 95       	ret

00002424 <main>:
bool flipFlop= true;

int main(void)
{

	initialize();
    2424:	57 de       	rcall	.-850    	; 0x20d4 <initialize>

	initCOMs();
    2426:	0e 94 bf 09 	call	0x137e	; 0x137e <initCOMs>


	setTimerInterval(&ledTimer,1000);
    242a:	08 ee       	ldi	r16, 0xE8	; 232
    242c:	13 e0       	ldi	r17, 0x03	; 3
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	83 e9       	ldi	r24, 0x93	; 147
    243c:	9c e0       	ldi	r25, 0x0C	; 12
    243e:	9f d3       	rcall	.+1854   	; 0x2b7e <setTimerInterval>

	setTimerInterval(&motorRampTimer,100);
    2440:	04 e6       	ldi	r16, 0x64	; 100
    2442:	10 e0       	ldi	r17, 0x00	; 0
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	50 e0       	ldi	r21, 0x00	; 0
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	83 ea       	ldi	r24, 0xA3	; 163
    2452:	9c e0       	ldi	r25, 0x0C	; 12
    2454:	94 d3       	rcall	.+1832   	; 0x2b7e <setTimerInterval>
	setTimerInterval(&checkCANTimer,100);
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	8c e2       	ldi	r24, 0x2C	; 44
    2464:	9c e0       	ldi	r25, 0x0C	; 12
    2466:	8b d3       	rcall	.+1814   	; 0x2b7e <setTimerInterval>
	setTimerInterval(&watchDog,100);
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	83 e8       	ldi	r24, 0x83	; 131
    2476:	9c e0       	ldi	r25, 0x0C	; 12
    2478:	82 d3       	rcall	.+1796   	; 0x2b7e <setTimerInterval>


	//initMotors();


	SetNeoPixRGB(100,0,0);
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	84 e6       	ldi	r24, 0x64	; 100
    2484:	90 e0       	ldi	r25, 0x00	; 0
		//toggleLED(6);
//    while(1) {
//      printUART1();
//    }
		//BLINK A LIGHT
		if(timerDone(&ledTimer))
    2486:	6d de       	rcall	.-806    	; 0x2162 <SetNeoPixRGB>
    2488:	83 e9       	ldi	r24, 0x93	; 147
    248a:	9c e0       	ldi	r25, 0x0C	; 12
    248c:	a0 d3       	rcall	.+1856   	; 0x2bce <timerDone>



		//UPDATE THE COMMUNICATIONS
		//updateComms();
		updateComs2();
    248e:	0e 94 32 0a 	call	0x1464	; 0x1464 <updateComs2>
    2492:	fa cf       	rjmp	.-12     	; 0x2488 <main+0x64>

00002494 <initMotors>:

timer_t resendMotorTimer[5];


void initMotors()
{
    2494:	6f 92       	push	r6
    2496:	7f 92       	push	r7
    2498:	8f 92       	push	r8
    249a:	9f 92       	push	r9
    249c:	af 92       	push	r10
    249e:	bf 92       	push	r11
    24a0:	cf 92       	push	r12
    24a2:	df 92       	push	r13
    24a4:	ef 92       	push	r14
    24a6:	ff 92       	push	r15
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	68 97       	sbiw	r28, 0x18	; 24
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	f8 94       	cli
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	cd bf       	out	0x3d, r28	; 61


	//motor status tracking
	MOTORSTATUS = 0xFF; //assume all motors are innocent until proven guilty
    24c0:	8f ef       	ldi	r24, 0xFF	; 255
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	90 93 78 0b 	sts	0x0B78, r25	; 0x800b78 <MOTORSTATUS+0x1>
    24c8:	80 93 77 0b 	sts	0x0B77, r24	; 0x800b77 <MOTORSTATUS>
    24cc:	0f 2e       	mov	r0, r31
    24ce:	f3 eb       	ldi	r31, 0xB3	; 179
    24d0:	ef 2e       	mov	r14, r31
    24d2:	fc e0       	ldi	r31, 0x0C	; 12
    24d4:	ff 2e       	mov	r15, r31
    24d6:	f0 2d       	mov	r31, r0
    24d8:	0f 2e       	mov	r0, r31
    24da:	f3 e0       	ldi	r31, 0x03	; 3
    24dc:	cf 2e       	mov	r12, r31
    24de:	fd e0       	ldi	r31, 0x0D	; 13
    24e0:	df 2e       	mov	r13, r31
    24e2:	f0 2d       	mov	r31, r0
	for(int i = 0; i < 5; i ++)
		setTimerInterval(&resendMotorTimer[i],50);
    24e4:	02 e3       	ldi	r16, 0x32	; 50
    24e6:	10 e0       	ldi	r17, 0x00	; 0
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	c7 01       	movw	r24, r14
    24f6:	43 d3       	rcall	.+1670   	; 0x2b7e <setTimerInterval>
    24f8:	80 e1       	ldi	r24, 0x10	; 16
    24fa:	e8 0e       	add	r14, r24
    24fc:	f1 1c       	adc	r15, r1
{


	//motor status tracking
	MOTORSTATUS = 0xFF; //assume all motors are innocent until proven guilty
	for(int i = 0; i < 5; i ++)
    24fe:	ec 14       	cp	r14, r12
    2500:	fd 04       	cpc	r15, r13
    2502:	81 f7       	brne	.-32     	; 0x24e4 <initMotors+0x50>
		setTimerInterval(&resendMotorTimer[i],50);

#ifndef DISABLE_LEFT_MOTOR
	//LeftMotor = (Motor_t){LEFTMOTORID,LEFTMOTOR_STATUS,LEFTMOTOR_MOB,MAXRPM,MAXCURRENTBG65,ACCEL_CONST,TRUE,(LimitSwitch_t){0,0},LeftMotor.Motor_Buffer};
	InitMotor(&LeftMotor, LEFTMOTORID, LEFTMOTOR_STATUS, LEFTMOTOR_MOB, MAXRPM, MAXCURRENTBG65,(LimitSwitch_t) {
    2504:	0f 2e       	mov	r0, r31
    2506:	f6 e0       	ldi	r31, 0x06	; 6
    2508:	6f 2e       	mov	r6, r31
    250a:	f0 2d       	mov	r31, r0
    250c:	fe 01       	movw	r30, r28
    250e:	73 96       	adiw	r30, 0x13	; 19
    2510:	df 01       	movw	r26, r30
    2512:	86 2d       	mov	r24, r6
    2514:	1d 92       	st	X+, r1
    2516:	8a 95       	dec	r24
    2518:	e9 f7       	brne	.-6      	; 0x2514 <initMotors+0x80>
    251a:	77 24       	eor	r7, r7
    251c:	73 94       	inc	r7
    251e:	7f 92       	push	r7
    2520:	8b 88       	ldd	r8, Y+19	; 0x13
    2522:	9c 88       	ldd	r9, Y+20	; 0x14
    2524:	ad 88       	ldd	r10, Y+21	; 0x15
    2526:	be 88       	ldd	r11, Y+22	; 0x16
    2528:	cf 88       	ldd	r12, Y+23	; 0x17
    252a:	d8 8c       	ldd	r13, Y+24	; 0x18
    252c:	0f 2e       	mov	r0, r31
    252e:	f0 e1       	ldi	r31, 0x10	; 16
    2530:	ef 2e       	mov	r14, r31
    2532:	f7 e2       	ldi	r31, 0x27	; 39
    2534:	ff 2e       	mov	r15, r31
    2536:	f0 2d       	mov	r31, r0
    2538:	00 e8       	ldi	r16, 0x80	; 128
    253a:	1c e0       	ldi	r17, 0x0C	; 12
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	47 e0       	ldi	r20, 0x07	; 7
    2540:	6d e7       	ldi	r22, 0x7D	; 125
    2542:	8c ea       	ldi	r24, 0xAC	; 172
    2544:	99 e0       	ldi	r25, 0x09	; 9
    2546:	8d d1       	rcall	.+794    	; 0x2862 <InitMotor>
//  setMotorControlMode(&LeftMotor, Velocity);
//  setMotorVel(&LeftMotor, 0);
#endif /*DISABLE_LEFT_MOTOR*/

#ifndef DISABLE_RIGHT_MOTOR
	InitMotor(&RightMotor, RIGHTMOTORID, RIGHTMOTOR_STATUS, RIGHTMOTOR_MOB, MAXRPM, MAXCURRENTBG65,(LimitSwitch_t) {
    2548:	fe 01       	movw	r30, r28
    254a:	3d 96       	adiw	r30, 0x0d	; 13
    254c:	df 01       	movw	r26, r30
    254e:	86 2d       	mov	r24, r6
    2550:	1d 92       	st	X+, r1
    2552:	8a 95       	dec	r24
    2554:	e9 f7       	brne	.-6      	; 0x2550 <initMotors+0xbc>
    2556:	7f 92       	push	r7
    2558:	8d 84       	ldd	r8, Y+13	; 0x0d
    255a:	9e 84       	ldd	r9, Y+14	; 0x0e
    255c:	af 84       	ldd	r10, Y+15	; 0x0f
    255e:	b8 88       	ldd	r11, Y+16	; 0x10
    2560:	c9 88       	ldd	r12, Y+17	; 0x11
    2562:	da 88       	ldd	r13, Y+18	; 0x12
    2564:	21 e0       	ldi	r18, 0x01	; 1
    2566:	46 e0       	ldi	r20, 0x06	; 6
    2568:	6e e7       	ldi	r22, 0x7E	; 126
    256a:	89 eb       	ldi	r24, 0xB9	; 185
    256c:	9a e0       	ldi	r25, 0x0A	; 10
    256e:	79 d1       	rcall	.+754    	; 0x2862 <InitMotor>
//  setMotorControlMode(&RightMotor, Velocity);
//  setMotorVel(&RightMotor, 0);
#endif /*DISABLE_ARM_MOTOR*/

#ifndef DISABLE_ARM_MOTOR
	InitMotor(&ArmMotor, ARMMOTORID, ARMMOTOR_STATUS, ARMMOTOR_MOB, MAXRPM, MAXCURRENTARM, (LimitSwitch_t) {
    2570:	86 e0       	ldi	r24, 0x06	; 6
    2572:	e1 e0       	ldi	r30, 0x01	; 1
    2574:	f1 e0       	ldi	r31, 0x01	; 1
    2576:	de 01       	movw	r26, r28
    2578:	17 96       	adiw	r26, 0x07	; 7
    257a:	01 90       	ld	r0, Z+
    257c:	0d 92       	st	X+, r0
    257e:	8a 95       	dec	r24
    2580:	e1 f7       	brne	.-8      	; 0x257a <initMotors+0xe6>
    2582:	1f 92       	push	r1
    2584:	8f 80       	ldd	r8, Y+7	; 0x07
    2586:	98 84       	ldd	r9, Y+8	; 0x08
    2588:	a9 84       	ldd	r10, Y+9	; 0x09
    258a:	ba 84       	ldd	r11, Y+10	; 0x0a
    258c:	cb 84       	ldd	r12, Y+11	; 0x0b
    258e:	dc 84       	ldd	r13, Y+12	; 0x0c
    2590:	0f 2e       	mov	r0, r31
    2592:	f8 e8       	ldi	r31, 0x88	; 136
    2594:	ef 2e       	mov	r14, r31
    2596:	f3 e1       	ldi	r31, 0x13	; 19
    2598:	ff 2e       	mov	r15, r31
    259a:	f0 2d       	mov	r31, r0
    259c:	23 e0       	ldi	r18, 0x03	; 3
    259e:	45 e0       	ldi	r20, 0x05	; 5
    25a0:	6c e7       	ldi	r22, 0x7C	; 124
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	9a e0       	ldi	r25, 0x0A	; 10
    25a6:	5d d1       	rcall	.+698    	; 0x2862 <InitMotor>
//  setMotorControlMode(&ArmMotor, Velocity);
//  setMotorVel(&ArmMotor, 0);
#endif /*DISABLE_LEFT_MOTOR*/

#ifndef DISABLE_BUCKET_MOTOR
	InitMotor(&BucketMotor, BUCKETMOTORID, BUCKETMOTOR_STATUS, BUCKETMOTOR_MOB, MAXRPM, MAXCURRENTBUCKET,(LimitSwitch_t) {
    25a8:	fe 01       	movw	r30, r28
    25aa:	31 96       	adiw	r30, 0x01	; 1
    25ac:	df 01       	movw	r26, r30
    25ae:	1d 92       	st	X+, r1
    25b0:	6a 94       	dec	r6
    25b2:	e9 f7       	brne	.-6      	; 0x25ae <initMotors+0x11a>
    25b4:	7f 92       	push	r7
    25b6:	89 80       	ldd	r8, Y+1	; 0x01
    25b8:	9a 80       	ldd	r9, Y+2	; 0x02
    25ba:	ab 80       	ldd	r10, Y+3	; 0x03
    25bc:	bc 80       	ldd	r11, Y+4	; 0x04
    25be:	cd 80       	ldd	r12, Y+5	; 0x05
    25c0:	de 80       	ldd	r13, Y+6	; 0x06
    25c2:	0f 2e       	mov	r0, r31
    25c4:	f0 e1       	ldi	r31, 0x10	; 16
    25c6:	ef 2e       	mov	r14, r31
    25c8:	f7 e2       	ldi	r31, 0x27	; 39
    25ca:	ff 2e       	mov	r15, r31
    25cc:	f0 2d       	mov	r31, r0
    25ce:	22 e0       	ldi	r18, 0x02	; 2
    25d0:	44 e0       	ldi	r20, 0x04	; 4
    25d2:	6f e7       	ldi	r22, 0x7F	; 127
    25d4:	89 e6       	ldi	r24, 0x69	; 105
    25d6:	99 e0       	ldi	r25, 0x09	; 9
    25d8:	44 d1       	rcall	.+648    	; 0x2862 <InitMotor>
	},FALSE);
//  setMotorControlMode(&PlowMotor, Velocity);
//  setMotorVel(&PlowMotor, 0);
#endif /*DISABLE_LEFT_MOTOR*/

}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	68 96       	adiw	r28, 0x18	; 24
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	ff 90       	pop	r15
    25f8:	ef 90       	pop	r14
    25fa:	df 90       	pop	r13
    25fc:	cf 90       	pop	r12
    25fe:	bf 90       	pop	r11
    2600:	af 90       	pop	r10
    2602:	9f 90       	pop	r9
    2604:	8f 90       	pop	r8
    2606:	7f 90       	pop	r7
    2608:	6f 90       	pop	r6
    260a:	08 95       	ret

0000260c <motorControl>:

#define DRIVESCALER 50
void motorControl(int leftCommand, int rightCommand, int armCommand, int bucketCommand,int plowCommand)
{
    260c:	9f 92       	push	r9
    260e:	af 92       	push	r10
    2610:	bf 92       	push	r11
    2612:	cf 92       	push	r12
    2614:	df 92       	push	r13
    2616:	ef 92       	push	r14
    2618:	ff 92       	push	r15
    261a:	0f 93       	push	r16
    261c:	1f 93       	push	r17
    261e:	cf 93       	push	r28
    2620:	df 93       	push	r29
	motorSpeeds[Left] = leftCommand;
    2622:	e5 e7       	ldi	r30, 0x75	; 117
    2624:	f5 e0       	ldi	r31, 0x05	; 5
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	80 83       	st	Z, r24
	motorSpeeds[Right] = rightCommand;
    262a:	73 83       	std	Z+3, r23	; 0x03
    262c:	62 83       	std	Z+2, r22	; 0x02
	motorSpeeds[Bucket] = bucketCommand;
    262e:	35 83       	std	Z+5, r19	; 0x05
    2630:	24 83       	std	Z+4, r18	; 0x04
	motorSpeeds[Arm] = armCommand;
    2632:	57 83       	std	Z+7, r21	; 0x07
    2634:	46 83       	std	Z+6, r20	; 0x06
    2636:	0f 2e       	mov	r0, r31
    2638:	fd e6       	ldi	r31, 0x6D	; 109
    263a:	ef 2e       	mov	r14, r31
    263c:	fb e0       	ldi	r31, 0x0B	; 11
    263e:	ff 2e       	mov	r15, r31
    2640:	f0 2d       	mov	r31, r0
    2642:	8f 01       	movw	r16, r30
#ifndef DISABLE_MOTOR_SYSTEMS
#ifndef DISABLE_LEFT_MOTOR

	//*********************************DRIVE SYSTEM UPDATE**********************************
	int m;
	for(m = Left; m <= Right; m++)
    2644:	c0 e0       	ldi	r28, 0x00	; 0
    2646:	d0 e0       	ldi	r29, 0x00	; 0

				}
				else if(m==Right)
				{
#ifdef REVERSE_LEFT_RIGHT
					setMotorVelNoSafetyComms(&RightMotor, DRIVESCALER*(motorSpeeds[m]));
    2648:	0f 2e       	mov	r0, r31
    264a:	f2 e3       	ldi	r31, 0x32	; 50
    264c:	9f 2e       	mov	r9, r31
    264e:	f0 2d       	mov	r31, r0
    2650:	57 01       	movw	r10, r14
    2652:	68 01       	movw	r12, r16
//      {
//        setLED(m+10,OFF);
//        motorSpeeds[m]=(0);
//      }
		//If the current motor command is not the same as the last sent
		if((prevMotorCommand[m]!=motorSpeeds[m])|| timerDone(&resendMotorTimer[Right]))
    2654:	f7 01       	movw	r30, r14
    2656:	20 81       	ld	r18, Z
    2658:	31 81       	ldd	r19, Z+1	; 0x01
    265a:	f8 01       	movw	r30, r16
    265c:	80 81       	ld	r24, Z
    265e:	91 81       	ldd	r25, Z+1	; 0x01
    2660:	28 17       	cp	r18, r24
    2662:	39 07       	cpc	r19, r25
    2664:	29 f4       	brne	.+10     	; 0x2670 <motorControl+0x64>
    2666:	83 ec       	ldi	r24, 0xC3	; 195
    2668:	9c e0       	ldi	r25, 0x0C	; 12
    266a:	b1 d2       	rcall	.+1378   	; 0x2bce <timerDone>
    266c:	88 23       	and	r24, r24
    266e:	b9 f1       	breq	.+110    	; 0x26de <motorControl+0xd2>
		{
			if(abs(motorSpeeds[m]) > MANUAL_MIN_SPEED)
    2670:	f6 01       	movw	r30, r12
    2672:	20 81       	ld	r18, Z
    2674:	31 81       	ldd	r19, Z+1	; 0x01
    2676:	c9 01       	movw	r24, r18
    2678:	33 23       	and	r19, r19
    267a:	24 f4       	brge	.+8      	; 0x2684 <motorControl+0x78>
    267c:	88 27       	eor	r24, r24
    267e:	99 27       	eor	r25, r25
    2680:	82 1b       	sub	r24, r18
    2682:	93 0b       	sbc	r25, r19
    2684:	40 97       	sbiw	r24, 0x10	; 16
    2686:	0c f1       	brlt	.+66     	; 0x26ca <motorControl+0xbe>
			{


				//Send the right motor speed control
				if(m==Left)
    2688:	20 97       	sbiw	r28, 0x00	; 0
    268a:	51 f4       	brne	.+20     	; 0x26a0 <motorControl+0x94>
				{

#ifdef REVERSE_LEFT_RIGHT
					setMotorVelNoSafetyComms(&LeftMotor, -1*DRIVESCALER*(motorSpeeds[m]));
    268c:	4e ec       	ldi	r20, 0xCE	; 206
    268e:	42 03       	mulsu	r20, r18
    2690:	b0 01       	movw	r22, r0
    2692:	43 9f       	mul	r20, r19
    2694:	70 0d       	add	r23, r0
    2696:	11 24       	eor	r1, r1
    2698:	8c ea       	ldi	r24, 0xAC	; 172
    269a:	99 e0       	ldi	r25, 0x09	; 9
    269c:	53 d1       	rcall	.+678    	; 0x2944 <setMotorVelNoSafetyComms>
    269e:	0b c0       	rjmp	.+22     	; 0x26b6 <motorControl+0xaa>
#else
					setMotorVelNoSafetyComms(&LeftMotor, DRIVESCALER*(motorSpeeds[m]));
#endif

				}
				else if(m==Right)
    26a0:	c1 30       	cpi	r28, 0x01	; 1
    26a2:	d1 05       	cpc	r29, r1
    26a4:	41 f4       	brne	.+16     	; 0x26b6 <motorControl+0xaa>
				{
#ifdef REVERSE_LEFT_RIGHT
					setMotorVelNoSafetyComms(&RightMotor, DRIVESCALER*(motorSpeeds[m]));
    26a6:	92 9e       	mul	r9, r18
    26a8:	b0 01       	movw	r22, r0
    26aa:	93 9e       	mul	r9, r19
    26ac:	70 0d       	add	r23, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	89 eb       	ldi	r24, 0xB9	; 185
    26b2:	9a e0       	ldi	r25, 0x0A	; 10
    26b4:	47 d1       	rcall	.+654    	; 0x2944 <setMotorVelNoSafetyComms>
					setMotorVelNoSafetyComms(&RightMotor, -1*DRIVESCALER*(motorSpeeds[m]));
#endif
				}

				//Store value previously sent
				prevMotorCommand[m]=motorSpeeds[m];
    26b6:	f6 01       	movw	r30, r12
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	f5 01       	movw	r30, r10
    26be:	91 83       	std	Z+1, r25	; 0x01
				resetTimer(&resendMotorTimer[Right]);
    26c0:	80 83       	st	Z, r24
    26c2:	83 ec       	ldi	r24, 0xC3	; 195
    26c4:	9c e0       	ldi	r25, 0x0C	; 12
    26c6:	69 d2       	rcall	.+1234   	; 0x2b9a <resetTimer>
    26c8:	0a c0       	rjmp	.+20     	; 0x26de <motorControl+0xd2>
			}
			else
			{

				setMotorVelNoSafetyComms(&LeftMotor,0);
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	8c ea       	ldi	r24, 0xAC	; 172
    26d0:	99 e0       	ldi	r25, 0x09	; 9
    26d2:	38 d1       	rcall	.+624    	; 0x2944 <setMotorVelNoSafetyComms>
				setMotorVelNoSafetyComms(&RightMotor,0);
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	89 eb       	ldi	r24, 0xB9	; 185
    26da:	9a e0       	ldi	r25, 0x0A	; 10
    26dc:	33 d1       	rcall	.+614    	; 0x2944 <setMotorVelNoSafetyComms>
    26de:	21 96       	adiw	r28, 0x01	; 1
#ifndef DISABLE_MOTOR_SYSTEMS
#ifndef DISABLE_LEFT_MOTOR

	//*********************************DRIVE SYSTEM UPDATE**********************************
	int m;
	for(m = Left; m <= Right; m++)
    26e0:	f2 e0       	ldi	r31, 0x02	; 2
    26e2:	ef 0e       	add	r14, r31
    26e4:	f1 1c       	adc	r15, r1
    26e6:	0e 5f       	subi	r16, 0xFE	; 254
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ea:	c2 30       	cpi	r28, 0x02	; 2
    26ec:	d1 05       	cpc	r29, r1
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <motorControl+0xe6>
    26f0:	af cf       	rjmp	.-162    	; 0x2650 <motorControl+0x44>
    26f2:	20 91 73 0b 	lds	r18, 0x0B73	; 0x800b73 <prevMotorCommand+0x6>
	}
#endif
	//*********************************ARM MOTOR UPDATE**********************************
#ifndef DISABLE_ARM_MOTOR
	//If the current motor command is not the same as the last sent
	if(prevMotorCommand[Arm]!=motorSpeeds[Arm] || timerDone(&resendMotorTimer[Arm]))
    26f6:	30 91 74 0b 	lds	r19, 0x0B74	; 0x800b74 <prevMotorCommand+0x7>
    26fa:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <motorSpeeds+0x6>
    26fe:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <motorSpeeds+0x7>
    2702:	28 17       	cp	r18, r24
    2704:	39 07       	cpc	r19, r25
    2706:	29 f4       	brne	.+10     	; 0x2712 <motorControl+0x106>
    2708:	83 ee       	ldi	r24, 0xE3	; 227
    270a:	9c e0       	ldi	r25, 0x0C	; 12
    270c:	60 d2       	rcall	.+1216   	; 0x2bce <timerDone>
    270e:	88 23       	and	r24, r24
    2710:	79 f1       	breq	.+94     	; 0x2770 <motorControl+0x164>
    2712:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <motorSpeeds+0x6>
	{
		//SET ARM MOTOR COMMANDS
		if(motorSpeeds[Arm] >MANUAL_MIN_SPEED)
    2716:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <motorSpeeds+0x7>
    271a:	80 31       	cpi	r24, 0x10	; 16
    271c:	91 05       	cpc	r25, r1
    271e:	54 f0       	brlt	.+20     	; 0x2734 <motorControl+0x128>
    2720:	28 e2       	ldi	r18, 0x28	; 40
		{

			setMotorCurNoSafetyComms(&ArmMotor,motorSpeeds[Arm]*40);
    2722:	28 9f       	mul	r18, r24
    2724:	b0 01       	movw	r22, r0
    2726:	29 9f       	mul	r18, r25
    2728:	70 0d       	add	r23, r0
    272a:	11 24       	eor	r1, r1
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	9a e0       	ldi	r25, 0x0A	; 10
    2730:	79 d1       	rcall	.+754    	; 0x2a24 <setMotorCurNoSafetyComms>
    2732:	13 c0       	rjmp	.+38     	; 0x275a <motorControl+0x14e>
    2734:	81 3f       	cpi	r24, 0xF1	; 241

		}
		else if(motorSpeeds[Arm] < -MANUAL_MIN_SPEED)
    2736:	2f ef       	ldi	r18, 0xFF	; 255
    2738:	92 07       	cpc	r25, r18
    273a:	54 f4       	brge	.+20     	; 0x2750 <motorControl+0x144>
    273c:	27 e3       	ldi	r18, 0x37	; 55
		{

			setMotorCurNoSafetyComms(&ArmMotor,motorSpeeds[Arm]*55);
    273e:	28 9f       	mul	r18, r24
    2740:	b0 01       	movw	r22, r0
    2742:	29 9f       	mul	r18, r25
    2744:	70 0d       	add	r23, r0
    2746:	11 24       	eor	r1, r1
    2748:	82 e0       	ldi	r24, 0x02	; 2
    274a:	9a e0       	ldi	r25, 0x0A	; 10
    274c:	6b d1       	rcall	.+726    	; 0x2a24 <setMotorCurNoSafetyComms>
    274e:	05 c0       	rjmp	.+10     	; 0x275a <motorControl+0x14e>
			//setLED(9,ON);
		}
		else
		{
			setMotorCurNoSafetyComms(&ArmMotor,0);
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	9a e0       	ldi	r25, 0x0A	; 10
    2758:	65 d1       	rcall	.+714    	; 0x2a24 <setMotorCurNoSafetyComms>
    275a:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <motorSpeeds+0x6>
		}
		//Store value previously sent
		prevMotorCommand[Arm]=motorSpeeds[Arm];
    275e:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <motorSpeeds+0x7>
    2762:	90 93 74 0b 	sts	0x0B74, r25	; 0x800b74 <prevMotorCommand+0x7>
    2766:	80 93 73 0b 	sts	0x0B73, r24	; 0x800b73 <prevMotorCommand+0x6>
		resetTimer(&resendMotorTimer[Arm]);
    276a:	83 ee       	ldi	r24, 0xE3	; 227
    276c:	9c e0       	ldi	r25, 0x0C	; 12
    276e:	15 d2       	rcall	.+1066   	; 0x2b9a <resetTimer>
    2770:	20 91 71 0b 	lds	r18, 0x0B71	; 0x800b71 <prevMotorCommand+0x4>
#endif /* DISABLE_ARM_MOTOR */

	//*********************************BUCKET MOTOR UPDATE**********************************
#ifndef DISABLE_BUCKET_MOTOR
	//If the current motor command is not the same as the last sent
	if(prevMotorCommand[Bucket]!=motorSpeeds[Bucket]|| timerDone(&resendMotorTimer[Bucket]))
    2774:	30 91 72 0b 	lds	r19, 0x0B72	; 0x800b72 <prevMotorCommand+0x5>
    2778:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <motorSpeeds+0x4>
    277c:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <motorSpeeds+0x5>
    2780:	28 17       	cp	r18, r24
    2782:	39 07       	cpc	r19, r25
    2784:	29 f4       	brne	.+10     	; 0x2790 <motorControl+0x184>
    2786:	83 ed       	ldi	r24, 0xD3	; 211
    2788:	9c e0       	ldi	r25, 0x0C	; 12
    278a:	21 d2       	rcall	.+1090   	; 0x2bce <timerDone>
    278c:	88 23       	and	r24, r24
    278e:	41 f1       	breq	.+80     	; 0x27e0 <motorControl+0x1d4>
    2790:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <motorSpeeds+0x4>
	{

		//SET ARM MOTOR COMMANDS
		if(abs(motorSpeeds[Bucket]) > MANUAL_MIN_SPEED)
    2794:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <motorSpeeds+0x5>
    2798:	9c 01       	movw	r18, r24
    279a:	99 23       	and	r25, r25
    279c:	24 f4       	brge	.+8      	; 0x27a6 <motorControl+0x19a>
    279e:	22 27       	eor	r18, r18
    27a0:	33 27       	eor	r19, r19
    27a2:	28 1b       	sub	r18, r24
    27a4:	39 0b       	sbc	r19, r25
    27a6:	20 31       	cpi	r18, 0x10	; 16
    27a8:	31 05       	cpc	r19, r1
    27aa:	54 f0       	brlt	.+20     	; 0x27c0 <motorControl+0x1b4>
		{
			setMotorVelNoSafetyComms(&BucketMotor,motorSpeeds[Bucket]*50);
    27ac:	22 e3       	ldi	r18, 0x32	; 50
    27ae:	28 9f       	mul	r18, r24
    27b0:	b0 01       	movw	r22, r0
    27b2:	29 9f       	mul	r18, r25
    27b4:	70 0d       	add	r23, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	89 e6       	ldi	r24, 0x69	; 105
    27ba:	99 e0       	ldi	r25, 0x09	; 9
    27bc:	c3 d0       	rcall	.+390    	; 0x2944 <setMotorVelNoSafetyComms>
    27be:	05 c0       	rjmp	.+10     	; 0x27ca <motorControl+0x1be>
//    {
//      setMotorVelNoSafetyComms(&BucketMotor, motorSpeeds[Bucket]);
		}
		else
		{
			setMotorVelNoSafetyComms(&BucketMotor,0);
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	70 e0       	ldi	r23, 0x00	; 0
    27c4:	89 e6       	ldi	r24, 0x69	; 105
    27c6:	99 e0       	ldi	r25, 0x09	; 9
    27c8:	bd d0       	rcall	.+378    	; 0x2944 <setMotorVelNoSafetyComms>
			//setLED(9,OFF);

		}

		//Store value previously sent
		prevMotorCommand[Bucket]=motorSpeeds[Bucket];
    27ca:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <motorSpeeds+0x4>
    27ce:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <motorSpeeds+0x5>
    27d2:	90 93 72 0b 	sts	0x0B72, r25	; 0x800b72 <prevMotorCommand+0x5>
    27d6:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <prevMotorCommand+0x4>
		resetTimer(&resendMotorTimer[Bucket]);
    27da:	83 ed       	ldi	r24, 0xD3	; 211
    27dc:	9c e0       	ldi	r25, 0x0C	; 12
    27de:	dd d1       	rcall	.+954    	; 0x2b9a <resetTimer>
    27e0:	df 91       	pop	r29
	}
#endif /*DISABLE_PLOW_MOTOR*/
#endif /* DISABLE_MOTOR_SYSTEMS */
	//TODO:

}
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	ff 90       	pop	r15
    27ea:	ef 90       	pop	r14
    27ec:	df 90       	pop	r13
    27ee:	cf 90       	pop	r12
    27f0:	bf 90       	pop	r11
    27f2:	af 90       	pop	r10
    27f4:	9f 90       	pop	r9
    27f6:	08 95       	ret

000027f8 <ReceiveMotor>:
    27f8:	62 30       	cpi	r22, 0x02	; 2
	}

	SDO_packet DesiredVelocity = {motor->ID, 0x3300, 0x0, Vel};

	SendandVerify(DesiredVelocity,  &motor->Motor_Buffer, motor->Status);
}
    27fa:	19 f1       	breq	.+70     	; 0x2842 <ReceiveMotor+0x4a>
    27fc:	28 f4       	brcc	.+10     	; 0x2808 <ReceiveMotor+0x10>
    27fe:	66 23       	and	r22, r22
    2800:	41 f0       	breq	.+16     	; 0x2812 <ReceiveMotor+0x1a>
    2802:	61 30       	cpi	r22, 0x01	; 1
    2804:	71 f0       	breq	.+28     	; 0x2822 <ReceiveMotor+0x2a>
    2806:	08 95       	ret
    2808:	63 30       	cpi	r22, 0x03	; 3
    280a:	99 f0       	breq	.+38     	; 0x2832 <ReceiveMotor+0x3a>
    280c:	64 30       	cpi	r22, 0x04	; 4
    280e:	09 f1       	breq	.+66     	; 0x2852 <ReceiveMotor+0x5a>
    2810:	08 95       	ret
    2812:	bc 01       	movw	r22, r24
    2814:	6d 5f       	subi	r22, 0xFD	; 253
    2816:	7f 4f       	sbci	r23, 0xFF	; 255
    2818:	8e eb       	ldi	r24, 0xBE	; 190
    281a:	99 e0       	ldi	r25, 0x09	; 9
    281c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <cb_push_back>
    2820:	08 95       	ret
    2822:	bc 01       	movw	r22, r24
    2824:	6d 5f       	subi	r22, 0xFD	; 253
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	8b ec       	ldi	r24, 0xCB	; 203
    282a:	9a e0       	ldi	r25, 0x0A	; 10
    282c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <cb_push_back>
    2830:	08 95       	ret
    2832:	bc 01       	movw	r22, r24
    2834:	6d 5f       	subi	r22, 0xFD	; 253
    2836:	7f 4f       	sbci	r23, 0xFF	; 255
    2838:	84 e1       	ldi	r24, 0x14	; 20
    283a:	9a e0       	ldi	r25, 0x0A	; 10
    283c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <cb_push_back>
    2840:	08 95       	ret
    2842:	bc 01       	movw	r22, r24
    2844:	6d 5f       	subi	r22, 0xFD	; 253
    2846:	7f 4f       	sbci	r23, 0xFF	; 255
    2848:	8b e7       	ldi	r24, 0x7B	; 123
    284a:	99 e0       	ldi	r25, 0x09	; 9
    284c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <cb_push_back>
    2850:	08 95       	ret
    2852:	bc 01       	movw	r22, r24
    2854:	6d 5f       	subi	r22, 0xFD	; 253
    2856:	7f 4f       	sbci	r23, 0xFF	; 255
    2858:	8e e9       	ldi	r24, 0x9E	; 158
    285a:	99 e0       	ldi	r25, 0x09	; 9
    285c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <cb_push_back>
    2860:	08 95       	ret

00002862 <InitMotor>:
    2862:	6f 92       	push	r6
    2864:	7f 92       	push	r7
    2866:	8f 92       	push	r8
    2868:	9f 92       	push	r9
    286a:	af 92       	push	r10
    286c:	bf 92       	push	r11
    286e:	cf 92       	push	r12
    2870:	df 92       	push	r13
    2872:	ef 92       	push	r14
    2874:	ff 92       	push	r15
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	00 d0       	rcall	.+0      	; 0x2880 <InitMotor+0x1e>
    2880:	00 d0       	rcall	.+0      	; 0x2882 <InitMotor+0x20>
    2882:	00 d0       	rcall	.+0      	; 0x2884 <InitMotor+0x22>
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	3c 01       	movw	r6, r24
    288a:	89 82       	std	Y+1, r8	; 0x01
    288c:	9a 82       	std	Y+2, r9	; 0x02
    288e:	ab 82       	std	Y+3, r10	; 0x03
    2890:	bc 82       	std	Y+4, r11	; 0x04
    2892:	cd 82       	std	Y+5, r12	; 0x05
    2894:	de 82       	std	Y+6, r13	; 0x06
    2896:	fc 01       	movw	r30, r24
    2898:	60 83       	st	Z, r22
    289a:	41 83       	std	Z+1, r20	; 0x01
    289c:	22 83       	std	Z+2, r18	; 0x02
    289e:	14 83       	std	Z+4, r17	; 0x04
    28a0:	03 83       	std	Z+3, r16	; 0x03
    28a2:	f6 82       	std	Z+6, r15	; 0x06
    28a4:	e5 82       	std	Z+5, r14	; 0x05
    28a6:	86 e0       	ldi	r24, 0x06	; 6
    28a8:	fe 01       	movw	r30, r28
    28aa:	31 96       	adiw	r30, 0x01	; 1
    28ac:	d3 01       	movw	r26, r6
    28ae:	1c 96       	adiw	r26, 0x0c	; 12
    28b0:	01 90       	ld	r0, Z+
    28b2:	0d 92       	st	X+, r0
    28b4:	8a 95       	dec	r24
    28b6:	e1 f7       	brne	.-8      	; 0x28b0 <InitMotor+0x4e>
    28b8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ba:	f3 01       	movw	r30, r6
    28bc:	83 87       	std	Z+11, r24	; 0x0b
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <InitMotor+0x66>
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	4a 95       	dec	r20
    28ca:	e2 f7       	brpl	.-8      	; 0x28c4 <InitMotor+0x62>
    28cc:	40 91 77 0b 	lds	r20, 0x0B77	; 0x800b77 <MOTORSTATUS>
    28d0:	50 91 78 0b 	lds	r21, 0x0B78	; 0x800b78 <MOTORSTATUS+0x1>
    28d4:	84 2b       	or	r24, r20
    28d6:	95 2b       	or	r25, r21
    28d8:	90 93 78 0b 	sts	0x0B78, r25	; 0x800b78 <MOTORSTATUS+0x1>
    28dc:	80 93 77 0b 	sts	0x0B77, r24	; 0x800b77 <MOTORSTATUS>
    28e0:	f0 e2       	ldi	r31, 0x20	; 32
    28e2:	2f 9f       	mul	r18, r31
    28e4:	b0 01       	movw	r22, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	63 51       	subi	r22, 0x13	; 19
    28ea:	75 4f       	sbci	r23, 0xF5	; 245
    28ec:	28 e0       	ldi	r18, 0x08	; 8
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	44 e0       	ldi	r20, 0x04	; 4
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	c3 01       	movw	r24, r6
    28f6:	42 96       	adiw	r24, 0x12	; 18
    28f8:	0e 94 8e 00 	call	0x11c	; 0x11c <cb_init>
    28fc:	f3 01       	movw	r30, r6
    28fe:	60 81       	ld	r22, Z
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	60 58       	subi	r22, 0x80	; 128
    2904:	7a 4f       	sbci	r23, 0xFA	; 250
    2906:	2c ef       	ldi	r18, 0xFC	; 252
    2908:	33 e1       	ldi	r19, 0x13	; 19
    290a:	4f ef       	ldi	r20, 0xFF	; 255
    290c:	57 e0       	ldi	r21, 0x07	; 7
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	0e 94 1c 05 	call	0xa38	; 0xa38 <prepare_rx>
    2914:	88 23       	and	r24, r24
    2916:	09 f0       	breq	.+2      	; 0x291a <InitMotor+0xb8>
    2918:	98 95       	break
    291a:	26 96       	adiw	r28, 0x06	; 6
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	ff 90       	pop	r15
    2930:	ef 90       	pop	r14
    2932:	df 90       	pop	r13
    2934:	cf 90       	pop	r12
    2936:	bf 90       	pop	r11
    2938:	af 90       	pop	r10
    293a:	9f 90       	pop	r9
    293c:	8f 90       	pop	r8
    293e:	7f 90       	pop	r7
    2940:	6f 90       	pop	r6
    2942:	08 95       	ret

00002944 <setMotorVelNoSafetyComms>:
void setMotorVelNoSafetyComms(Motor_t *motor, int Vel)
{
    2944:	cf 92       	push	r12
    2946:	df 92       	push	r13
    2948:	ef 92       	push	r14
    294a:	ff 92       	push	r15
    294c:	0f 93       	push	r16
    294e:	1f 93       	push	r17
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	68 97       	sbiw	r28, 0x18	; 24
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	61 38       	cpi	r22, 0x81	; 129
    2966:	2c e0       	ldi	r18, 0x0C	; 12
    2968:	72 07       	cpc	r23, r18
    296a:	14 f0       	brlt	.+4      	; 0x2970 <setMotorVelNoSafetyComms+0x2c>
    296c:	60 e8       	ldi	r22, 0x80	; 128
    296e:	7c e0       	ldi	r23, 0x0C	; 12
	if(Vel < -MAXRPM)
	{
		Vel = -MAXRPM;
	}
	char temp[8];
	SDO_packet Continue = {motor->ID, 0x3000, 0x00, 4};
    2970:	fc 01       	movw	r30, r24
    2972:	20 81       	ld	r18, Z
    2974:	29 87       	std	Y+9, r18	; 0x09
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	50 e3       	ldi	r21, 0x30	; 48
    297a:	5b 87       	std	Y+11, r21	; 0x0b
    297c:	4a 87       	std	Y+10, r20	; 0x0a
    297e:	1c 86       	std	Y+12, r1	; 0x0c
    2980:	c1 2c       	mov	r12, r1
    2982:	d1 2c       	mov	r13, r1
    2984:	76 01       	movw	r14, r12
    2986:	68 94       	set
    2988:	c2 f8       	bld	r12, 2
    298a:	cd 86       	std	Y+13, r12	; 0x0d
    298c:	de 86       	std	Y+14, r13	; 0x0e
    298e:	ef 86       	std	Y+15, r14	; 0x0f
    2990:	f8 8a       	std	Y+16, r15	; 0x10
	SDO_packet DesiredVelocity = {motor->ID, 0x3300, 0x0, Vel};
    2992:	29 8b       	std	Y+17, r18	; 0x11
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	33 e3       	ldi	r19, 0x33	; 51
    2998:	3b 8b       	std	Y+19, r19	; 0x13
    299a:	2a 8b       	std	Y+18, r18	; 0x12
    299c:	1c 8a       	std	Y+20, r1	; 0x14
    299e:	ab 01       	movw	r20, r22
    29a0:	60 38       	cpi	r22, 0x80	; 128
    29a2:	73 4f       	sbci	r23, 0xF3	; 243
    29a4:	14 f4       	brge	.+4      	; 0x29aa <setMotorVelNoSafetyComms+0x66>
    29a6:	40 e8       	ldi	r20, 0x80	; 128
    29a8:	53 ef       	ldi	r21, 0xF3	; 243
    29aa:	05 2e       	mov	r0, r21
    29ac:	00 0c       	add	r0, r0
    29ae:	66 0b       	sbc	r22, r22
    29b0:	77 0b       	sbc	r23, r23
    29b2:	4d 8b       	std	Y+21, r20	; 0x15
    29b4:	5e 8b       	std	Y+22, r21	; 0x16
    29b6:	6f 8b       	std	Y+23, r22	; 0x17
    29b8:	78 8f       	std	Y+24, r23	; 0x18
	while(cb_size(&motor->Motor_Buffer)>0)
    29ba:	8c 01       	movw	r16, r24
    29bc:	0e 5e       	subi	r16, 0xEE	; 238
    29be:	1f 4f       	sbci	r17, 0xFF	; 255
    29c0:	06 c0       	rjmp	.+12     	; 0x29ce <setMotorVelNoSafetyComms+0x8a>
	{
		cb_pop_front(&motor->Motor_Buffer, temp);
    29c2:	be 01       	movw	r22, r28
    29c4:	6f 5f       	subi	r22, 0xFF	; 255
    29c6:	7f 4f       	sbci	r23, 0xFF	; 255
    29c8:	c8 01       	movw	r24, r16
    29ca:	0e 94 ce 00 	call	0x19c	; 0x19c <cb_pop_front>
		Vel = -MAXRPM;
	}
	char temp[8];
	SDO_packet Continue = {motor->ID, 0x3000, 0x00, 4};
	SDO_packet DesiredVelocity = {motor->ID, 0x3300, 0x0, Vel};
	while(cb_size(&motor->Motor_Buffer)>0)
    29ce:	c8 01       	movw	r24, r16
    29d0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <cb_size>
    29d4:	18 16       	cp	r1, r24
    29d6:	19 06       	cpc	r1, r25
    29d8:	a4 f3       	brlt	.-24     	; 0x29c2 <setMotorVelNoSafetyComms+0x7e>
	{
		cb_pop_front(&motor->Motor_Buffer, temp);
	}
	//write data to motor
	while(!SDOWritePacket(Continue));
    29da:	29 85       	ldd	r18, Y+9	; 0x09
    29dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    29de:	4b 85       	ldd	r20, Y+11	; 0x0b
    29e0:	5c 85       	ldd	r21, Y+12	; 0x0c
    29e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    29e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    29e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e8:	98 89       	ldd	r25, Y+16	; 0x10
    29ea:	90 d0       	rcall	.+288    	; 0x2b0c <SDOWritePacket>
    29ec:	88 23       	and	r24, r24
    29ee:	a9 f3       	breq	.-22     	; 0x29da <setMotorVelNoSafetyComms+0x96>
	while(!SDOWritePacket(DesiredVelocity));
    29f0:	29 89       	ldd	r18, Y+17	; 0x11
    29f2:	3a 89       	ldd	r19, Y+18	; 0x12
    29f4:	4b 89       	ldd	r20, Y+19	; 0x13
    29f6:	5c 89       	ldd	r21, Y+20	; 0x14
    29f8:	6d 89       	ldd	r22, Y+21	; 0x15
    29fa:	7e 89       	ldd	r23, Y+22	; 0x16
    29fc:	8f 89       	ldd	r24, Y+23	; 0x17
    29fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2a00:	85 d0       	rcall	.+266    	; 0x2b0c <SDOWritePacket>
    2a02:	88 23       	and	r24, r24
    2a04:	a9 f3       	breq	.-22     	; 0x29f0 <setMotorVelNoSafetyComms+0xac>
}
    2a06:	68 96       	adiw	r28, 0x18	; 24
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	ff 90       	pop	r15
    2a1c:	ef 90       	pop	r14
    2a1e:	df 90       	pop	r13
    2a20:	cf 90       	pop	r12
    2a22:	08 95       	ret

00002a24 <setMotorCurNoSafetyComms>:
void setMotorCurNoSafetyComms(Motor_t *motor, int Cur)
{
    2a24:	ef 92       	push	r14
    2a26:	ff 92       	push	r15
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	68 97       	sbiw	r28, 0x18	; 24
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	8c 01       	movw	r16, r24
    2a42:	e6 2e       	mov	r14, r22
    2a44:	f7 2e       	mov	r15, r23
	setMotorVelNoSafetyComms(motor, Cur);
    2a46:	7e df       	rcall	.-260    	; 0x2944 <setMotorVelNoSafetyComms>
    2a48:	8e 2d       	mov	r24, r14
    2a4a:	9f 2d       	mov	r25, r15
    2a4c:	89 38       	cpi	r24, 0x89	; 137
    2a4e:	23 e1       	ldi	r18, 0x13	; 19
    2a50:	92 07       	cpc	r25, r18
    2a52:	14 f0       	brlt	.+4      	; 0x2a58 <setMotorCurNoSafetyComms+0x34>
    2a54:	88 e8       	ldi	r24, 0x88	; 136
    2a56:	93 e1       	ldi	r25, 0x13	; 19
	if(Cur < -MAXCURRENTARM)
	{
		Cur = -MAXCURRENTARM;
	}
	char temp[8];
	SDO_packet Continue = {motor->ID, 0x3000, 0x00, 4};
    2a58:	f8 01       	movw	r30, r16
    2a5a:	20 81       	ld	r18, Z
    2a5c:	29 87       	std	Y+9, r18	; 0x09
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	50 e3       	ldi	r21, 0x30	; 48
    2a62:	5b 87       	std	Y+11, r21	; 0x0b
    2a64:	4a 87       	std	Y+10, r20	; 0x0a
    2a66:	1c 86       	std	Y+12, r1	; 0x0c
    2a68:	44 e0       	ldi	r20, 0x04	; 4
    2a6a:	50 e0       	ldi	r21, 0x00	; 0
    2a6c:	60 e0       	ldi	r22, 0x00	; 0
    2a6e:	70 e0       	ldi	r23, 0x00	; 0
    2a70:	4d 87       	std	Y+13, r20	; 0x0d
    2a72:	5e 87       	std	Y+14, r21	; 0x0e
    2a74:	6f 87       	std	Y+15, r22	; 0x0f
    2a76:	78 8b       	std	Y+16, r23	; 0x10
	SDO_packet DesiredVelocity = {motor->ID, 0x3200, 0x0, Cur};
    2a78:	29 8b       	std	Y+17, r18	; 0x11
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	32 e3       	ldi	r19, 0x32	; 50
    2a7e:	3b 8b       	std	Y+19, r19	; 0x13
    2a80:	2a 8b       	std	Y+18, r18	; 0x12
    2a82:	1c 8a       	std	Y+20, r1	; 0x14
    2a84:	88 37       	cpi	r24, 0x78	; 120
    2a86:	fc ee       	ldi	r31, 0xEC	; 236
    2a88:	9f 07       	cpc	r25, r31
    2a8a:	14 f4       	brge	.+4      	; 0x2a90 <setMotorCurNoSafetyComms+0x6c>
    2a8c:	88 e7       	ldi	r24, 0x78	; 120
    2a8e:	9c ee       	ldi	r25, 0xEC	; 236
    2a90:	09 2e       	mov	r0, r25
    2a92:	00 0c       	add	r0, r0
    2a94:	aa 0b       	sbc	r26, r26
    2a96:	bb 0b       	sbc	r27, r27
    2a98:	8d 8b       	std	Y+21, r24	; 0x15
    2a9a:	9e 8b       	std	Y+22, r25	; 0x16
    2a9c:	af 8b       	std	Y+23, r26	; 0x17
    2a9e:	b8 8f       	std	Y+24, r27	; 0x18
	while(cb_size(&motor->Motor_Buffer)>0)
    2aa0:	0e 5e       	subi	r16, 0xEE	; 238
    2aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa4:	06 c0       	rjmp	.+12     	; 0x2ab2 <setMotorCurNoSafetyComms+0x8e>
	{
		cb_pop_front(&motor->Motor_Buffer, temp);
    2aa6:	be 01       	movw	r22, r28
    2aa8:	6f 5f       	subi	r22, 0xFF	; 255
    2aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    2aac:	c8 01       	movw	r24, r16
    2aae:	0e 94 ce 00 	call	0x19c	; 0x19c <cb_pop_front>
		Cur = -MAXCURRENTARM;
	}
	char temp[8];
	SDO_packet Continue = {motor->ID, 0x3000, 0x00, 4};
	SDO_packet DesiredVelocity = {motor->ID, 0x3200, 0x0, Cur};
	while(cb_size(&motor->Motor_Buffer)>0)
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <cb_size>
    2ab8:	18 16       	cp	r1, r24
    2aba:	19 06       	cpc	r1, r25
    2abc:	a4 f3       	brlt	.-24     	; 0x2aa6 <setMotorCurNoSafetyComms+0x82>
	{
		cb_pop_front(&motor->Motor_Buffer, temp);
	}
	//write data to motor
	while(!SDOWritePacket(Continue));
    2abe:	29 85       	ldd	r18, Y+9	; 0x09
    2ac0:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ac2:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ac4:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ac6:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ac8:	7e 85       	ldd	r23, Y+14	; 0x0e
    2aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2acc:	98 89       	ldd	r25, Y+16	; 0x10
    2ace:	1e d0       	rcall	.+60     	; 0x2b0c <SDOWritePacket>
    2ad0:	88 23       	and	r24, r24
    2ad2:	a9 f3       	breq	.-22     	; 0x2abe <setMotorCurNoSafetyComms+0x9a>
	while(!SDOWritePacket(DesiredVelocity));
    2ad4:	29 89       	ldd	r18, Y+17	; 0x11
    2ad6:	3a 89       	ldd	r19, Y+18	; 0x12
    2ad8:	4b 89       	ldd	r20, Y+19	; 0x13
    2ada:	5c 89       	ldd	r21, Y+20	; 0x14
    2adc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ade:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae4:	13 d0       	rcall	.+38     	; 0x2b0c <SDOWritePacket>
    2ae6:	88 23       	and	r24, r24
    2ae8:	a9 f3       	breq	.-22     	; 0x2ad4 <setMotorCurNoSafetyComms+0xb0>
}
    2aea:	68 96       	adiw	r28, 0x18	; 24
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	08 95       	ret

00002b04 <List_Init>:
	

 
	//point head to null
	void List_Init(struct Node** head) {
		*head = NULL;
    2b04:	fc 01       	movw	r30, r24
    2b06:	11 82       	std	Z+1, r1	; 0x01
    2b08:	10 82       	st	Z, r1
    2b0a:	08 95       	ret

00002b0c <SDOWritePacket>:
	SDO.data[7] = Data>>24; 
	
	can_tx(SDOMOB, &SDO);
}

BOOL SDOWritePacket(SDO_packet SDOpacket){
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	63 97       	sbiw	r28, 0x13	; 19
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	13 2f       	mov	r17, r19
    2b24:	5f 87       	std	Y+15, r21	; 0x0f
    2b26:	79 8b       	std	Y+17, r23	; 0x11
    2b28:	76 2f       	mov	r23, r22
    2b2a:	69 89       	ldd	r22, Y+17	; 0x11
    2b2c:	58 2f       	mov	r21, r24

	CAN_packet SDO = {0x600+SDOpacket.NodeID, 8, "01234567"};
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	3a 5f       	subi	r19, 0xFA	; 250
    2b32:	3a 83       	std	Y+2, r19	; 0x02
    2b34:	29 83       	std	Y+1, r18	; 0x01
    2b36:	88 e0       	ldi	r24, 0x08	; 8
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    2b3a:	e7 e0       	ldi	r30, 0x07	; 7
    2b3c:	f1 e0       	ldi	r31, 0x01	; 1
    2b3e:	de 01       	movw	r26, r28
    2b40:	14 96       	adiw	r26, 0x04	; 4
    2b42:	01 90       	ld	r0, Z+
    2b44:	0d 92       	st	X+, r0
    2b46:	8a 95       	dec	r24
    2b48:	e1 f7       	brne	.-8      	; 0x2b42 <SDOWritePacket+0x36>
	SDO.data[0] = 0x23;
    2b4a:	83 e2       	ldi	r24, 0x23	; 35
    2b4c:	8c 83       	std	Y+4, r24	; 0x04
	SDO.data[1] = SDOpacket.ObjIndx;
    2b4e:	1d 83       	std	Y+5, r17	; 0x05
	SDO.data[2] = SDOpacket.ObjIndx>>8;
    2b50:	4e 83       	std	Y+6, r20	; 0x06
	SDO.data[3] = SDOpacket.SubIndx;
    2b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b54:	8f 83       	std	Y+7, r24	; 0x07
	SDO.data[4] = SDOpacket.Data;
    2b56:	78 87       	std	Y+8, r23	; 0x08
	SDO.data[5] = SDOpacket.Data>>8;
    2b58:	69 87       	std	Y+9, r22	; 0x09
	SDO.data[6] = SDOpacket.Data>>16;
    2b5a:	5a 87       	std	Y+10, r21	; 0x0a
	SDO.data[7] = SDOpacket.Data>>24;
    2b5c:	9b 87       	std	Y+11, r25	; 0x0b
	
	return can_tx(SDOMOB, &SDO);
    2b5e:	be 01       	movw	r22, r28
    2b60:	6f 5f       	subi	r22, 0xFF	; 255
    2b62:	7f 4f       	sbci	r23, 0xFF	; 255
    2b64:	8e e0       	ldi	r24, 0x0E	; 14
    2b66:	0e 94 b3 04 	call	0x966	; 0x966 <can_tx>
}
    2b6a:	63 96       	adiw	r28, 0x13	; 19
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	f8 94       	cli
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	08 95       	ret

00002b7e <setTimerInterval>:
#endif

volatile unsigned long long globalTime=0;

void setTimerInterval(timer_t * t, unsigned long long l)
{
    2b7e:	0f 93       	push	r16
    2b80:	1f 93       	push	r17
    2b82:	fc 01       	movw	r30, r24
	t->timerLength=l;
    2b84:	00 83       	st	Z, r16
    2b86:	11 83       	std	Z+1, r17	; 0x01
    2b88:	22 83       	std	Z+2, r18	; 0x02
    2b8a:	33 83       	std	Z+3, r19	; 0x03
    2b8c:	44 83       	std	Z+4, r20	; 0x04
    2b8e:	55 83       	std	Z+5, r21	; 0x05
    2b90:	66 83       	std	Z+6, r22	; 0x06
    2b92:	77 83       	std	Z+7, r23	; 0x07
}
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	08 95       	ret

00002b9a <resetTimer>:

void resetTimer(timer_t * t)
{
    2b9a:	fc 01       	movw	r30, r24
	unsigned long long timenow=globalTime;
    2b9c:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <globalTime>
    2ba0:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <globalTime+0x1>
    2ba4:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <globalTime+0x2>
    2ba8:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <globalTime+0x3>
    2bac:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <globalTime+0x4>
    2bb0:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <globalTime+0x5>
    2bb4:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <globalTime+0x6>
    2bb8:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <globalTime+0x7>
	t->prevTime=timenow;
    2bbc:	70 87       	std	Z+8, r23	; 0x08
    2bbe:	61 87       	std	Z+9, r22	; 0x09
    2bc0:	52 87       	std	Z+10, r21	; 0x0a
    2bc2:	43 87       	std	Z+11, r20	; 0x0b
    2bc4:	34 87       	std	Z+12, r19	; 0x0c
    2bc6:	25 87       	std	Z+13, r18	; 0x0d
    2bc8:	96 87       	std	Z+14, r25	; 0x0e
    2bca:	87 87       	std	Z+15, r24	; 0x0f
    2bcc:	08 95       	ret

00002bce <timerDone>:
}

bool timerDone(timer_t * t)
{
    2bce:	6f 92       	push	r6
    2bd0:	7f 92       	push	r7
    2bd2:	8f 92       	push	r8
    2bd4:	9f 92       	push	r9
    2bd6:	af 92       	push	r10
    2bd8:	bf 92       	push	r11
    2bda:	cf 92       	push	r12
    2bdc:	df 92       	push	r13
    2bde:	ef 92       	push	r14
    2be0:	ff 92       	push	r15
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	fc 01       	movw	r30, r24
	unsigned long long timenow=globalTime;
    2bec:	60 90 50 01 	lds	r6, 0x0150	; 0x800150 <globalTime>
    2bf0:	70 90 51 01 	lds	r7, 0x0151	; 0x800151 <globalTime+0x1>
    2bf4:	80 90 52 01 	lds	r8, 0x0152	; 0x800152 <globalTime+0x2>
    2bf8:	90 90 53 01 	lds	r9, 0x0153	; 0x800153 <globalTime+0x3>
    2bfc:	d0 91 54 01 	lds	r29, 0x0154	; 0x800154 <globalTime+0x4>
    2c00:	c0 91 55 01 	lds	r28, 0x0155	; 0x800155 <globalTime+0x5>
    2c04:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <globalTime+0x6>
    2c08:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <globalTime+0x7>
	if(timenow >= t->prevTime+t->timerLength)
    2c0c:	20 85       	ldd	r18, Z+8	; 0x08
    2c0e:	31 85       	ldd	r19, Z+9	; 0x09
    2c10:	42 85       	ldd	r20, Z+10	; 0x0a
    2c12:	53 85       	ldd	r21, Z+11	; 0x0b
    2c14:	64 85       	ldd	r22, Z+12	; 0x0c
    2c16:	75 85       	ldd	r23, Z+13	; 0x0d
    2c18:	86 85       	ldd	r24, Z+14	; 0x0e
    2c1a:	97 85       	ldd	r25, Z+15	; 0x0f
    2c1c:	a0 80       	ld	r10, Z
    2c1e:	b1 80       	ldd	r11, Z+1	; 0x01
    2c20:	c2 80       	ldd	r12, Z+2	; 0x02
    2c22:	d3 80       	ldd	r13, Z+3	; 0x03
    2c24:	e4 80       	ldd	r14, Z+4	; 0x04
    2c26:	f5 80       	ldd	r15, Z+5	; 0x05
    2c28:	06 81       	ldd	r16, Z+6	; 0x06
    2c2a:	17 81       	ldd	r17, Z+7	; 0x07
    2c2c:	ce d0       	rcall	.+412    	; 0x2dca <__adddi3>
    2c2e:	a2 2e       	mov	r10, r18
    2c30:	b3 2e       	mov	r11, r19
    2c32:	c4 2e       	mov	r12, r20
    2c34:	d5 2e       	mov	r13, r21
    2c36:	e6 2e       	mov	r14, r22
    2c38:	f7 2e       	mov	r15, r23
    2c3a:	08 2f       	mov	r16, r24
    2c3c:	19 2f       	mov	r17, r25
    2c3e:	26 2d       	mov	r18, r6
    2c40:	37 2d       	mov	r19, r7
    2c42:	48 2d       	mov	r20, r8
    2c44:	59 2d       	mov	r21, r9
    2c46:	6d 2f       	mov	r22, r29
    2c48:	7c 2f       	mov	r23, r28
    2c4a:	8b 2f       	mov	r24, r27
    2c4c:	9a 2f       	mov	r25, r26
    2c4e:	d2 d0       	rcall	.+420    	; 0x2df4 <__cmpdi2>
    2c50:	50 f0       	brcs	.+20     	; 0x2c66 <timerDone+0x98>
	{
		t->prevTime=timenow;
    2c52:	60 86       	std	Z+8, r6	; 0x08
    2c54:	71 86       	std	Z+9, r7	; 0x09
    2c56:	82 86       	std	Z+10, r8	; 0x0a
    2c58:	93 86       	std	Z+11, r9	; 0x0b
    2c5a:	d4 87       	std	Z+12, r29	; 0x0c
    2c5c:	c5 87       	std	Z+13, r28	; 0x0d
    2c5e:	b6 87       	std	Z+14, r27	; 0x0e
    2c60:	a7 87       	std	Z+15, r26	; 0x0f
		return true;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	01 c0       	rjmp	.+2      	; 0x2c68 <timerDone+0x9a>
	}
	else
	{
		return false;
    2c66:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	ff 90       	pop	r15
    2c72:	ef 90       	pop	r14
    2c74:	df 90       	pop	r13
    2c76:	cf 90       	pop	r12
    2c78:	bf 90       	pop	r11
    2c7a:	af 90       	pop	r10
    2c7c:	9f 90       	pop	r9
    2c7e:	8f 90       	pop	r8
    2c80:	7f 90       	pop	r7
    2c82:	6f 90       	pop	r6
    2c84:	08 95       	ret

00002c86 <timerDone_NoReset>:
bool timerDone_NoReset(timer_t * t)
{
    2c86:	6f 92       	push	r6
    2c88:	7f 92       	push	r7
    2c8a:	8f 92       	push	r8
    2c8c:	9f 92       	push	r9
    2c8e:	af 92       	push	r10
    2c90:	bf 92       	push	r11
    2c92:	cf 92       	push	r12
    2c94:	df 92       	push	r13
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	fc 01       	movw	r30, r24
	unsigned long long timenow=globalTime;
    2ca4:	60 90 50 01 	lds	r6, 0x0150	; 0x800150 <globalTime>
    2ca8:	70 90 51 01 	lds	r7, 0x0151	; 0x800151 <globalTime+0x1>
    2cac:	80 90 52 01 	lds	r8, 0x0152	; 0x800152 <globalTime+0x2>
    2cb0:	90 90 53 01 	lds	r9, 0x0153	; 0x800153 <globalTime+0x3>
    2cb4:	d0 91 54 01 	lds	r29, 0x0154	; 0x800154 <globalTime+0x4>
    2cb8:	c0 91 55 01 	lds	r28, 0x0155	; 0x800155 <globalTime+0x5>
    2cbc:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <globalTime+0x6>
    2cc0:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <globalTime+0x7>
    2cc4:	20 85       	ldd	r18, Z+8	; 0x08
    2cc6:	31 85       	ldd	r19, Z+9	; 0x09
    2cc8:	42 85       	ldd	r20, Z+10	; 0x0a
    2cca:	53 85       	ldd	r21, Z+11	; 0x0b
    2ccc:	64 85       	ldd	r22, Z+12	; 0x0c
    2cce:	75 85       	ldd	r23, Z+13	; 0x0d
    2cd0:	86 85       	ldd	r24, Z+14	; 0x0e
    2cd2:	97 85       	ldd	r25, Z+15	; 0x0f
    2cd4:	a0 80       	ld	r10, Z
    2cd6:	b1 80       	ldd	r11, Z+1	; 0x01
    2cd8:	c2 80       	ldd	r12, Z+2	; 0x02
    2cda:	d3 80       	ldd	r13, Z+3	; 0x03
    2cdc:	e4 80       	ldd	r14, Z+4	; 0x04
    2cde:	f5 80       	ldd	r15, Z+5	; 0x05
    2ce0:	06 81       	ldd	r16, Z+6	; 0x06
    2ce2:	17 81       	ldd	r17, Z+7	; 0x07
    2ce4:	72 d0       	rcall	.+228    	; 0x2dca <__adddi3>
    2ce6:	a2 2e       	mov	r10, r18
    2ce8:	b3 2e       	mov	r11, r19
    2cea:	c4 2e       	mov	r12, r20
    2cec:	d5 2e       	mov	r13, r21
    2cee:	e6 2e       	mov	r14, r22
    2cf0:	f7 2e       	mov	r15, r23
    2cf2:	08 2f       	mov	r16, r24
    2cf4:	19 2f       	mov	r17, r25
    2cf6:	e1 e0       	ldi	r30, 0x01	; 1
    2cf8:	26 2d       	mov	r18, r6
    2cfa:	37 2d       	mov	r19, r7
    2cfc:	48 2d       	mov	r20, r8
    2cfe:	59 2d       	mov	r21, r9
    2d00:	6d 2f       	mov	r22, r29
    2d02:	7c 2f       	mov	r23, r28
    2d04:	8b 2f       	mov	r24, r27
    2d06:	9a 2f       	mov	r25, r26
    2d08:	75 d0       	rcall	.+234    	; 0x2df4 <__cmpdi2>
    2d0a:	08 f4       	brcc	.+2      	; 0x2d0e <timerDone_NoReset+0x88>
    2d0c:	e0 e0       	ldi	r30, 0x00	; 0
	}
	else
	{
		return false;
	}
}
    2d0e:	8e 2f       	mov	r24, r30
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	df 90       	pop	r13
    2d1e:	cf 90       	pop	r12
    2d20:	bf 90       	pop	r11
    2d22:	af 90       	pop	r10
    2d24:	9f 90       	pop	r9
    2d26:	8f 90       	pop	r8
    2d28:	7f 90       	pop	r7
    2d2a:	6f 90       	pop	r6
    2d2c:	08 95       	ret

00002d2e <initTimer0>:
void initTimer0(void)
{
	TCCR0A = PRESCALER;   //Set the prescaler
    2d2e:	85 e0       	ldi	r24, 0x05	; 5
    2d30:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1<<TOIE0);    //ENABLE Timer Overflow interrupt
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2d38:	08 95       	ret

00002d3a <__vector_17>:
}

ISR(TIMER0_OVF_vect)
{
    2d3a:	1f 92       	push	r1
    2d3c:	0f 92       	push	r0
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	0f 92       	push	r0
    2d42:	11 24       	eor	r1, r1
    2d44:	2f 93       	push	r18
    2d46:	3f 93       	push	r19
    2d48:	4f 93       	push	r20
    2d4a:	5f 93       	push	r21
    2d4c:	6f 93       	push	r22
    2d4e:	7f 93       	push	r23
    2d50:	8f 93       	push	r24
    2d52:	9f 93       	push	r25
    2d54:	af 93       	push	r26
#ifdef PRESCALER1024
	globalTime+=16;
    2d56:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <globalTime>
    2d5a:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <globalTime+0x1>
    2d5e:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <globalTime+0x2>
    2d62:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <globalTime+0x3>
    2d66:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <globalTime+0x4>
    2d6a:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <globalTime+0x5>
    2d6e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <globalTime+0x6>
    2d72:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <globalTime+0x7>
    2d76:	a0 e1       	ldi	r26, 0x10	; 16
    2d78:	31 d0       	rcall	.+98     	; 0x2ddc <__adddi3_s8>
    2d7a:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <globalTime>
    2d7e:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <globalTime+0x1>
    2d82:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <globalTime+0x2>
    2d86:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <globalTime+0x3>
    2d8a:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <globalTime+0x4>
    2d8e:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <globalTime+0x5>
    2d92:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <globalTime+0x6>
    2d96:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <globalTime+0x7>
	globalTime+=4;
#elif PRESCALER64
	globalTime++;
#endif

	TIFR0 = (0<<TOV0);  //Reset timer0 overflow interrupt flag
    2d9a:	15 ba       	out	0x15, r1	; 21
    2d9c:	af 91       	pop	r26
    2d9e:	9f 91       	pop	r25
    2da0:	8f 91       	pop	r24
    2da2:	7f 91       	pop	r23
    2da4:	6f 91       	pop	r22
    2da6:	5f 91       	pop	r21
    2da8:	4f 91       	pop	r20
    2daa:	3f 91       	pop	r19
    2dac:	2f 91       	pop	r18
    2dae:	0f 90       	pop	r0
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	0f 90       	pop	r0
    2db4:	1f 90       	pop	r1
    2db6:	18 95       	reti

00002db8 <__tablejump2__>:
    2db8:	ee 0f       	add	r30, r30
    2dba:	ff 1f       	adc	r31, r31
    2dbc:	00 24       	eor	r0, r0
    2dbe:	00 1c       	adc	r0, r0
    2dc0:	0b be       	out	0x3b, r0	; 59
    2dc2:	07 90       	elpm	r0, Z+
    2dc4:	f6 91       	elpm	r31, Z
    2dc6:	e0 2d       	mov	r30, r0
    2dc8:	09 94       	ijmp

00002dca <__adddi3>:
    2dca:	2a 0d       	add	r18, r10
    2dcc:	3b 1d       	adc	r19, r11
    2dce:	4c 1d       	adc	r20, r12
    2dd0:	5d 1d       	adc	r21, r13
    2dd2:	6e 1d       	adc	r22, r14
    2dd4:	7f 1d       	adc	r23, r15
    2dd6:	80 1f       	adc	r24, r16
    2dd8:	91 1f       	adc	r25, r17
    2dda:	08 95       	ret

00002ddc <__adddi3_s8>:
    2ddc:	00 24       	eor	r0, r0
    2dde:	a7 fd       	sbrc	r26, 7
    2de0:	00 94       	com	r0
    2de2:	2a 0f       	add	r18, r26
    2de4:	30 1d       	adc	r19, r0
    2de6:	40 1d       	adc	r20, r0
    2de8:	50 1d       	adc	r21, r0
    2dea:	60 1d       	adc	r22, r0
    2dec:	70 1d       	adc	r23, r0
    2dee:	80 1d       	adc	r24, r0
    2df0:	90 1d       	adc	r25, r0
    2df2:	08 95       	ret

00002df4 <__cmpdi2>:
    2df4:	2a 15       	cp	r18, r10
    2df6:	3b 05       	cpc	r19, r11
    2df8:	4c 05       	cpc	r20, r12
    2dfa:	5d 05       	cpc	r21, r13
    2dfc:	6e 05       	cpc	r22, r14
    2dfe:	7f 05       	cpc	r23, r15
    2e00:	80 07       	cpc	r24, r16
    2e02:	91 07       	cpc	r25, r17
    2e04:	08 95       	ret

00002e06 <memcpy>:
    2e06:	fb 01       	movw	r30, r22
    2e08:	dc 01       	movw	r26, r24
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <memcpy+0xa>
    2e0c:	01 90       	ld	r0, Z+
    2e0e:	0d 92       	st	X+, r0
    2e10:	41 50       	subi	r20, 0x01	; 1
    2e12:	50 40       	sbci	r21, 0x00	; 0
    2e14:	d8 f7       	brcc	.-10     	; 0x2e0c <memcpy+0x6>
    2e16:	08 95       	ret

00002e18 <_exit>:
    2e18:	f8 94       	cli

00002e1a <__stop_program>:
    2e1a:	ff cf       	rjmp	.-2      	; 0x2e1a <__stop_program>
